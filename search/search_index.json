{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyHELICS","text":"<p>Python HELICS bindings</p> <pre><code>pip install helics\n</code></pre> <p>If you wish to get additional functionality in the CLI (experimental), you can install it using the following:</p> <pre><code>pip install 'helics[cli]'\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>To use the project:</p> <pre><code>import helics as h\nh.helicsGetVersion()\n</code></pre> <p>See https://docs.helics.org for more information about how to use HELICS.</p> <p>This package uses <code>cffi</code> to provide a Python interface to the HELICS C API.</p> <p>By default, when you install from PyPI, the version number of the package will match the version of HELICS that is installed. For example, if you run the following:</p> <pre><code>pip install helics\n</code></pre> <p>You will also get precompiled binaries of HELICS for your platform if they exist. If they don\u2019t exist, a source distribution will attempt to be built and installed. The user can also provide the location of the binaries if they wish to do so. For more information, see https://python.helics.org/installation.</p>"},{"location":"#debugging","title":"Debugging","text":"<p>Please share the output of the following command when creating an issue:</p> <pre><code>$ python -c \"import helics as h; import json; print(json.dumps(h.helicsGetSystemInfo(), indent=4, sort_keys=True))\"\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>General citation for HELICS: T. Hardy, B. Palmintier, P. Top, D. Krishnamurthy and J. Fuller, \u201cHELICS: A Co-Simulation Framework for Scalable Multi-Domain Modeling and Analysis,\u201d in IEEE Access, doi: 10.1109/ACCESS.2024.3363615, available at https://ieeexplore.ieee.org/document/10424422</p>"},{"location":"callbacks/","title":"Implementing HELICS Callbacks in Python","text":"<p>There are several HELICS functionalities that allow for the definition of custom behavior through the use of custom callback functions. Two specific examples are the definition of the filter behavior when implementing a filter federate and the other is the response to a custom query. In both cases custom code needs to be written to define behavior when HELICS needs to perform a specific action (filter a message, respond to a query). There are a few steps to implement callbacks in PyHELICS</p>"},{"location":"callbacks/#define-user-data","title":"Define User Data","text":"<p>The callback function generally exists outside the scope of other code and thus, if the functionality defined in the callback needs data from, say, the federate, that data has to be carried into the callback through a custom class generically called \u201cuser data\u201d. This user data is defined as a class that is instantiated and filled as a part of federate operation.  </p> <pre><code># Store what ever data you'd like. \n# A reference to this object is passed to the filter callback. \n# You don't need to use this if you don't want to.\nclass UserData(object):\n    def __init__(self, iteration_count = None):\n        self.pi = 3.14\n        self.e = 2.718\n        self.interation_count = iteration_count\n</code></pre>"},{"location":"callbacks/#define-the-callback","title":"Define the Callback","text":"<p>This is where the real C-to-Python magic happens, using the \u201ccffi\u201d library. As the HELICS library being used is C-based, there are several things that look weird in the Python world that we have to do to properly hook into that library. The biggest of these is adding a Python decorator to the callback in the form of a string that contains the C signature of the callback being implemented. For example:</p> <pre><code># Filter callback\n@h.ffi.callback(\"void logger(HelicsMessage, void* userData)\")\ndef filter_callback(mess, userData):\n    # Filter operation code here\n\n# Query callback\n@h.ffi.callback(\"void query(const char *query, int querySize, HelicsQueryBuffer buffer, void *user_data)\")\ndef query_callback(query_ptr, size:int, query_buffer_ptr, user_data):\n    query_str = h.ffi.string(query_ptr,size).decode()\n    query_buffer = h.HelicsQueryBuffer(query_buffer_ptr)\n    # Query operation code here\n</code></pre> <p>In the case of the query callback, you can see there are two other bits that need to be added in.</p> <p>1 - The query string is passed in as a C pointer. If you\u2019ve only worked in Python, you might wonder what a \u201cpointer\u201d is. So does Python; the \u201ccffi\u201d library is used to translate the data the pointer is referencing into something Python recognizes as a string.    2 - The query response that will be created by the callback function must be put into a pre-constructed databuffer that is passed in when the callback is made (\u201cHelicsQueryBuffer buffer\u201d in the above C signature). HELICS will read this buffer to get the response of the callback. Again, pointers are involved so we use the \u201ccffi\u201d library to make them something Python can deal with.</p>"},{"location":"callbacks/#register-the-callback","title":"Register the Callback","text":"<p>Last step, with the callback defined we need to \u201cregister\u201d it so that HELICS knows which function to call when its time to execute the callback. This is done as part of setting up your federate and should be done as early as possible so that the federate is able to respond to any callbacks that come in early in the life of a federate.</p> <pre><code># Filter callback federate code\ndef main():\n    ...\n    f1 = h.helicsFederateRegisterFilter(fFed, h.HELICS_FILTER_TYPE_CUSTOM, \"filter1\")\n    userdata = UserData(iteration_count = 10)\n    user_data_handle = h.ffi.new_handle(userdata)\n    h.helicsFilterSetCustomCallback(f1, filter_callback, user_data_handle)\n\n\n# Query callback federate code\ndef main():\n    ...\n    fed = h.helicsCreateValueFederateFromConfig(\"math_fed.json\")\n    user_data = UserData(iteration_count = 10)\n    user_data_handle = h.ffi.new_handle(user_data)\n    h.helicsFederateSetQueryCallback(fed, query_callback, user_data_handle)\n</code></pre> <p>In both cases, the user data is defined, a \u201chandle\u201d to the user data is created, and the callback functions are registered using specific HELICS APIs.</p>"},{"location":"callbacks/#complete-examples","title":"Complete Examples","text":"<p>Here are the full code for completeness sake. As of this writing, there is not a running example for the filter callback but there is one for the query callback in the HELICS Examples repository.</p>"},{"location":"callbacks/#filter-federate-code","title":"Filter Federate Code","text":"<pre><code>class UserData(object):\n    def __init__(self, iteration_count = None):\n        self.pi = 3.14\n        self.e = 2.718\n        self.interation_count = iteration_count\n\n@h.ffi.callback(\"void logger(HelicsMessage, void* userData)\")\ndef filter_callback(mess, userData):\n    # Filter operation code here\n\n\ndef main():\n    fed = h.helicsCreateValueFederateFromConfig(\"math_fed.json\")\n    f1 = h.helicsFederateRegisterFilter(fed, h.HELICS_FILTER_TYPE_CUSTOM, \"filter1\")\n    userdata = UserData(iteration_count = 10)\n    user_data_handle = h.ffi.new_handle(userdata)\n    h.helicsFilterSetCustomCallback(f1, filter_callback, user_data_handle)\n</code></pre>"},{"location":"callbacks/#query-response-code","title":"Query Response Code","text":"<pre><code>class UserData(object):\n    def __init__(self, iteration_count = None):\n        self.pi = 3.14\n        self.e = 2.718\n        self.interation_count = iteration_count\n\n@h.ffi.callback(\"void query(const char *query, int querySize, HelicsQueryBuffer buffer, void *user_data)\")\ndef query_callback(query_ptr, size:int, query_buffer_ptr, user_data):\n    query_str = h.ffi.string(query_ptr,size).decode()\n    query_buffer = h.HelicsQueryBuffer(query_buffer_ptr)\n    # Query operation code here\n\n\ndef main():\n    fed = h.helicsCreateValueFederateFromConfig(\"math_fed.json\")\n    user_data = UserData(iteration_count = 10)\n    user_data_handle = h.ffi.new_handle(user_data)\n    h.helicsFederateSetQueryCallback(fed, query_callback, user_data_handle)\n</code></pre>"},{"location":"cli-interface/","title":"CLI interface","text":"<p>CLI for running Hierarchical Engine for Large-scale Infrastructure Co-Simulations (HELICS).</p> <ul> <li>Supports configurations of federates using plugins</li> <li>Allows running of federation using a runner configuration</li> </ul> <p></p>"},{"location":"cli-interface/#documentation","title":"Documentation","text":"<pre><code>helics --help\n</code></pre> <pre><code>Usage: helics [OPTIONS] COMMAND [ARGS]...\n\n  HELICS command line interface\n\nOptions:\n  --version      Show the version and exit.\n  -v, --verbose\n  --help         Show this message and exit.\n\nCommands:\n  observer\n  profile-plot\n  run           Run HELICS federation\n  server\n</code></pre> <pre><code>helics run --help\n</code></pre> <pre><code>Usage: helics run [OPTIONS]\n\n  Run HELICS federation\n\nOptions:\n  --path PATH                     Path to config.json that describes how to\n                                  run a federation  [required]\n  --silent\n  --no-log-files\n  --no-kill-on-error              Do not kill all federates on error\n  -l, --broker-loglevel, --loglevel TEXT\n                                  Log level for HELICS broker\n  --profile                       Profile flag\n  -w, --web                       Run the web interface on startup\n  --help                          Show this message and exit.\n</code></pre> <pre><code>$ helics profile-plot --help\n</code></pre> <pre><code>Usage: helics profile-plot [OPTIONS]\n\nOptions:\n  --path PATH  Path to profile.txt that describes profiling results of a\n               federation  [required]\n  --help       Show this message and exit.\n</code></pre>"},{"location":"cli-interface/#usage","title":"Usage","text":"<pre><code>helics run --path examples/pi-exchange/runner.json --profile\nhelics profile-plot examples/pi-exchange/profile.txt\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>This package uses <code>cffi</code> to interface with the HELICS library. The source for this package contains only pure python code.</p> <p>Python helics packages with version numbers greater than <code>v2.6.0</code> use this new cffi interface. Versions equal to and prior to <code>v2.6.0</code> used swig to generate the Python API.</p>"},{"location":"installation/#install-from-pypi-recommended","title":"Install from PyPI (recommended)","text":"<pre><code>$ which python # sanity check on Unix\n$ which pip    # sanity check on Unix\n\n$ where python # sanity check on Windows\n$ where pip    # sanity check on Windows\n\n$ python -m pip install 'helics[cli]'\n</code></pre> <p>Using <code>python -m pip</code> invokes the <code>pip</code> module from the <code>python</code> process. This is the safest way to ensure you are installing <code>helics</code> into the place <code>python</code> will look for packages. If <code>pip</code> and <code>python</code> belong to the same environment, you can invoke <code>pip</code> directly.</p> <p>It is recommended to use the optional <code>[cli]</code> extension on the PyHELICS install to provide the use of the \u201crunner\u201d functionality for launching co-simulations (among other features) All of the HELICS User Guide examples use the runner.</p> <p>This will give you the latest version of the python helics interface. If you already have helics installed, you can upgrade to the latest version by using the following:</p> <pre><code>$ pip install helics --upgrade\n</code></pre> <p>You can install a specific version by using the following:</p> <pre><code>$ pip install helics\n</code></pre> <p>By default, when you install from PyPI, the version number of the package will match the version of HELICS that is installed. For example, if you run the following:</p> <pre><code>$ pip install helics\n</code></pre> <p>You will also get precompiled binaries of HELICS for your platform if they exist. If they don\u2019t exist, a source distribution will be installed in which case the user must provide the location of the binaries. See the next section for more information about how to do that.</p>"},{"location":"installation/#custom-version-of-helics","title":"Custom version of HELICS","text":"<p>The python package in this repository uses a environment variable called <code>PYHELICS_INSTALL</code> to choose the location of the precompiled binaries of the C HELICS library. If you wish to change the version of HELICS used, you can set this environment variable to point to the location of an HELICS installation.</p> <p>For example, let\u2019s say as a user you want to use HELICS in a Conda environment.</p> <pre><code>$ conda create -n helics-py3-env python=3 -y\n$ conda activate helics-py3-env\n</code></pre> <p>Running <code>import helics</code> in python in this environment throws an error because python package hasn\u2019t been installed yet.</p> <pre><code>$ python -c 'import helics'\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  ModuleNotFoundError: No module named 'helics'\n</code></pre> <p>You can install <code>helics</code> using <code>pip</code>.</p> <pre><code>$ pip install helics\npip install helics\nCollecting helics\n  Downloading helics-2.6.1.post0-py3-none-macosx_10_9_x86_64.whl (6.6 MB)\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6.6 MB 2.3 MB/s\nCollecting enum34&gt;=1.1.10\n  Using cached enum34-1.1.10-py3-none-any.whl (11 kB)\nCollecting cffi&gt;=1.0.0\n  Using cached cffi-1.14.3-2-cp38-cp38-macosx_10_9_x86_64.whl (176 kB)\nCollecting pycparser\n  Using cached pycparser-2.20-py2.py3-none-any.whl (112 kB)\nInstalling collected packages: enum34, pycparser, cffi, helics\nSuccessfully installed cffi-1.14.3 enum34-1.1.10 helics-2.6.1.post0 pycparser-2.20\n</code></pre> <p>Now that you have installed the python package, you can check that it works:</p> <pre><code>$ python -c \"import helics; print(helics.helicsGetVersion())\"\n2.6.1 (2020-10-15)\n</code></pre> <p>This installs the Python package <code>helics-2.6.1.post0</code> and it comes with precompiled binaries for HELICS version 2.6.1 that we released on 2020-10-15.</p> <p>Let\u2019s say you\u2019ve made modification to the HELICS library or compiled it with some different flags. Or you are interested in a using an older version of HELICS. You can do that with this python package by changing the <code>PYHELICS_INSTALL</code> environment variable.</p> <p>As an example, if you want to use the Python package with HELICS v2.5.2, you can clone the git repository for HELICS, build from source and install it to any location. In this example, I chose to install it in <code>~/local/helics-v2.5.2</code>.</p> <pre><code>$ git clone https://github.com/GMLC-TDC/HELICS\n$ cd HELICS\n$ git checkout v2.5.2\n$ mkdir -p build\n$ cmake -DCMAKE_INSTALL_PREFIX=~/local/helics-v2.5.2 ..\n$ make -j8 &amp;&amp; make install\n</code></pre> <p>Now in bash, you can set the environment variable:</p> <pre><code>$ export PYHELICS_INSTALL=~/local/helics-v2.5.2\n</code></pre> <p>Now when you <code>import helics</code> and print the version you\u2019ll get <code>2.5.2 (2020-06-14)</code>.</p> <pre><code>$ python -c \"import helics; print(helics.helicsGetVersion())\"\n2.5.2 (2020-06-14)\n</code></pre> <p>If you want to build from source and use the <code>develop</code> branch:</p> <pre><code>$ git checkout develop\n$ git submodule update\n$ cmake -DCMAKE_INSTALL_PREFIX=~/local/helics-develop ..\n$ make -j8 &amp;&amp; make install\n$ export PYHELICS_INSTALL=~/local/helics-develop\n$ python -c \"import helics; print(helics.helicsGetVersion())\"\n2.6.0-develop-g3a460f1f (2020-09-24)\n</code></pre> <p>The Python HELICS cffi interface is tested with the latest version of HELICS. If you find any issues with earlier versions of HELICS, please report them on https://github.com/GMLC-TDC/HELICS/issues.</p>"},{"location":"installation/#from-source","title":"From Source","text":""},{"location":"installation/#download","title":"Download","text":"<p>In order to run this package, you will need to download HELICS.</p> <p>You can use this package to download HELICS.</p> <pre><code>$ git clone https://github.com/GMLC-TDC/pyhelics\n$ cd pyhelics\n$ python setup.py download\n</code></pre> <p>Alternatively, you can install HELICS in any way you like and point this package to the correct installation. You can do this by setting the <code>PYHELICS_INSTALL</code> environment variable, as described in the previous section. The path to the installation must be the root of the installation.</p> <p>On Linux or Mac, add the following to your <code>~/.bashrc</code>.</p> <pre><code>$ export PYHELICS_INSTALL=\"/path/to/helics_installation\"\n</code></pre> <p>where</p> <pre><code>$ tree /path/to/helics_installation\n\nhelics_installation\n\u251c\u2500\u2500 include\n\u2502 \u2514\u2500\u2500 helics\n\u251c\u2500\u2500 lib\n\u2502 \u251c\u2500\u2500 cmake\n\u2502 \u251c\u2500\u2500 libhelicsSharedLib.2.6.1.dylib\n\u2502 \u251c\u2500\u2500 libhelicsSharedLib.2.dylib - &gt; libhelicsSharedLib.2.6.1.dylib\n\u2502 \u251c\u2500\u2500 libhelicsSharedLib.dylib - &gt; libhelicsSharedLib.2.dylib\n\u2502 \u251c\u2500\u2500 libzmq.5.2.2.dylib\n\u2502 \u251c\u2500\u2500 libzmq.5.dylib - &gt; libzmq.5.2.2.dylib\n\u2502 \u251c\u2500\u2500 libzmq.dylib - &gt; libzmq.5.dylib\n\u2502 \u2514\u2500\u2500 pkgconfig\n\u2514\u2500\u2500 share\n\u251c\u2500\u2500 doc\n\u251c\u2500\u2500 helics\n\u2514\u2500\u2500 man\n</code></pre> <p>On Windows, follow instructions online to set a user environment variable to the path of the HELICS installation. You can also use <code>set PYHELICS_INSTALL=\"C:\\path\\to\\helics_installation\"</code> in a command line session.</p>"},{"location":"installation/#install","title":"Install","text":"<p>Next, you can install pyhelics by either using <code>pip</code> or setting your <code>PYTHONPATH</code></p> <pre><code>$ git clone https://github.com/GMLC-TDC/pyhelics\n$ cd pyhelics\n$ python -m pip install -e .\n</code></pre> <p>This will install <code>pyhelics</code>.</p> <p>Run the following to ensure that everything is working as expected.</p> <pre><code>import helics as h\nprint(h.__file__) # this should print the path to the __init__.py file in the pyhelics repository\nprint(h.helicsGetVersion()) # this should print the version of the HELICS library in the PYHELICS_INSTALL environment or the latest version of HELICS\n</code></pre> <p>See Migration from HELICS2 to HELICS3 for more information on changes between this version and the SWIG version of the HELICS library.</p>"},{"location":"installation/#linking-helics-library","title":"Linking HELICS library","text":"<p>If you are interested in using the HELICS libraries that are installed along with Python with another application, you can find them in the location that is printed by running the following:</p> <pre><code>$ python -c 'import helics as h; print(h._build.PYHELICS_INSTALL)'\n</code></pre>"},{"location":"installation/#additional-environment-variables","title":"Additional environment variables","text":"<ul> <li><code>PYHELICS_FREE_ON_DESTRUCTION</code> (True): Calls <code>helicsFederateFree</code> on <code>HelicsFederate</code> destruction, and similar respective functions for other objects.</li> <li><code>PYHELICS_CLEANUP_ON_DESTRUCTION</code> (False): Calls <code>helicsCleanup</code> on <code>HelicsFederate</code> and other objects destruction.</li> </ul>"},{"location":"migration-helics2-helics3/","title":"Migrating python code from HELICS v2.x.x to HELICS v3.x.x","text":"<p>This document will describe the path to migrate your python code from HELICS version 2.x.x to version 3.x.x.</p> <p>pyhelics is backward and forward compatible. So you won\u2019t need to make any of these changes. The following document is for reference only.</p> <p>See this commit for a diff of all the changes.</p> <p>You can also see the tests folder on github for more examples on how to use the various functions.</p> <p>See the Pythonic Interface for all the new functionality that is available in pyhelics.</p>"},{"location":"migration-helics2-helics3/#functions","title":"Functions","text":"<p>Related to <code>HelicsMessage</code></p> <p>Previously you may have add code to deal with <code>message</code>s like this:</p> <pre><code># helics v2\nm = h.helicsEndpointGetMessage(endpoint)\nassert m.source == \"port1\"\nassert m.original_source == \"port1\"\nassert m.destination == \"port2\"\nassert m.data == len(data)\nassert m.time == 2.5\n</code></pre> <p>The return object of <code>helicsEndpointGetMessage(endpoint)</code> is now a opaque object and you will have to use <code>helics*</code> functions to get the various attributes of that object.</p> <pre><code># helics v3\nm = h.helicsEndpointGetMessage(endpoint)\nassert h.helicsMessageGetSource(m) == \"port1\"\nassert h.helicsMessageGetOriginalSource(m) == \"port1\"\nassert h.helicsMessageGetDestination(m) == \"port2\"\nassert h.helicsMessageGetRawDataSize(m) == len(data)\nassert h.helicsMessageGetTime(m) == 2.5\n</code></pre> <p>Functions named with <code>MessageObject</code> are renamed to use <code>Message</code>. This is all handled transparently in pyhelics, so you don\u2019t need to deal with it.</p> <p>This function has been renamed: <code>helicsMessageCheckFlag</code> -&gt; <code>helicsMessageGetFlagOption</code> to be consistent with <code>helicsMessageSetFlagOption</code>.</p> <p>Related to raw data</p> <p>Additionally, any function that takes <code>bytes</code> as an input must be passed in a python bytestring. If you have a regular python unicode string, as the user yoou are responsible for converting to a byte string with an encoding of your choice.</p> <p>To convert a python unicode string to a byte string, you can do <code>\"hello world\".encode()</code>. You can even specify the encoding: <code>\"hello world\".encode()</code>.</p> <p>Similarly, any helics function that returns a byte string must be handled correctly on the user end. As a user, you are at the moment required to know the encoding of the message in order to convert it to the correct string.</p> <p>All functions that have <code>Raw</code> in the name are replaced with functions that have <code>Bytes</code> in the name.</p> <p>e.g.</p> <p><code>helicsMessageGetRawData</code> -&gt; <code>helicsMessageGetBytes</code></p> <p>Related to complex numbers</p> <p>Previously, you would need to pass real and imaginary components of complex numbers as separate floating point values.</p> <pre><code># helics v2\nh.helicsInputSetDefaultComplex(sub, -9.9, 2.5)\n</code></pre> <p>Now you can pass them as a complex number.</p> <pre><code># helics v3\nh.helicsInputSetDefaultComplex(sub, -9.9 + 2.5j)\n</code></pre> <p>These are the full list of functions:</p> <ul> <li><code>helicsInputGetComplex</code></li> <li><code>helicsPublicationPublishComplex</code></li> <li><code>helicsInputSetDefaultComplex</code></li> </ul> <p>that are affected by this change.</p> <p>Related to endpoints</p> <p>The following functions have been renamed and the argument order has been updated:</p> <ul> <li><code>helicsEndpointSendMessageRaw</code> -&gt; <code>helicsEndpointSendBytesTo</code></li> <li><code>helicsEndpointSendEventRaw</code> -&gt; <code>helicsEndpointSendBytesToAt</code></li> </ul>"},{"location":"migration-helics2-helics3/#related-to-counting","title":"Related to counting","text":"<p>The following functions have been renamed:</p> <ul> <li><code>helicsFederatePendingMessages</code> -&gt; <code>helicsFederatePendingMessageCount</code></li> <li><code>helicsEndpointPendingMessages</code> -&gt; <code>helicsEndpointPendingMessageCount</code></li> </ul>"},{"location":"migration-helics2-helics3/#enumerations","title":"Enumerations","text":"<p>Enumerations are constants now, and are represented by upper case variables:</p> <pre><code># helics v2\nh.helicsFederateInfoSetIntegerProperty(fedInfo1, h.helics_property_int_log_level, 1)\nh.helicsFederateInfoSetIntegerProperty(fedInfo1, h.helics_property_int_max_iterations, 100)\n</code></pre> <pre><code># helics v3\nh.helicsFederateInfoSetIntegerProperty(fedInfo1, h.HELICS_PROPERTY_INT_LOG_LEVEL, 1)\nh.helicsFederateInfoSetIntegerProperty(fedInfo1, h.HELICS_PROPERTY_INT_MAX_ITERATIONS, 100)\n</code></pre>"},{"location":"migration-helics2-helics3/#new-functionality","title":"New functionality","text":"<p>If you would like to use callbacks you can do the following in HELICS v3.x.x:</p> <pre><code>@h.ffi.callback(\"void logger(HelicsMessage, void* userData)\")\ndef filterFunc1(mess, user_data):\n    time = h.helicsMessageGetTime(mess)\n    user_data = h.ffi.from_handle(user_data)\n\n    h.helicsMessageSetTime(mess, time + 2.5)\n    user_data += 1\n\n\nclass UserData(object):\n    def __init__(self, x):\n        self.x = x\n\n\n...\n\nuser_data = UserData(5)\nhandle = h.ffi.new_handle(user_data)\nh.helicsFilterSetCustomCallback(f1, filterFunc1, handle)\n\n...\n</code></pre> <p>Find the signature of the function that you\u2019d like to call, use <code>h.ffi.callback</code> as a python decorator for that function.</p> <p>In HELICS v3,</p> <pre><code>@h.ffi.callback(\"void logger(HelicsMessage, void* userData)\")\n</code></pre> <p>In HELICS v2.x.x, use <code>helics_message_object</code> instead.</p> <pre><code>@h.ffi.callback(\"void logger(helics_message_object, void* userData)\")\n</code></pre> <p>Then, you can pass the variable that contains a reference to this C function to a helics callback function. The user is responsible for managing memory with relation to these objects. See <code>cffi</code>\u2019s documentation for more information.</p>"},{"location":"pythonic-interface/","title":"Pythonic interface","text":"<p>Example of what it looks like to use the Pythonic interface:</p> <pre><code>import helics as h\n\nbroker = h.helicsCreateBroker(\"zmq\", \"\", \"-f 1 --name=mainbroker\")\n\nfedinfo = h.helicsCreateFederateInfo()\n\nfedinfo.core_name = \"TestFederate\"\nfedinfo.core_type = \"zmq\"\nfedinfo.core_init = \"-f 1 --broker=mainbroker\"\n\nmFed = h.helicsCreateCombinationFederate(\"TestFederate\", fedinfo)\nmFed.register_endpoint(\"ep1\")\nmFed.register_global_endpoint(\"ep2\")\nmFed.property[h.HELICS_PROPERTY_TIME_DELTA] = 1.0\n\npub = mFed.register_publication(\"publication\", h.HELICS_DATA_TYPE_STRING, \"custom-units\")\n\nsub = mFed.register_subscription(\"TestFederate/publication\", \"custom-units\")\nsub.option[\"CONNECTION_REQUIRED\"] = 1\nsub.set_default(b\"hello\")\nsub.set_default(\"world\")\nsub.set_default(0)\nsub.set_default(True)\nsub.set_default(1.1)\nsub.set_default(2 + 1.1j)\nsub.set_default([1.0, 2.0, 3.0])\n\nsub.info = \"hello world\"\n\nmFed.publications[\"TestFederate/publication\"].option[\"CONNECTION_REQUIRED\"] = 1\n\nmFed.enter_executing_mode()\n\ndata = \"random-data\"\n\nmFed.endpoints[\"TestFederate/ep1\"].default_destination = \"ep2\"\nmFed.endpoints[\"TestFederate/ep1\"].info = \"information\"\n\nmFed.endpoints[\"TestFederate/ep1\"].send_data(data, \"ep2\", 1.0)\n\nmFed.publications[\"TestFederate/publication\"].publish(\"first-time\")\n\nassert mFed.request_time(2.0) == 1.0\n\nprint(\"\"\"mFed.subscriptions[\"TestFederate/publication\"].bytes: \"\"\", mFed.subscriptions[\"TestFederate/publication\"].bytes)\n\nassert mFed.subscriptions[\"TestFederate/publication\"].bytes == b\"first-time\"\n\nprint(\"Exiting...\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>This document will a simple 2 federate co-simulation in Python.</p>"},{"location":"usage/#broker","title":"Broker","text":"<pre><code>import helics as h\n\nbroker = h.helicsCreateBroker(\"zmq\", \"\", \"-f 2 --name=mainbroker\")\n\nwhile h.helicsBrokerIsConnected(broker):\n    time.sleep(1)\n</code></pre>"},{"location":"usage/#federate-1","title":"Federate 1","text":"<pre><code>import time\nimport helics as h\nfrom math import pi\n\nfedinfo = h.helicsCreateFederateInfo()\n\nh.helicsFederateInfoSetCoreName(fedinfo, \"Federate1\")\nh.helicsFederateInfoSetCoreTypeFromString(fedinfo, \"zmq\")\nh.helicsFederateInfoSetCoreInitString(fedinfo, \"--broker=mainbroker --federates=1\")\nh.helicsFederateInfoSetTimeProperty(fedinfo, h.HELICS_PROPERTY_TIME_DELTA, 0.01)\n\nvfed = h.helicsCreateValueFederate(\"Federate1\", fedinfo)\n\npub = h.helicsFederateRegisterGlobalTypePublication(vfed, \"topic_name\", \"double\", \"\")\n\nh.helicsFederateEnterExecutingMode(vfed)\n\nthis_time = 0.0\n\nfor t in range(5, 10):\n\n    currenttime = h.helicsFederateRequestTime(vfed, t)\n\n    h.helicsPublicationPublishDouble(pub, pi)\n    print(\"SENDER: Sending value pi = {} at time {} to RECEIVER\".format(pi, currenttime))\n\n    time.sleep(1)\n\nh.helicsFederateFinalize(vfed)\n\nh.helicsFederateFree(vfed)\nh.helicsCloseLibrary()\n</code></pre>"},{"location":"usage/#federate-2","title":"Federate 2","text":"<pre><code>import helics as h\n\nfedinfo = h.helicsCreateFederateInfo()\nh.helicsFederateInfoSetCoreName(fedinfo, \"Federate2\")\nh.helicsFederateInfoSetCoreTypeFromString(fedinfo, \"zmq\")\nh.helicsFederateInfoSetCoreInitString(fedinfo, \"--federates=1\")\nh.helicsFederateInfoSetTimeProperty(fedinfo, h.HELICS_PROPERTY_TIME_DELTA, 0.01)\n\nvfed = h.helicsCreateValueFederate(\"Federate2\", fedinfo)\n\nsub = h.helicsFederateRegisterSubscription(vfed, \"topic_name\", \"\")\n\nh.helicsFederateEnterExecutingMode(vfed)\n\nvalue = 0.0\ncurrenttime = -1\n\nwhile currenttime &lt;= 100:\n\n    currenttime = h.helicsFederateRequestTime(vfed, 100)\n\n    value = h.helicsInputGetString(sub)\n    print(\"RECEIVER: Received value = {} at time {} from SENDER\".format(value, currenttime))\n\nh.helicsFederateFinalize(vfed)\n\nh.helicsFederateFree(vfed)\nh.helicsCloseLibrary()\n</code></pre>"},{"location":"web-interface/","title":"Web interface","text":"<pre><code>helics server\n</code></pre> <p>Demo of web interface:</p> <p>Link to demo</p> <p></p>"},{"location":"api/","title":"Module helics","text":""},{"location":"api/#submodules","title":"Submodules","text":"<p>helics.bin</p> <p>helics.capi</p> <p>helics.cli</p> <p>helics.profile</p> <p>helics.status_checker</p> <p>helics.utils</p> <p>helics.vcredist</p>"},{"location":"api/bin-py/","title":"Module helics.bin","text":""},{"location":"api/bin-py/#functions","title":"Functions","text":""},{"location":"api/bin-py/#helics_app","title":"helics_app","text":"<pre><code>def helics_app()\n</code></pre>"},{"location":"api/bin-py/#helics_broker","title":"helics_broker","text":"<pre><code>def helics_broker()\n</code></pre>"},{"location":"api/bin-py/#helics_broker_server","title":"helics_broker_server","text":"<pre><code>def helics_broker_server()\n</code></pre>"},{"location":"api/bin-py/#helics_player","title":"helics_player","text":"<pre><code>def helics_player()\n</code></pre>"},{"location":"api/bin-py/#helics_recorder","title":"helics_recorder","text":"<pre><code>def helics_recorder()\n</code></pre>"},{"location":"api/capi-py/","title":"Module helics.capi","text":""},{"location":"api/capi-py/#classes","title":"Classes","text":""},{"location":"api/capi-py/#HelicsApp","title":"HelicsApp","text":"<pre><code>class HelicsApp(self, handle, cleanup=True)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsApp-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsBroker","title":"HelicsBroker","text":"<pre><code>class HelicsBroker(handle, cleanup=True)\n</code></pre>"},{"location":"api/capi-py/#HelicsBroker-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsBroker-attrs","title":"Instance attributes","text":"<ul> <li> <p>address Get the connection address for the broker.</p> </li> <li> <p>identifier Get the local identification for the broker.</p> </li> <li> <p>name Get the local identification for the broker.</p> </li> </ul>"},{"location":"api/capi-py/#HelicsBroker-methods","title":"Methods","text":"<p>add_alias</p> <pre><code>def add_alias(self, interface_name: str, alias: str)\n</code></pre> <p>Create an alias for an interface.</p> <p>Parameters</p> <ul> <li><code>interfaceName</code>: The current name of an interface.</li> <li><code>alias</code>: The additional name to use for the given interface.</li> </ul> <p>add_destination_filter_to_endpoint</p> <pre><code>def add_destination_filter_to_endpoint(self, filter: str, target: str)\n</code></pre> <p>Create a filter connection between a named filter and a named endpoint for destination processing.</p> <p>Parameters</p> <ul> <li><code>filter</code>: the name of the filter.</li> <li><code>target</code>: the name of the source target.</li> </ul> <p>add_source_filter_to_endpoint</p> <pre><code>def add_source_filter_to_endpoint(self, filter: str, target: str)\n</code></pre> <p>Create a filter connection between a named filter and a named endpoint for messages coming from that endpoint.</p> <p>Parameters</p> <p><code>filter</code>: the name of the filter. <code>target</code>: the name of the source target.</p> <p>data_link</p> <pre><code>def data_link(self, source: str, target: str)\n</code></pre> <p>Create a data link between a named publication and a named input.</p> <p>Parameters</p> <ul> <li><code>source</code>: the name of the publication.</li> <li><code>target</code>: the name of the input.</li> </ul> <p>disconnect</p> <pre><code>def disconnect(self)\n</code></pre> <p>Disconnect the broker from any other brokers and communications.</p> <p>global_error</p> <pre><code>def global_error(self, error_code: int, error_string: str)\n</code></pre> <p>Generate a global error to terminate the federation.</p> <p>Parameters</p> <ul> <li><code>error_code</code>: an error code to give to the error.</li> <li><code>error_string</code>: a string message associated with the error.</li> </ul> <p>is_connected</p> <pre><code>def is_connected(self)\n</code></pre> <p>Check if the broker is connected.</p> <p>query</p> <pre><code>def query(self, target: str, query: str, mode: HelicsSequencingMode = HelicsSequencingMode.FAST) -&gt; JSONType\n</code></pre> <p>Make a query of the broker.</p> <p>This call is blocking until the value is returned which may take some time depending on the size of the federation and the specific string being queried.</p> <p>Parameters</p> <ul> <li><code>target</code>:  the target of the query can be \u201cfederation\u201d, \u201cfederate\u201d, \u201cbroker\u201d, \u201ccore\u201d, or a specific name of a federate, core, or broker.</li> <li><code>query</code>: a string with the query, see other documentation for specific properties to query, can be defined by the federate.</li> </ul> <p>Returns: a string with the value requested. This is either going to be a vector of strings value or a JSON string stored in the first element of the vector. The string \u201c#invalid\u201d is returned if the query was not valid.</p> <p>set_global</p> <pre><code>def set_global(self, name: str, value: str)\n</code></pre> <p>Set a federation global value.</p> <p>This overwrites any previous value for this name. globals can be queried with a target of \u201cglobal\u201d and query of the value to Query.</p> <p>Parameters</p> <ul> <li><code>name</code>: the name of the global to set.</li> <li><code>value</code>: the value of the global.</li> </ul> <p>wait_for_disconnect</p> <pre><code>def wait_for_disconnect(self, ms_to_wait: int = -1)\n</code></pre> <p>Waits in the current thread until the broker is disconnected.</p> <p>Parameters</p> <ul> <li><code>ms_to_wait</code>: the timeout to wait for disconnect (-1) implies no timeout</li> </ul> <p>Returns: <code>True</code> if the disconnect was successful false if it timed out</p>"},{"location":"api/capi-py/#HelicsCallbackFederate","title":"HelicsCallbackFederate","text":"<pre><code>class HelicsCallbackFederate(handle)\n</code></pre>"},{"location":"api/capi-py/#HelicsCallbackFederate-bases","title":"Base classes","text":"<ul> <li><code>HelicsCombinationFederate</code></li> </ul>"},{"location":"api/capi-py/#HelicsCallbackFederate-attrs","title":"Instance attributes","text":"<ul> <li> <p>core</p> </li> <li> <p>current_time</p> </li> <li> <p>n_endpoints</p> </li> <li> <p>n_filters</p> </li> <li> <p>n_inputs</p> </li> <li> <p>n_pending_messages Returns the number of pending receives for all endpoints.</p> </li> <li> <p>n_publications Get the number of publications in this federate.</p> </li> <li> <p>n_subscriptions Get the number of inputs in this federate.</p> </li> <li> <p>name</p> </li> <li> <p>separator</p> </li> <li> <p>state</p> </li> </ul>"},{"location":"api/capi-py/#HelicsCloningFilter","title":"HelicsCloningFilter","text":"<pre><code>class HelicsCloningFilter(handle, cleanup=True)\n</code></pre>"},{"location":"api/capi-py/#HelicsCloningFilter-bases","title":"Base classes","text":"<ul> <li><code>HelicsFilter</code></li> </ul>"},{"location":"api/capi-py/#HelicsCloningFilter-attrs","title":"Instance attributes","text":"<ul> <li> <p>info Get the interface information field of the filter.</p> </li> <li> <p>name Get the name of the filter.</p> </li> </ul>"},{"location":"api/capi-py/#HelicsCombinationFederate","title":"HelicsCombinationFederate","text":"<pre><code>class HelicsCombinationFederate(handle)\n</code></pre>"},{"location":"api/capi-py/#HelicsCombinationFederate-bases","title":"Base classes","text":"<ul> <li><code>HelicsValueFederate</code></li> <li><code>HelicsMessageFederate</code></li> </ul>"},{"location":"api/capi-py/#HelicsCombinationFederate-attrs","title":"Instance attributes","text":"<ul> <li> <p>core</p> </li> <li> <p>current_time</p> </li> <li> <p>n_endpoints</p> </li> <li> <p>n_filters</p> </li> <li> <p>n_inputs</p> </li> <li> <p>n_pending_messages Returns the number of pending receives for all endpoints.</p> </li> <li> <p>n_publications Get the number of publications in this federate.</p> </li> <li> <p>n_subscriptions Get the number of inputs in this federate.</p> </li> <li> <p>name</p> </li> <li> <p>separator</p> </li> <li> <p>state</p> </li> </ul>"},{"location":"api/capi-py/#HelicsCore","title":"HelicsCore","text":"<pre><code>class HelicsCore(handle, cleanup=True)\n</code></pre>"},{"location":"api/capi-py/#HelicsCore-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsCore-attrs","title":"Instance attributes","text":"<ul> <li> <p>address Get the connection network or connection address for the core.</p> </li> <li> <p>identifier Get an identifier string for the core.</p> </li> </ul>"},{"location":"api/capi-py/#HelicsCore-methods","title":"Methods","text":"<p>add_alias</p> <pre><code>def add_alias(self, interface_name: str, alias: str)\n</code></pre> <p>Create an alias for an interface.</p> <p>Parameters</p> <ul> <li><code>interface_name</code>: The current name of an interface.</li> <li><code>alias</code>: The additional name to use for the given interface.</li> </ul> <p>clone</p> <pre><code>def clone(self)\n</code></pre> <p>disconnect</p> <pre><code>def disconnect(self)\n</code></pre> <p>Disconnect the core from its broker.</p> <p>global_error</p> <pre><code>def global_error(self, error_code: int, error_string: str)\n</code></pre> <p>Generate a global error to terminate the federation.</p> <p>Parameters</p> <ul> <li><code>error_code</code>: an error code to give to the error.</li> <li><code>error_string</code>: a string message associated with the error.</li> </ul> <p>is_connected</p> <pre><code>def is_connected(self) -&gt; bool\n</code></pre> <p>Check if the core is connected to the broker.</p> <p>is_valid</p> <pre><code>def is_valid(self) -&gt; bool\n</code></pre> <p>Check if the core is valid.</p> <p>query</p> <pre><code>def query(self, target: str, query: str, mode: HelicsSequencingMode = HelicsSequencingMode.FAST) -&gt; JSONType\n</code></pre> <p>Make a query of the core.</p> <p>This call is blocking until the value is returned which may take some time depending on the size of the federation and the specific string being queried</p> <p><code>target</code>:  the target of the query can be \u201cfederation\u201d, \u201cfederate\u201d, \u201cbroker\u201d, \u201ccore\u201d, or a specific name of a federate, core, or broker <code>query</code>: a string with the query, see other documentation for specific properties to query, can be defined by the federate</p> <p>Returns: a string with the value requested.  this is either going to be a vector of strings value or a JSON string stored in the first element of the vector.  The string \u201c#invalid\u201d is returned if the query was not valid</p> <p>register_cloning_filter</p> <pre><code>def register_cloning_filter(self, delivery_endpoint: str) -&gt; HelicsCloningFilter\n</code></pre> <p>Create a cloning Filter on the specified federate.</p> <p>Cloning filters copy a message and send it to multiple locations source and destination can be added through other functions</p> <p>Parameters</p> <p><code>delivery_endpoint</code>: the specified endpoint to deliver the message</p> <p>Returns: a <code>helics.HelicsFilter</code> object.</p> <p>register_filter</p> <pre><code>def register_filter(self, kind: HelicsFilterType, name: str = \"\") -&gt; HelicsFilter\n</code></pre> <p>Create a destination Filter on the specified federate.</p> <p>Filters can be created through a federate or a core , linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior</p> <p><code>kind</code>: the type of filter to create <code>name</code>: the name of the filter (can be NULL)</p> <p>Returns: a <code>helics.HelicsFilter</code> object.</p> <p>set_global</p> <pre><code>def set_global(self, name: str, value: str)\n</code></pre> <p>Set a global federation value.</p> <p>Parameters</p> <p><code>name</code>: the name of the global value to set <code>value</code>: actual value of the global variable</p> <p>set_ready_to_init</p> <pre><code>def set_ready_to_init(self)\n</code></pre> <p>Set the core to ready to enter init.</p> <p>This function only needs to be called for cores that don\u2019t have any federates but may have filters for cores with federates it won\u2019t do anything.</p> <p>wait_for_disconnect</p> <pre><code>def wait_for_disconnect(self, ms_to_wait: int = -1) -&gt; bool\n</code></pre> <p>Waits in the current thread until the broker is disconnected</p> <p>Parameters</p> <p><code>ms_to_wait</code>:  the timeout to wait for disconnect (-1) implies no timeout</p> <p>Returns: true if the disconnect was successful false if it timed out.</p>"},{"location":"api/capi-py/#HelicsCoreFlag","title":"HelicsCoreFlag","text":"<pre><code>class HelicsCoreFlag(*values)\n</code></pre> <p>Enum where members are also (and must be) ints</p>"},{"location":"api/capi-py/#HelicsCoreFlag-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsCoreType","title":"HelicsCoreType","text":"<pre><code>class HelicsCoreType(*values)\n</code></pre> <ul> <li>****DEFAULT****</li> <li>****TEST****</li> <li>****INTERPROCESS****</li> <li>****IPC****</li> <li>****TCP****</li> <li>****UDP****</li> <li>****NNG****</li> <li>****ZMQ_SS****</li> <li>****TCP_SS****</li> <li>****HTTP****</li> <li>****WEBSOCKET****</li> <li>****INPROC****</li> <li>****NULL****</li> <li>****EMPTY****</li> <li>****EXTRACT****</li> </ul>"},{"location":"api/capi-py/#HelicsCoreType-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsDataBuffer","title":"HelicsDataBuffer","text":"<pre><code>class HelicsDataBuffer(self, handle, cleanup=False)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsDataBuffer-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsDataType","title":"HelicsDataType","text":"<pre><code>class HelicsDataType(*values)\n</code></pre> <ul> <li>****STRING****</li> <li>****DOUBLE****</li> <li>****INT****</li> <li>****COMPLEX****</li> <li>****VECTOR****</li> <li>****COMPLEX_VECTOR****</li> <li>****NAMED_POINT****</li> <li>****BOOLEAN****</li> <li>****TIME****</li> <li>****RAW****</li> <li>****JSON****</li> <li>****MULTI****</li> <li>****ANY****</li> </ul>"},{"location":"api/capi-py/#HelicsDataType-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsEndpoint","title":"HelicsEndpoint","text":"<pre><code>class HelicsEndpoint(handle, cleanup=True)\n</code></pre>"},{"location":"api/capi-py/#HelicsEndpoint-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsEndpoint-attrs","title":"Instance attributes","text":"<ul> <li> <p>default_destination Get the default destination for an endpoint.</p> </li> <li> <p>info Get the interface information field of the filter.</p> </li> <li> <p>n_pending_messages Returns the number of pending receives for endpoint.</p> </li> <li> <p>name Get the name of the endpoint.</p> </li> <li> <p>type Get the specified type of the endpoint.</p> </li> </ul>"},{"location":"api/capi-py/#HelicsEndpoint-methods","title":"Methods","text":"<p>create_message</p> <pre><code>def create_message(self) -&gt; HelicsMessage\n</code></pre> <p>Create a message object.</p> <p>get_message</p> <pre><code>def get_message(self) -&gt; HelicsMessage\n</code></pre> <p>Get a packet from an endpoint.</p> <p>has_message</p> <pre><code>def has_message(self) -&gt; bool\n</code></pre> <p>Checks if endpoint has unread messages.</p> <p>is_valid</p> <pre><code>def is_valid(self) -&gt; bool\n</code></pre> <p>Check if the input is valid.</p> <p>send_data</p> <pre><code>def send_data(self, data: Union[bytes, HelicsMessage], destination: str = None, time=None)\n</code></pre> <p>subscribe</p> <pre><code>def subscribe(self, name: str)\n</code></pre> <p>Subscribe an endpoint to a publication.</p>"},{"location":"api/capi-py/#HelicsError","title":"HelicsError","text":"<pre><code>class HelicsError(*values)\n</code></pre> <ul> <li>****FATAL****</li> <li>****EXTERNAL_TYPE****</li> <li>****OTHER****</li> <li>****INSUFFICIENT_SPACE****</li> <li>****EXECUTION_FAILURE****</li> <li>****INVALID_FUNCTION_CALL****</li> <li>****INVALID_STATE_TRANSITION****</li> <li>****WARNING****</li> <li>****SYSTEM_FAILURE****</li> <li>****DISCARD****</li> <li>****INVALID_ARGUMENT****</li> <li>****INVALID_OBJECT****</li> <li>****CONNECTION_FAILURE****</li> <li>****REGISTRATION_FAILURE****</li> <li>****OK****</li> </ul>"},{"location":"api/capi-py/#HelicsError-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsException","title":"HelicsException","text":"<pre><code>class HelicsException(self, *args, **kwargs)\n</code></pre> <p>Common base class for all non-exit exceptions.</p>"},{"location":"api/capi-py/#HelicsException-bases","title":"Base classes","text":"<ul> <li><code>builtins.Exception</code></li> </ul>"},{"location":"api/capi-py/#HelicsFederate","title":"HelicsFederate","text":"<pre><code>class HelicsFederate(self, handle, cleanup=True)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsFederate-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsFederate-attrs","title":"Instance attributes","text":"<ul> <li> <p>core</p> </li> <li> <p>current_time</p> </li> <li> <p>n_endpoints</p> </li> <li> <p>n_filters</p> </li> <li> <p>n_inputs</p> </li> <li> <p>n_pending_messages Returns the number of pending receives for all endpoints.</p> </li> <li> <p>n_publications</p> </li> <li> <p>name</p> </li> <li> <p>separator</p> </li> <li> <p>state</p> </li> </ul>"},{"location":"api/capi-py/#HelicsFederate-methods","title":"Methods","text":"<p>add_alias</p> <pre><code>def add_alias(self, interface_name: str, alias: str)\n</code></pre> <p>Create an alias for an interface.</p> <p>Parameters</p> <ul> <li><code>interface_name</code>: The current name of an interface.</li> <li><code>alias</code>: The additional name to use for the given interface.</li> </ul> <p>add_dependency</p> <pre><code>def add_dependency(self, federate_name)\n</code></pre> <p>Add a dependency for this federate.</p> <p>Adds an additional internal time dependency for the federate.</p> <p>Parameters</p> <ul> <li><code>fed_name</code>: the name of the federate to add a dependency on.</li> </ul> <p>disconnect</p> <pre><code>def disconnect(self)\n</code></pre> <p>Terminate the simulation.</p> <p>Call is will block until the disconnect has been acknowledged, no commands that interact with the core may be called after this function function.</p> <p>disconnect_async</p> <pre><code>def disconnect_async(self)\n</code></pre> <p>Terminate the simulation in a non-blocking call. <code>self.disconnect_complete()</code> must be called after this call to complete the disconnect procedure.</p> <p>disconnect_complete</p> <pre><code>def disconnect_complete(self)\n</code></pre> <p>Complete the asynchronous terminate pair.</p> <p>enter_executing_mode</p> <pre><code>def enter_executing_mode(self, iterate: HelicsIterationRequest = HelicsIterationRequest.NO_ITERATION)\n</code></pre> <p>Enter the normal execution mode.</p> <p>Call will block until all federates have entered this mode.</p> <p>Parameters</p> <ul> <li><code>iterate</code>: An optional flag indicating the desired iteration mode.</li> </ul> <p>enter_executing_mode_async</p> <pre><code>def enter_executing_mode_async(self, iterate: HelicsIterationRequest = HelicsIterationRequest.NO_ITERATION)\n</code></pre> <p>Enter the normal execution mode.</p> <p>Call will return immediately but <code>enter_executing_mode_complete</code> should be called to complete the operation.</p> <p>Parameters</p> <ul> <li><code>iterate</code>: An optional flag indicating the desired iteration mode.</li> </ul> <p>enter_executing_mode_complete</p> <pre><code>def enter_executing_mode_complete(self)\n</code></pre> <p>Complete the async call for entering Execution state.</p> <p>Call will not block but will return quickly. The <code>enter_initializing_mode_complete</code> must be called before doing other operations.</p> <p>enter_initializing_mode</p> <pre><code>def enter_initializing_mode(self)\n</code></pre> <p>Enter the initialization mode after all interfaces have been defined.</p> <p>The call will block until all federates have entered initialization mode.</p> <p>enter_initializing_mode_async</p> <pre><code>def enter_initializing_mode_async(self)\n</code></pre> <p>Enter the initialization mode after all interfaces have been defined.</p> <p>The call will not block but a call to <code>enter_initializing_mode_complete</code> should be made to complete the call sequence.</p> <p>enter_initializing_mode_complete</p> <pre><code>def enter_initializing_mode_complete(self)\n</code></pre> <p>Second part of the async process for entering initializationState call after a call to <code>enter_initializing_mode_async</code> if call any other time it will throw an <code>InvalidFunctionCall</code> exception</p> <p>enter_initializing_mode_iterative</p> <pre><code>def enter_initializing_mode_iterative(self)\n</code></pre> <p>Trigger a blocking call and return to created state after all federates have either triggered an iteration or are waiting to enter initializing mode.</p> <p>enter_initializing_mode_iterative_async</p> <pre><code>def enter_initializing_mode_iterative_async(self)\n</code></pre> <p>Non-blocking alternative to <code>enter_initializing_mode_async</code>.</p> <p>A call to <code>enter_initializing_mode_iterative_complete</code> should be made to complete the call sequence.</p> <p>enter_initializing_mode_iterative_complete</p> <pre><code>def enter_initializing_mode_iterative_complete(self)\n</code></pre> <p>Complete the call to enter initializing mode iterative that was initiated with <code>enter_initializing_mode_iterative_async</code>.</p> <p>finalize</p> <pre><code>def finalize(self)\n</code></pre> <p>Terminate the simulation.</p> <p>Call is will block until the finalize has been acknowledged, no commands that interact with the core may be called after this function function.</p> <p>DEPRECATED</p> <p>finalize_async</p> <pre><code>def finalize_async(self)\n</code></pre> <p>Terminate the simulation in a non-blocking call. <code>self.finalize_complete()</code> must be called after this call to complete the finalize procedure.</p> <p>DEPRECATED</p> <p>finalize_complete</p> <pre><code>def finalize_complete(self)\n</code></pre> <p>Complete the asynchronous terminate pair.</p> <p>DEPRECATED</p> <p>get_filter_by_index</p> <pre><code>def get_filter_by_index(self, filter_index)\n</code></pre> <p>Get a filter by index.</p> <p>Parameters</p> <ul> <li><code>index</code>: the index of a filter.</li> </ul> <p>Returns: A reference to a filter object which could be invalid if <code>filter_name</code> is not valid.</p> <p>get_filter_by_name</p> <pre><code>def get_filter_by_name(self, filter_name)\n</code></pre> <p>Get the id of a source filter from the name of the endpoint.</p> <p>Parameters</p> <ul> <li><code>filter_name</code>: the name of the filter.</li> </ul> <p>Returns: a reference to a filter object which could be invalid if <code>filter_name</code> is not valid.</p> <p>global_error</p> <pre><code>def global_error(self, error_code: int, error_string: str)\n</code></pre> <p>Generate a global error to terminate the federation.</p> <p>Parameters</p> <ul> <li><code>error_code</code>: an error code to give to the error.</li> <li><code>error_string</code>: a string message associated with the error.</li> </ul> <p>is_async_operation_completed</p> <pre><code>def is_async_operation_completed(self)\n</code></pre> <p>Called after one of the async calls and will indicate true if an async operation has completed. Only call from the same thread as the one that called the initial async call and will return false if called when no aysnc operation is in flight</p> <p>local_error</p> <pre><code>def local_error(self, error_code: int, error_string: str)\n</code></pre> <p>Generate a local federate error.</p> <p>Parameters</p> <ul> <li><code>error_code</code>: an error code to give to the error.</li> <li><code>error_string</code>: a string message associated with the error.</li> </ul> <p>log_message</p> <pre><code>def log_message(self, message: str, level: HelicsLogLevel)\n</code></pre> <p>Log an message.</p> <p>query</p> <pre><code>def query(self, target: str, query: str, mode: HelicsSequencingMode = HelicsSequencingMode.FAST) -&gt; JSONType\n</code></pre> <p>Make a query of the federate.</p> <p>This call is blocking until the value is returned which make take some time depending on the size of the federation and the specific string being queried.</p> <p>Parameters</p> <ul> <li><code>target</code>: the target of the query can be \u201cfederation\u201d, \u201cfederate\u201d, \u201cbroker\u201d, \u201ccore\u201d, or a specific name of a federate, core, or broker.</li> <li><code>query</code>: a string with the query see other documentation for specific properties to query, can be defined by the federate.</li> </ul> <p>Returns: a string with the value requested. this is either going to be a vector of strings value or a JSON string stored in the first element of the vector. The string \u201c#invalid\u201d is returned if the query was not valid.</p> <p>register_cloning_filter</p> <pre><code>def register_cloning_filter(self, delivery_endpoint: str) -&gt; HelicsCloningFilter\n</code></pre> <p>Create a <code>HelicsCloningFilter</code> on the specified federate.</p> <p>Cloning filters copy a message and send it to multiple locations source and destination can be added through other functions.</p> <p>Parameters</p> <ul> <li><code>delivery_endpoint</code>: the specified endpoint to deliver the message.</li> </ul> <p>Returns: A <code>HelicsCloningFilter</code> object.</p> <p>register_filter</p> <pre><code>def register_filter(self, kind: HelicsFilterType, filter_name: str) -&gt; HelicsFilter\n</code></pre> <p>Define a filter interface.</p> <p>A filter will modify messages coming from or going to target endpoints.</p> <p>Parameters</p> <ul> <li><code>kind</code>: the type of the filter to register.</li> <li><code>filter_name</code>: the name of the filter.</li> </ul> <p>register_global_cloning_filter</p> <pre><code>def register_global_cloning_filter(self, delivery_endpoint: str) -&gt; HelicsCloningFilter\n</code></pre> <p>Create a cloning Filter on the specified federate</p> <p>Cloning filters copy a message and send it to multiple locations source and destination can be added through other functions.</p> <p>Parameters</p> <ul> <li><code>delivery_endpoint</code>: the specified endpoint to deliver the message.</li> </ul> <p>Returns: A CloningFilter object.</p> <p>register_global_filter</p> <pre><code>def register_global_filter(self, kind: HelicsFilterType, filter_name: str) -&gt; HelicsFilter\n</code></pre> <p>Define a filter interface.</p> <p>A filter will modify messages coming from or going to target endpoints.</p> <p>Parameters</p> <ul> <li><code>kind</code>: the type of the filter to register.</li> <li><code>filter_name</code>: the name of the filter.</li> </ul> <p>register_interfaces</p> <pre><code>def register_interfaces(self, config)\n</code></pre> <p>Register a set of interfaces defined in a file.</p> <p>Call is only valid in startup mode</p> <p>Parameters</p> <ul> <li><code>configString</code>: the location of the file or config String to load to generate the interfaces</li> </ul> <p>request_next_step</p> <pre><code>def request_next_step(self) -&gt; HelicsTime\n</code></pre> <p>Request a time advancement to the next allowed time.</p> <p>Returns: The granted time step.</p> <p>request_time</p> <pre><code>def request_time(self, time: HelicsTime) -&gt; HelicsTime\n</code></pre> <p>Parameters</p> <ul> <li><code>time</code>: the next requested time step.</li> </ul> <p>Returns: The granted time step.</p> <p>request_time_advance</p> <pre><code>def request_time_advance(self, time_delta: HelicsTime) -&gt; HelicsTime\n</code></pre> <p>Request a time advancement to the next allowed time.</p> <p>Parameters</p> <ul> <li><code>timeDelta</code>: The amount of time requested to advance.</li> </ul> <p>Returns: The granted time step.</p> <p>request_time_async</p> <pre><code>def request_time_async(self, time: HelicsTime)\n</code></pre> <p>Request a time advancement and return immediately for asynchronous function. <code>self.request_time_complete()</code> should be called to finish the operation and get the result.</p> <p>Parameters</p> <ul> <li><code>time</code>: the next requested time step</li> </ul> <p>request_time_complete</p> <pre><code>def request_time_complete(self) -&gt; HelicsTime\n</code></pre> <p>Request a time advancement.</p> <p>Returns: the granted time step.</p> <p>request_time_iterative</p> <pre><code>def request_time_iterative(self, time: float, iterate: HelicsIterationRequest) -&gt; Tuple[HelicsTime, HelicsIterationResult]\n</code></pre> <p>Request a time advancement.</p> <p>Parameters</p> <ul> <li><code>time</code>: the next requested time step.</li> <li><code>iterate</code>: a requested iteration mode.</li> </ul> <p>Returns: The granted time step in a structure containing a return time and an iteration_result.</p> <p>request_time_iterative_async</p> <pre><code>def request_time_iterative_async(self, time: float, iterate: HelicsIterationRequest)\n</code></pre> <p>Request a time advancement with iterative call and return for asynchronous function. <code>self.request_time_iterative_complete()</code> should be called to finish the operation and get the result.</p> <p>Parameters</p> <ul> <li><code>time</code>: the next requested time step.</li> <li><code>iterate</code>: a requested iteration level (none, require, optional).</li> </ul> <p>request_time_iterative_complete</p> <pre><code>def request_time_iterative_complete(self) -&gt; Tuple[HelicsTime, HelicsIterationResult]\n</code></pre> <p>Finalize the time advancement request.</p> <p>Returns: the granted time step and iteration result.</p> <p>set_global</p> <pre><code>def set_global(self, name: str, value: str)\n</code></pre> <p>Set a federation global value.</p> <p>This overwrites any previous value for this name.</p> <p>Parameters</p> <ul> <li><code>name</code>: the name of the global to set.</li> <li><code>value</code>: the value of the global.</li> </ul>"},{"location":"api/capi-py/#HelicsFederateFlag","title":"HelicsFederateFlag","text":"<pre><code>class HelicsFederateFlag(*values)\n</code></pre> <ul> <li>****OBSERVER****</li> <li>****UNINTERRUPTIBLE****</li> <li>****INTERRUPTIBLE****</li> <li>****SOURCE_ONLY****</li> <li>****ONLY_TRANSMIT_ON_CHANGE****</li> <li>****ONLY_UPDATE_ON_CHANGE****</li> <li>****WAIT_FOR_CURRENT_TIME_UPDATE****</li> <li>****RESTRICTIVE_TIME_POLICY****</li> <li>****ROLLBACK****</li> <li>****FORWARD_COMPUTE****</li> <li>****REALTIME****</li> <li>****SINGLE_THREAD_FEDERATE****</li> <li>****MULTI_THREAD_CORE****</li> <li>****SINGLE_THREAD_CORE****</li> <li>****REENTRANT****</li> <li>****IGNORE_TIME_MISMATCH_WARNINGS****</li> <li>****STRICT_CONFIG_CHECKING****</li> <li>****USE_JSON_SERIALIZATION****</li> <li>****EVENT_TRIGGERED****</li> <li>****LOCAL_PROFILING_CAPTURE****</li> <li>****CALLBACK_FEDERATE****</li> <li>****AUTOMATED_TIME_REQUEST****</li> </ul>"},{"location":"api/capi-py/#HelicsFederateFlag-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsFederateInfo","title":"HelicsFederateInfo","text":"<pre><code>class HelicsFederateInfo(self, handle, cleanup=True)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsFederateInfo-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsFederateInfo-attrs","title":"Instance attributes","text":"<ul> <li> <p>broker</p> </li> <li> <p>broker_init</p> </li> <li> <p>broker_key</p> </li> <li> <p>broker_port</p> </li> <li> <p>core_init</p> </li> <li> <p>core_name</p> </li> <li> <p>core_type</p> </li> <li> <p>local_port</p> </li> <li> <p>separator</p> </li> </ul>"},{"location":"api/capi-py/#HelicsFederateState","title":"HelicsFederateState","text":"<pre><code>class HelicsFederateState(*values)\n</code></pre> <ul> <li>****STARTUP****</li> <li>****INITIALIZATION****</li> <li>****EXECUTION****</li> <li>****FINALIZE****</li> <li>****ERROR****</li> <li>****PENDING_INIT****</li> <li>****PENDING_EXEC****</li> <li>****PENDING_TIME****</li> <li>****PENDING_ITERATIVE_TIME****</li> <li>****PENDING_FINALIZE****</li> <li>****FINISHED****</li> </ul>"},{"location":"api/capi-py/#HelicsFederateState-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsFilter","title":"HelicsFilter","text":"<pre><code>class HelicsFilter(self, handle, cleanup=True)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsFilter-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsFilter-attrs","title":"Instance attributes","text":"<ul> <li> <p>info Get the interface information field of the filter.</p> </li> <li> <p>name Get the name of the filter.</p> </li> </ul>"},{"location":"api/capi-py/#HelicsFilter-methods","title":"Methods","text":"<p>add_delivery_endpoint</p> <pre><code>def add_delivery_endpoint(self, delivery_endpoint: str)\n</code></pre> <p>Add a delivery destination from a filter.</p> <p>Parameters</p> <ul> <li><code>delivery_endpoint</code> - A string with the delivery endpoint to add.</li> </ul> <p>add_destination_target</p> <pre><code>def add_destination_target(self, destination: str)\n</code></pre> <p>Add a destination target to a cloning filter. All messages going to a destination are copied to the delivery address(es).</p> <p>add_source_target</p> <pre><code>def add_source_target(self, source: str)\n</code></pre> <p>Add a source target to a cloning filter. All messages coming from a source are copied to the delivery address(es).</p> <p>remove_delivery_endpoint</p> <pre><code>def remove_delivery_endpoint(self, delivery_endpoint: str)\n</code></pre> <p>Remove a delivery destination from a filter.</p> <p>Parameters</p> <ul> <li><code>delivery_endpoint</code> - A string with the delivery endpoint to remove.</li> </ul> <p>remove_destination_target</p> <pre><code>def remove_destination_target(self, destination: str)\n</code></pre> <p>remove a destination target from a cloning filter.</p> <p>set</p> <pre><code>def set(self, property: str, value: float)\n</code></pre> <p>Set a property on a filter.</p>"},{"location":"api/capi-py/#HelicsFilterType","title":"HelicsFilterType","text":"<pre><code>class HelicsFilterType(*values)\n</code></pre> <ul> <li>****CUSTOM****</li> <li>****DELAY****</li> <li>****RANDOM_DELAY****</li> <li>****RANDOM_DROP****</li> <li>****REROUTE****</li> <li>****CLONE****</li> <li>****FIREWALL****</li> </ul>"},{"location":"api/capi-py/#HelicsFilterType-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsFlag","title":"HelicsFlag","text":"<pre><code>class HelicsFlag(*values)\n</code></pre> <p>Enum where members are also (and must be) ints</p>"},{"location":"api/capi-py/#HelicsFlag-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsHandleOption","title":"HelicsHandleOption","text":"<pre><code>class HelicsHandleOption(*values)\n</code></pre> <ul> <li>****CONNECTION_REQUIRED****</li> <li>****CONNECTION_OPTIONAL****</li> <li>****SINGLE_CONNECTION_ONLY****</li> <li>****MULTIPLE_CONNECTIONS_ALLOWED****</li> <li>****BUFFER_DATA****</li> <li>****RECONNECTABLE****</li> <li>****STRICT_TYPE_CHECKING****</li> <li>****RECEIVE_ONLY****</li> <li>****SOURCE_ONLY****</li> <li>****IGNORE_UNIT_MISMATCH****</li> <li>****ONLY_TRANSMIT_ON_CHANGE****</li> <li>****ONLY_UPDATE_ON_CHANGE****</li> <li>****IGNORE_INTERRUPTS****</li> <li>****MULTI_INPUT_HANDLING_METHOD****</li> <li>****INPUT_PRIORITY_LOCATION****</li> <li>****CLEAR_PRIORITY_LIST****</li> <li>****CONNECTIONS****</li> </ul>"},{"location":"api/capi-py/#HelicsHandleOption-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsInput","title":"HelicsInput","text":"<pre><code>class HelicsInput(self, handle)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsInput-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsInput-attrs","title":"Instance attributes","text":"<ul> <li> <p>boolean Get the value as a boolean.</p> </li> <li> <p>bytes Get a raw value as a character vector.</p> </li> <li> <p>complex Get the value as a complex number.</p> </li> <li> <p>complex_vector get the current value as a vector of complex.</p> </li> <li> <p>double Get the value as a double.</p> </li> <li> <p>info Get the interface information field of the filter.</p> </li> <li> <p>injection_units Get the units associated with an inputs publication.</p> </li> <li> <p>integer Get the current value as a 64 bit integer.</p> </li> <li> <p>json Get a raw value as a character vector.</p> </li> <li> <p>key Get the name/key for the input the name is the local name if given, key is the full key name.</p> </li> </ul> <p>DEPRECATED</p> <ul> <li> <p>name Get the name/key for the input the name is the local name if given, key is the full key name.</p> </li> <li> <p>named_point Get the current value as a named point.</p> </li> <li> <p>publication_type Get the units associated with a publication of an input.</p> </li> <li> <p>string Get the current value as a string.</p> </li> <li> <p>target Get the target of the input.</p> </li> <li> <p>type Get the type of the input.</p> </li> <li> <p>units Get the units associated with a input.</p> </li> <li> <p>value</p> </li> <li> <p>vector get the current value as a vector of doubles.</p> </li> </ul>"},{"location":"api/capi-py/#HelicsInput-methods","title":"Methods","text":"<p>add_target</p> <pre><code>def add_target(self, target: str)\n</code></pre> <p>Add a publication target to the input.</p> <p>clear_update</p> <pre><code>def clear_update(self)\n</code></pre> <p>Clear the updated flag.</p> <p>get_last_update_time</p> <pre><code>def get_last_update_time(self) -&gt; HelicsTime\n</code></pre> <p>Get the last time an input was updated.</p> <p>is_updated</p> <pre><code>def is_updated(self) -&gt; bool\n</code></pre> <p>Check if an input is updated.</p> <p>is_valid</p> <pre><code>def is_valid(self) -&gt; bool\n</code></pre> <p>Check if the input is valid.</p> <p>set_default</p> <pre><code>def set_default(self, data: Union[bytes, str, int, bool, float, complex, List[float], List[complex]])\n</code></pre> <p>Set the default value as a raw data Set the default value as a string Set the default value as an integer Set the default value as a bool Set the default value as a double Set the default value as a vector of doubles</p>"},{"location":"api/capi-py/#HelicsIterationRequest","title":"HelicsIterationRequest","text":"<pre><code>class HelicsIterationRequest(*values)\n</code></pre> <ul> <li>****NO_ITERATION****</li> <li>****FORCE_ITERATION****</li> <li>****ITERATE_IF_NEEDED****</li> </ul>"},{"location":"api/capi-py/#HelicsIterationRequest-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsIterationResult","title":"HelicsIterationResult","text":"<pre><code>class HelicsIterationResult(*values)\n</code></pre> <ul> <li>****NEXT_STEP****</li> <li>****ERROR****</li> <li>****HALTED****</li> <li>****ITERATING****</li> </ul>"},{"location":"api/capi-py/#HelicsIterationResult-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsLogLevel","title":"HelicsLogLevel","text":"<pre><code>class HelicsLogLevel(*values)\n</code></pre> <ul> <li>****NO_PRINT****</li> <li>****ERROR****</li> <li>****WARNING****</li> <li>****SUMMARY****</li> <li>****CONNECTIONS****</li> <li>****INTERFACES****</li> <li>****TIMING****</li> <li>****DATA****</li> <li>****DEBUG****</li> <li>****TRACE****</li> </ul>"},{"location":"api/capi-py/#HelicsLogLevel-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsMessage","title":"HelicsMessage","text":"<pre><code>class HelicsMessage(self, handle, cleanup=True)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsMessage-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsMessage-attrs","title":"Instance attributes","text":"<ul> <li> <p>data</p> </li> <li> <p>destination</p> </li> <li> <p>message_id</p> </li> <li> <p>original_dest</p> </li> <li> <p>original_destination</p> </li> <li> <p>original_source</p> </li> <li> <p>raw_data</p> </li> <li> <p>source</p> </li> <li> <p>time</p> </li> </ul>"},{"location":"api/capi-py/#HelicsMessage-methods","title":"Methods","text":"<p>append</p> <pre><code>def append(self, data: bytes)\n</code></pre> <p>is_valid</p> <pre><code>def is_valid(self) -&gt; bool\n</code></pre>"},{"location":"api/capi-py/#HelicsMessageFederate","title":"HelicsMessageFederate","text":"<pre><code>class HelicsMessageFederate(self, handle)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsMessageFederate-bases","title":"Base classes","text":"<ul> <li><code>HelicsFederate</code></li> </ul>"},{"location":"api/capi-py/#HelicsMessageFederate-attrs","title":"Instance attributes","text":"<ul> <li> <p>core</p> </li> <li> <p>current_time</p> </li> <li> <p>n_endpoints</p> </li> <li> <p>n_filters</p> </li> <li> <p>n_inputs</p> </li> <li> <p>n_pending_messages Returns the number of pending receives for all endpoints.</p> </li> <li> <p>n_publications</p> </li> <li> <p>name</p> </li> <li> <p>separator</p> </li> <li> <p>state</p> </li> </ul>"},{"location":"api/capi-py/#HelicsMessageFederate-methods","title":"Methods","text":"<p>create_message</p> <pre><code>def create_message(self) -&gt; HelicsMessage\n</code></pre> <p>Create a message object.</p> <p>get_endpoint_by_index</p> <pre><code>def get_endpoint_by_index(self, index: int) -&gt; HelicsEndpoint\n</code></pre> <p>Get an Endpoint from an index.</p> <p>Parameters</p> <ul> <li><code>index</code>: the index of the endpoint to retrieve index is 0 based</li> </ul> <p>Return an Endpoint</p> <p>get_endpoint_by_name</p> <pre><code>def get_endpoint_by_name(self, name: str) -&gt; HelicsEndpoint\n</code></pre> <p>Get an Endpoint from its name.</p> <p>Parameters</p> <ul> <li><code>name</code>: the name of the endpoint to retrieve.</li> </ul> <p>Returns: an Endpoint</p> <p>get_message</p> <pre><code>def get_message(self) -&gt; HelicsMessage\n</code></pre> <p>Get a packet for any endpoints in the federate.</p> <p>has_message</p> <pre><code>def has_message(self) -&gt; bool\n</code></pre> <p>Checks if federate has any messages.</p> <p>register_endpoint</p> <pre><code>def register_endpoint(self, name: str, kind: str = \"\") -&gt; HelicsEndpoint\n</code></pre> <p>Register an endpoint.</p> <p>Call is only valid in startup mode</p> <ul> <li><code>name</code>: the name of the endpoint</li> <li><code>kind</code>: the defined type of the interface for endpoint checking if requested</li> </ul> <p>Returns: an Endpoint Object</p> <p>register_global_endpoint</p> <pre><code>def register_global_endpoint(self, name: str, kind: str = \"\") -&gt; HelicsEndpoint\n</code></pre> <p>Register an endpoint directly without prepending the federate name.</p> <ul> <li><code>name</code>: the name of the endpoint</li> <li><code>kind</code>: the defined type of the interface for endpoint checking if requested</li> </ul> <p>Returns: an Endpoint Object</p>"},{"location":"api/capi-py/#HelicsMultiInputMode","title":"HelicsMultiInputMode","text":"<pre><code>class HelicsMultiInputMode(*values)\n</code></pre> <ul> <li>****NO_OP****</li> <li>****VECTORIZE_OPERATION****</li> <li>****AND_OPERATION****</li> <li>****OR_OPERATION****</li> <li>****SUM_OPERATION****</li> <li>****DIFF_OPERATION****</li> <li>****MAX_OPERATION****</li> <li>****MIN_OPERATION****</li> <li>****AVERAGE_OPERATION****</li> </ul>"},{"location":"api/capi-py/#HelicsMultiInputMode-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsProperty","title":"HelicsProperty","text":"<pre><code>class HelicsProperty(*values)\n</code></pre> <ul> <li>****TIME_DELTA****</li> <li>****TIME_PERIOD****</li> <li>****TIME_OFFSET****</li> <li>****TIME_RT_LAG****</li> <li>****TIME_RT_LEAD****</li> <li>****TIME_RT_TOLERANCE****</li> <li>****TIME_INPUT_DELAY****</li> <li>****TIME_OUTPUT_DELAY****</li> <li>****TIME_STOPTIME****</li> <li>****TIME_GRANT_TIMEOUT****</li> <li>****INT_CURRENT_ITERATION****</li> <li>****INT_MAX_ITERATIONS****</li> <li>****INT_LOG_LEVEL****</li> <li>****INT_FILE_LOG_LEVEL****</li> <li>****INT_CONSOLE_LOG_LEVEL****</li> <li>****INT_LOG_BUFFER****</li> <li>****INT_INDEX_GROUP****</li> </ul>"},{"location":"api/capi-py/#HelicsProperty-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsPublication","title":"HelicsPublication","text":"<pre><code>class HelicsPublication(self, handle)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsPublication-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsPublication-attrs","title":"Instance attributes","text":"<ul> <li> <p>info Get the interface information field of the publication.</p> </li> <li> <p>key Get the key for the publication.</p> </li> </ul> <p>DEPRECATED</p> <ul> <li> <p>name Get the key for the publication.</p> </li> <li> <p>type Get the type for the publication.</p> </li> <li> <p>units Get the units of the publication.</p> </li> </ul>"},{"location":"api/capi-py/#HelicsPublication-methods","title":"Methods","text":"<p>add_target</p> <pre><code>def add_target(self, name: str)\n</code></pre> <p>Add a named input to the list of targets a publication publishes to.</p> <p>is_valid</p> <pre><code>def is_valid(self) -&gt; bool\n</code></pre> <p>Check if the publication is valid.</p> <p>publish</p> <pre><code>def publish(self, data: Union[bytes, str, int, complex, float, List[complex], List[float], Tuple[str, float], bool])\n</code></pre> <p>publish raw bytes publish a string publish an int value publish a double publish a complex number publish a vector of doubles publish a named point with a string and double publish a boolean value</p>"},{"location":"api/capi-py/#HelicsQuery","title":"HelicsQuery","text":"<pre><code>class HelicsQuery(self, handle, cleanup=False)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsQuery-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsQueryBuffer","title":"HelicsQueryBuffer","text":"<pre><code>class HelicsQueryBuffer(self, handle, cleanup=False)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsQueryBuffer-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsSequencingMode","title":"HelicsSequencingMode","text":"<pre><code>class HelicsSequencingMode(*values)\n</code></pre> <p>Enumeration of sequencing modes for queries fast is the default, meaning the query travels along priority channels and takes precedence of over existing messages; ordered means it follows normal priority patterns and will be ordered along with existing messages</p> <ul> <li>****FAST****</li> <li>****ORDERED****</li> <li>****DEFAULT****</li> </ul>"},{"location":"api/capi-py/#HelicsSequencingMode-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsTranslator","title":"HelicsTranslator","text":"<pre><code>class HelicsTranslator(self, handle, cleanup=True)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsTranslator-bases","title":"Base classes","text":"<ul> <li><code>helics.capi._HelicsCHandle</code></li> </ul>"},{"location":"api/capi-py/#HelicsTranslatorTypes","title":"HelicsTranslatorTypes","text":"<pre><code>class HelicsTranslatorTypes(*values)\n</code></pre> <p>Rnumeration of the predefined translator types</p> <p>A custom filter type that executes a user defined callback - ****CUSTOM**** A translator type that converts to and from JSON - ****JSON**** A translator type that just encodes the message again in binary - ****BINARY****</p>"},{"location":"api/capi-py/#HelicsTranslatorTypes-bases","title":"Base classes","text":"<ul> <li><code>enum.IntEnum</code></li> </ul>"},{"location":"api/capi-py/#HelicsValueFederate","title":"HelicsValueFederate","text":"<pre><code>class HelicsValueFederate(self, handle)\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/capi-py/#HelicsValueFederate-bases","title":"Base classes","text":"<ul> <li><code>HelicsFederate</code></li> </ul>"},{"location":"api/capi-py/#HelicsValueFederate-attrs","title":"Instance attributes","text":"<ul> <li> <p>core</p> </li> <li> <p>current_time</p> </li> <li> <p>n_endpoints</p> </li> <li> <p>n_filters</p> </li> <li> <p>n_inputs</p> </li> <li> <p>n_pending_messages Returns the number of pending receives for all endpoints.</p> </li> <li> <p>n_publications Get the number of publications in this federate.</p> </li> <li> <p>n_subscriptions Get the number of inputs in this federate.</p> </li> <li> <p>name</p> </li> <li> <p>separator</p> </li> <li> <p>state</p> </li> </ul>"},{"location":"api/capi-py/#HelicsValueFederate-methods","title":"Methods","text":"<p>clear_updates</p> <pre><code>def clear_updates(self)\n</code></pre> <p>Clear all the update flags from all federate inputs.</p> <p>get_publication_by_index</p> <pre><code>def get_publication_by_index(self, index: int) -&gt; HelicsPublication\n</code></pre> <p>Get a publication by index.</p> <p>Parameters</p> <ul> <li><code>index</code>: a 0 based index of the publication to retrieve</li> </ul> <p>Returns: a Publication object</p> <p>get_publication_by_name</p> <pre><code>def get_publication_by_name(self, name: str) -&gt; HelicsPublication\n</code></pre> <p>Get publication by name.</p> <p>get_subscription_by_index</p> <pre><code>def get_subscription_by_index(self, index: int) -&gt; HelicsInput\n</code></pre> <p>Get a subscription by index.</p> <p>get_subscription_by_name</p> <pre><code>def get_subscription_by_name(self, name: str) -&gt; HelicsInput\n</code></pre> <p>Get an input by index.</p> <p>get_subscription_by_target</p> <pre><code>def get_subscription_by_target(self, target: str) -&gt; HelicsInput\n</code></pre> <p>Get an input by target.</p> <p>publish_json</p> <pre><code>def publish_json(self, data: Union[dict, str])\n</code></pre> <p>Publish data contained in a JSON file.</p> <p>register_from_publication_json</p> <pre><code>def register_from_publication_json(self, data: Union[dict, str])\n</code></pre> <p>Register publications from a JSON output file or string.</p> <p>Generates interface based on the data contained in a JSON file or string.</p> <p>register_global_input</p> <pre><code>def register_global_input(self, name: str, kind: Union[str, HelicsDataType], units: str = \"\") -&gt; HelicsInput\n</code></pre> <p>Register an input.</p> <p>Call is only valid in startup mode.</p> <p>Parameters</p> <ul> <li><code>name</code>: the name of the input</li> <li><code>kind</code>: a string defining the type of the input</li> <li><code>units</code>: a string defining the units of the input [optional]</li> </ul> <p>Returns: an input object for use as an identifier.</p> <p>register_global_publication</p> <pre><code>def register_global_publication(self, name: str, kind: Union[str, HelicsDataType], units: str = \"\") -&gt; HelicsPublication\n</code></pre> <p>Register a publication</p> <p>Call is only valid in startup mode</p> <p>Parameters</p> <ul> <li><code>name</code>: the name of the publication</li> <li><code>kind</code>: the type of the publication</li> <li><code>units</code>: a string defining the units of the publication [optional]</li> </ul> <p>Returns: a publication object for use as an identifier</p> <p>register_input</p> <pre><code>def register_input(self, name: str, kind: Union[str, HelicsDataType], units: str = \"\") -&gt; HelicsInput\n</code></pre> <p>Register an input.</p> <p>Call is only valid in startup mode.</p> <p>Parameters</p> <ul> <li><code>name</code>: the name of the input</li> <li><code>kind</code>: the type of input to register</li> <li><code>units</code>: a string defining the units of the input [optional]</li> </ul> <p>Returns: an input id object for use as an identifier</p> <p>register_publication</p> <pre><code>def register_publication(self, name: str, kind: Union[str, HelicsDataType], units: str = \"\", local: bool = True) -&gt; HelicsPublication\n</code></pre> <p>Register a publication.</p> <p>Call is only valid in startup mode.</p> <p>Parameters</p> <ul> <li><code>name</code>: the name of the publication.</li> <li><code>kind</code>: the type of the publication.</li> <li><code>units</code>: a string defining the units of the publication [optional]</li> <li><code>local</code>: a bool defining whether the publication is global or not [optional]</li> </ul> <p>Returns: a publication id object for use as an identifier</p> <p>register_subscription</p> <pre><code>def register_subscription(self, name: str, units: str = \"\") -&gt; HelicsInput\n</code></pre>"},{"location":"api/capi-py/#functions","title":"Functions","text":""},{"location":"api/capi-py/#cchar","title":"cchar","text":"<pre><code>def cchar(c: str) -&gt; bytes\n</code></pre>"},{"location":"api/capi-py/#cdouble","title":"cdouble","text":"<pre><code>def cdouble(d: float) -&gt; float\n</code></pre>"},{"location":"api/capi-py/#cstring","title":"cstring","text":"<pre><code>def cstring(s: str) -&gt; str\n</code></pre>"},{"location":"api/capi-py/#generate_cleanup_callback","title":"generate_cleanup_callback","text":"<pre><code>def generate_cleanup_callback(obj)\n</code></pre>"},{"location":"api/capi-py/#helicsAbort","title":"helicsAbort","text":"<pre><code>def helicsAbort(error_code: int, message: str)\n</code></pre>"},{"location":"api/capi-py/#helicsAppDestroy","title":"helicsAppDestroy","text":"<pre><code>def helicsAppDestroy(app: HelicsApp)\n</code></pre> <p>Disconnect and free an app.</p>"},{"location":"api/capi-py/#helicsAppEnabled","title":"helicsAppEnabled","text":"<pre><code>def helicsAppEnabled() -&gt; bool\n</code></pre> <p>Returns true if the app library is enabled.</p>"},{"location":"api/capi-py/#helicsAppFinalize","title":"helicsAppFinalize","text":"<pre><code>def helicsAppFinalize(app: HelicsApp)\n</code></pre> <p>Disconnect the federate. This function halts all communication in the federate and disconnects it from the core.</p>"},{"location":"api/capi-py/#helicsAppFree","title":"helicsAppFree","text":"<pre><code>def helicsAppFree(app: HelicsApp)\n</code></pre> <p>Release the memory associated with an App.</p>"},{"location":"api/capi-py/#helicsAppGetFederate","title":"helicsAppGetFederate","text":"<pre><code>def helicsAppGetFederate(app: HelicsApp) -&gt; HelicsFederate\n</code></pre> <p>Create a new federate reference from an app. This will create a new <code>helics.HelicsFederate</code> object that references the existing federate. The new object must be freed as well.</p> <p>Parameters</p> <ul> <li><code>app</code> - An existing <code>helics.HelicsApp</code>.</li> </ul> <p>Returns: <code>helics.HelicsFederate</code>.</p>"},{"location":"api/capi-py/#helicsAppInitialize","title":"helicsAppInitialize","text":"<pre><code>def helicsAppInitialize(app: HelicsApp)\n</code></pre> <p>Initialize a helics application. Generate all the interfaces and load data for the application.</p> <p>Parameters</p> <ul> <li><code>app</code> - The app to operate on.</li> </ul>"},{"location":"api/capi-py/#helicsAppIsActive","title":"helicsAppIsActive","text":"<pre><code>def helicsAppIsActive(app: HelicsApp) -&gt; bool\n</code></pre> <p>Check if a <code>helics.HelicsApp</code> is active.</p> <p>Returns: <code>True</code> if the app is a valid active app, <code>False</code> otherwise.</p>"},{"location":"api/capi-py/#helicsAppLoadFile","title":"helicsAppLoadFile","text":"<pre><code>def helicsAppLoadFile(app: HelicsApp, file: str)\n</code></pre> <p>Load a configuration for an app from a file.</p> <p>Parameters</p> <ul> <li><code>app</code> - The federate to which to load interfaces.</li> <li><code>file</code> - The name of a file to load the interfaces from, either JSON, or TOML.</li> </ul>"},{"location":"api/capi-py/#helicsAppRun","title":"helicsAppRun","text":"<pre><code>def helicsAppRun(app: HelicsApp)\n</code></pre> <p>Run the HelicsApp. Execute the app to completion.</p> <p>Parameters</p> <ul> <li><code>app</code> - The app to operate on.</li> </ul>"},{"location":"api/capi-py/#helicsAppRunTo","title":"helicsAppRunTo","text":"<pre><code>def helicsAppRunTo(app: HelicsApp, time: HelicsTime)\n</code></pre> <p>Run the HelicsApp to a specified stop time. It is possible to call this method repeatedly with different times.</p> <p>Parameters</p> <ul> <li><code>app</code> - The app to operate on.</li> <li><code>time</code> - The desired stop time.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerAddAlias","title":"helicsBrokerAddAlias","text":"<pre><code>def helicsBrokerAddAlias(broker: HelicsBroker, interface_name: str, alias: str)\n</code></pre> <p>Create an alias for an interface.</p> <p>Parameters</p> <ul> <li><code>interface_name</code>: The current name of an interface.</li> <li><code>alias</code>: The additional name to use for the given interface.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerAddDestinationFilterToEndpoint","title":"helicsBrokerAddDestinationFilterToEndpoint","text":"<pre><code>def helicsBrokerAddDestinationFilterToEndpoint(broker: HelicsBroker, filter_name: str, endpoint_name: str)\n</code></pre> <p>Link a named filter to a destination endpoint.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to generate the connection from.</li> <li><code>filter</code> - The name of the filter.</li> <li><code>endpoint</code> - The name of the endpoint to filter the data going to.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerAddSourceFilterToEndpoint","title":"helicsBrokerAddSourceFilterToEndpoint","text":"<pre><code>def helicsBrokerAddSourceFilterToEndpoint(broker: HelicsBroker, filter_name: str, endpoint_name: str)\n</code></pre> <p>Link a named filter to a source endpoint.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to generate the connection from.</li> <li><code>filter</code> - The name of the filter.</li> <li><code>endpoint</code> - The name of the endpoint to filter the data from.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerClearTimeBarrier","title":"helicsBrokerClearTimeBarrier","text":"<pre><code>def helicsBrokerClearTimeBarrier(broker: HelicsBroker)\n</code></pre>"},{"location":"api/capi-py/#helicsBrokerClone","title":"helicsBrokerClone","text":"<pre><code>def helicsBrokerClone(broker: HelicsBroker) -&gt; HelicsBroker\n</code></pre> <p>Create a new reference to an existing broker. This will create a new broker object that references the existing broker it must be freed as well.</p> <p>Parameters</p> <ul> <li><code>broker</code> - An existing <code>helics.HelicsBroker</code>.</li> </ul> <p>Returns: <code>helics.HelicsBroker</code>.</p>"},{"location":"api/capi-py/#helicsBrokerDataLink","title":"helicsBrokerDataLink","text":"<pre><code>def helicsBrokerDataLink(broker: HelicsBroker, source_name: str, target_name: str)\n</code></pre> <p>Link a named publication and named input using a broker.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to generate the connection from.</li> <li><code>source_name</code> - The name of the publication.</li> <li><code>target_name</code> - The name of the target to send the publication data.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerDestroy","title":"helicsBrokerDestroy","text":"<pre><code>def helicsBrokerDestroy(broker: HelicsBroker)\n</code></pre> <p>Disconnect and free a broker.</p>"},{"location":"api/capi-py/#helicsBrokerDisconnect","title":"helicsBrokerDisconnect","text":"<pre><code>def helicsBrokerDisconnect(broker: HelicsBroker)\n</code></pre> <p>Disconnect a broker.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to disconnect.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerFree","title":"helicsBrokerFree","text":"<pre><code>def helicsBrokerFree(broker: HelicsBroker)\n</code></pre> <p>Release the memory associated with a broker.</p>"},{"location":"api/capi-py/#helicsBrokerGetAddress","title":"helicsBrokerGetAddress","text":"<pre><code>def helicsBrokerGetAddress(broker: HelicsBroker) -&gt; str\n</code></pre> <p>Get the network address associated with a broker.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to query.</li> </ul> <p>Returns: A string with the network address of the broker.</p>"},{"location":"api/capi-py/#helicsBrokerGetIdentifier","title":"helicsBrokerGetIdentifier","text":"<pre><code>def helicsBrokerGetIdentifier(broker: HelicsBroker) -&gt; str\n</code></pre> <p>Get an identifier for the broker.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to query.</li> </ul> <p>Returns: A string containing the identifier for the broker.</p>"},{"location":"api/capi-py/#helicsBrokerGlobalError","title":"helicsBrokerGlobalError","text":"<pre><code>def helicsBrokerGlobalError(broker: HelicsBroker, error_code: int, error_string: str)\n</code></pre>"},{"location":"api/capi-py/#helicsBrokerIsConnected","title":"helicsBrokerIsConnected","text":"<pre><code>def helicsBrokerIsConnected(broker: HelicsBroker) -&gt; bool\n</code></pre> <p>Check if a broker is connected. A connected broker implies it is attached to cores or cores could reach out to communicate.</p> <p>Returns: <code>True</code> if connected, <code>False</code> if not connected.</p>"},{"location":"api/capi-py/#helicsBrokerIsValid","title":"helicsBrokerIsValid","text":"<pre><code>def helicsBrokerIsValid(broker: HelicsBroker) -&gt; bool\n</code></pre> <p>Check if a broker object is a valid object.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The <code>helics.HelicsBroker</code> object to test.</li> </ul> <p>Returns: <code>True</code> if valid, <code>False</code> if not valid.</p>"},{"location":"api/capi-py/#helicsBrokerMakeConnections","title":"helicsBrokerMakeConnections","text":"<pre><code>def helicsBrokerMakeConnections(broker: HelicsBroker, file: str)\n</code></pre> <p>Load a file containing connection information.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to generate the connections from.</li> <li><code>file</code> - A JSON or TOML file containing connection information.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerSendCommand","title":"helicsBrokerSendCommand","text":"<pre><code>def helicsBrokerSendCommand(broker, target, command, err)\n</code></pre> <p>Send a command to another helics object through a broker using asynchronous(fast) messages.</p> <ul> <li><code>broker</code>: The broker to send the command through.</li> <li><code>target</code>: The name of the object to send the command to.</li> <li><code>command</code>: The command to send.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerSendOrderedCommand","title":"helicsBrokerSendOrderedCommand","text":"<pre><code>def helicsBrokerSendOrderedCommand(broker, target, command, err)\n</code></pre> <p>Send a command to another helics object through a broker using ordered sequencing.</p> <ul> <li><code>broker</code>: The broker to send the command through.</li> <li><code>target</code>: The name of the object to send the command to.</li> <li><code>command</code>: The command to send.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerSetGlobal","title":"helicsBrokerSetGlobal","text":"<pre><code>def helicsBrokerSetGlobal(broker: HelicsBroker, name: str, value: str)\n</code></pre> <p>Set a federation global value. This overwrites any previous value for this name.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to set the global through.</li> <li><code>name</code> - The name of the global to set.</li> <li><code>value</code> - The value of the global.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerSetLogFile","title":"helicsBrokerSetLogFile","text":"<pre><code>def helicsBrokerSetLogFile(broker: HelicsBroker, log_file: str)\n</code></pre> <p>Set the log file on a broker.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to set the log file for.</li> <li><code>log_file</code> - The name of the file to log to.</li> </ul>"},{"location":"api/capi-py/#helicsBrokerSetLoggingCallback","title":"helicsBrokerSetLoggingCallback","text":"<pre><code>def helicsBrokerSetLoggingCallback(broker: HelicsBroker, logger, user_data)\n</code></pre> <p>Set the logging callback for a <code>helics.HelicsBroker</code></p> <p>Add a logging callback function for the C. The logging callback will be called when a message flows from <code>helics.HelicsBroker</code> or from the core.</p>"},{"location":"api/capi-py/#parameters","title":"Parameters","text":"<ul> <li><code>broker</code>: the <code>helics.HelicsBroker</code> that is created with <code>helics.helicsCreateBroker</code></li> <li><code>logger</code>: a callback with signature void(int, const char *, const char *, void *); the function arguments are loglevel, an identifier string, and a message string, and a pointer to user data</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsBrokerSetTimeBarrier","title":"helicsBrokerSetTimeBarrier","text":"<pre><code>def helicsBrokerSetTimeBarrier(broker: HelicsBroker, barrier_time: HelicsTime)\n</code></pre> <p>Set the broker time barrier</p>"},{"location":"api/capi-py/#parameters_1","title":"Parameters","text":"<ul> <li><code>broker</code>: the <code>helics.HelicsBroker</code></li> <li><code>barrier_time</code>: the barrier time</li> </ul>"},{"location":"api/capi-py/#helicsBrokerWaitForDisconnect","title":"helicsBrokerWaitForDisconnect","text":"<pre><code>def helicsBrokerWaitForDisconnect(broker: HelicsBroker, ms_to_wait: int) -&gt; bool\n</code></pre> <p>Wait for the broker to disconnect.</p> <p>Parameters</p> <ul> <li><code>broker</code> - The broker to wait for.</li> <li><code>ms_to_wait</code> - The time out in millisecond (&lt;0 for infinite timeout).</li> </ul>"},{"location":"api/capi-py/#helicsCallbackFederateInitializeCallback","title":"helicsCallbackFederateInitializeCallback","text":"<pre><code>def helicsCallbackFederateInitializeCallback(fed: HelicsFederate, initialize, user_data)\n</code></pre> <p>Set callback for initialization</p> <p>This callback will be executed when computing whether to iterate in initialization mode</p>"},{"location":"api/capi-py/#parameters_2","title":"Parameters","text":"<ul> <li><code>fed</code>: The federate to set the callback for.</li> <li><code>initialize</code>: A callback with signature HelicsIterationRequest(void *user_data);</li> <li><code>user_data</code>: A pointer to user data that is passed to the function when executing.</li> </ul>"},{"location":"api/capi-py/#helicsCallbackFederateNextTimeCallback","title":"helicsCallbackFederateNextTimeCallback","text":"<pre><code>def helicsCallbackFederateNextTimeCallback(fed: HelicsFederate, time_update, user_data)\n</code></pre> <p>Set callback for the next time update</p> <p>This callback will be triggered to compute the next time update for a callback federate</p>"},{"location":"api/capi-py/#parameters_3","title":"Parameters","text":"<ul> <li><code>fed</code>: The federate to set the callback for.</li> <li><code>time_update</code>: A callback with signature HelicsTime(HelicsTime time, void *user_data);</li> <li><code>user_data</code>: A pointer to user data that is passed to the function when executing.</li> </ul>"},{"location":"api/capi-py/#helicsCallbackFederateNextTimeIterativeCallback","title":"helicsCallbackFederateNextTimeIterativeCallback","text":"<pre><code>def helicsCallbackFederateNextTimeIterativeCallback(fed: HelicsFederate, time_update, user_data)\n</code></pre> <p>Set callback for the next time update with iteration capability</p> <p>This callback will be triggered to compute the next time update for a callback federate</p>"},{"location":"api/capi-py/#parameters_4","title":"Parameters","text":"<ul> <li><code>fed</code>: The federate to set the callback for.</li> <li><code>time_update</code>: A callback with signature HelicsTime(HelicsTime time, void *user_data);</li> <li><code>user_data</code>: A pointer to user data that is passed to the function when executing.</li> </ul>"},{"location":"api/capi-py/#helicsCleanupLibrary","title":"helicsCleanupLibrary","text":"<pre><code>def helicsCleanupLibrary()\n</code></pre> <p>Function to do some housekeeping work. This runs some cleanup routines and tries to close out any residual thread that haven\u2019t been shutdown yet.</p>"},{"location":"api/capi-py/#helicsClearSignalHandler","title":"helicsClearSignalHandler","text":"<pre><code>def helicsClearSignalHandler()\n</code></pre>"},{"location":"api/capi-py/#helicsCloseLibrary","title":"helicsCloseLibrary","text":"<pre><code>def helicsCloseLibrary()\n</code></pre> <p>Call when done using the helics library. This function will ensure the threads are closed properly. If possible this should be the last call before exiting.</p>"},{"location":"api/capi-py/#helicsCoreAddAlias","title":"helicsCoreAddAlias","text":"<pre><code>def helicsCoreAddAlias(core: HelicsCore, interface_name: str, alias: str)\n</code></pre> <p>Create an alias for an interface.</p> <p>Parameters</p> <ul> <li><code>interface_name</code>: The current name of an interface.</li> <li><code>alias</code>: The additional name to use for the given interface.</li> </ul>"},{"location":"api/capi-py/#helicsCoreAddDestinationFilterToEndpoint","title":"helicsCoreAddDestinationFilterToEndpoint","text":"<pre><code>def helicsCoreAddDestinationFilterToEndpoint(core: HelicsCore, filter_name: str, endpoint_name: str)\n</code></pre> <p>Link a named filter to a destination endpoint.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to generate the connection from.</li> <li><code>filter</code> - The name of the filter.</li> <li><code>endpoint</code> - The name of the endpoint to filter the data going to.</li> </ul>"},{"location":"api/capi-py/#helicsCoreAddSourceFilterToEndpoint","title":"helicsCoreAddSourceFilterToEndpoint","text":"<pre><code>def helicsCoreAddSourceFilterToEndpoint(core: HelicsCore, filter_name: str, endpoint_name: str)\n</code></pre> <p>Link a named filter to a source endpoint.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to generate the connection from.</li> <li><code>filter</code> - The name of the filter.</li> <li><code>endpoint</code> - The name of the endpoint to filter the data from.</li> </ul>"},{"location":"api/capi-py/#helicsCoreClone","title":"helicsCoreClone","text":"<pre><code>def helicsCoreClone(core: HelicsCore) -&gt; HelicsCore\n</code></pre> <p>Create a new reference to an existing core. This will create a new <code>helics.HelicsCore</code> that references the existing core. The new <code>helics.HelicsCore</code> must be freed as well.</p> <p>Parameters</p> <ul> <li><code>core</code> - An existing <code>helics.HelicsCore</code>.</li> </ul> <p>Returns: <code>helics.HelicsCore</code>.</p>"},{"location":"api/capi-py/#helicsCoreConnect","title":"helicsCoreConnect","text":"<pre><code>def helicsCoreConnect(core: HelicsCore) -&gt; bool\n</code></pre> <p>Connect a core to the federate based on current configuration.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to connect.</li> </ul> <p>Returns: <code>True</code> if <code>core</code> is connected successfully, else <code>False</code>.</p>"},{"location":"api/capi-py/#helicsCoreDataLink","title":"helicsCoreDataLink","text":"<pre><code>def helicsCoreDataLink(core: HelicsCore, source_name: str, target_name: str)\n</code></pre> <p>Link a named publication and named input using a core.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to generate the connection from.</li> <li><code>source_name</code> - The name of the publication.</li> <li><code>target_name</code> - The name of the target to send the publication data.</li> </ul>"},{"location":"api/capi-py/#helicsCoreDestroy","title":"helicsCoreDestroy","text":"<pre><code>def helicsCoreDestroy(core: HelicsCore)\n</code></pre> <p>Disconnect and free a core.</p>"},{"location":"api/capi-py/#helicsCoreDisconnect","title":"helicsCoreDisconnect","text":"<pre><code>def helicsCoreDisconnect(core: HelicsCore)\n</code></pre> <p>Disconnect a core from the federation.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to query.</li> </ul>"},{"location":"api/capi-py/#helicsCoreFree","title":"helicsCoreFree","text":"<pre><code>def helicsCoreFree(core: HelicsCore)\n</code></pre> <p>Release the memory associated with a core.</p>"},{"location":"api/capi-py/#helicsCoreGetAddress","title":"helicsCoreGetAddress","text":"<pre><code>def helicsCoreGetAddress(core: HelicsCore) -&gt; str\n</code></pre> <p>Get the network address associated with a core.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to query.</li> </ul> <p>Returns: A string with the network address of the broker.</p>"},{"location":"api/capi-py/#helicsCoreGetIdentifier","title":"helicsCoreGetIdentifier","text":"<pre><code>def helicsCoreGetIdentifier(core: HelicsCore) -&gt; str\n</code></pre> <p>Get an identifier for the core.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to query.</li> </ul> <p>Returns: A string with the identifier of the core.</p>"},{"location":"api/capi-py/#helicsCoreGlobalError","title":"helicsCoreGlobalError","text":"<pre><code>def helicsCoreGlobalError(core: HelicsCore, error_code: int, error_string: str)\n</code></pre>"},{"location":"api/capi-py/#helicsCoreIsConnected","title":"helicsCoreIsConnected","text":"<pre><code>def helicsCoreIsConnected(core: HelicsCore) -&gt; bool\n</code></pre> <p>Check if a core is connected. A connected core implies it is attached to federates or federates could be attached to it.</p> <p>Returns: <code>True</code> if connected, <code>False</code> if not connected.</p>"},{"location":"api/capi-py/#helicsCoreIsValid","title":"helicsCoreIsValid","text":"<pre><code>def helicsCoreIsValid(core: HelicsCore) -&gt; bool\n</code></pre> <p>Check if a <code>helics.HelicsCore</code> is a valid object.</p> <p>Parameters</p> <ul> <li><code>core</code> - The <code>helics.HelicsCore</code> object to test.</li> </ul> <p>Returns: <code>True</code> if valid, <code>False</code> if not valid.</p>"},{"location":"api/capi-py/#helicsCoreMakeConnections","title":"helicsCoreMakeConnections","text":"<pre><code>def helicsCoreMakeConnections(core: HelicsCore, file: str)\n</code></pre> <p>Load a file containing connection information.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to generate the connections from.</li> <li><code>file</code> - A JSON or TOML file containing connection information.</li> </ul>"},{"location":"api/capi-py/#helicsCoreRegisterCloningFilter","title":"helicsCoreRegisterCloningFilter","text":"<pre><code>def helicsCoreRegisterCloningFilter(core: HelicsCore, name: str) -&gt; HelicsCloningFilter\n</code></pre> <p>Create a cloning Filter on the specified core. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to register through.</li> <li><code>name</code> - The name of the filter (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsFilter</code>.</p>"},{"location":"api/capi-py/#helicsCoreRegisterFilter","title":"helicsCoreRegisterFilter","text":"<pre><code>def helicsCoreRegisterFilter(core: HelicsCore, type: HelicsFilterType, name: str) -&gt; HelicsFilter\n</code></pre> <p>Create a source Filter on the specified core. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to register through.</li> <li><code>type</code> - The type of filter to create <code>helics.HelicsFilterType</code>.</li> <li><code>name</code> - The name of the filter (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsFilter</code>.</p>"},{"location":"api/capi-py/#helicsCoreRegisterTranslator","title":"helicsCoreRegisterTranslator","text":"<pre><code>def helicsCoreRegisterTranslator(core: HelicsCore, type: HelicsTranslatorTypes, name: str) -&gt; HelicsTranslator\n</code></pre> <p>Create a source Translator on the specified core.</p> <p>Translators can be created through a federate or a core, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to register through.</li> <li><code>type</code> - The type of translator to create /ref HelicsTranslatorTypes.</li> <li><code>name</code> - The name of the translator (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsTranslator</code>.</p>"},{"location":"api/capi-py/#helicsCoreSendCommand","title":"helicsCoreSendCommand","text":"<pre><code>def helicsCoreSendCommand(core, target, command, err)\n</code></pre> <p>Send a command to another helics object through a core using asynchronous(fast) messages.</p> <ul> <li><code>core</code>: The broker to send the command through.</li> <li><code>target</code>: The name of the object to send the command to.</li> <li><code>command</code>: The command to send.</li> </ul>"},{"location":"api/capi-py/#helicsCoreSendOrderedCommand","title":"helicsCoreSendOrderedCommand","text":"<pre><code>def helicsCoreSendOrderedCommand(core, target, command, err)\n</code></pre> <p>Send a command to another helics object through a core using ordered sequencing.</p> <ul> <li><code>core</code>: The broker to send the command through.</li> <li><code>target</code>: The name of the object to send the command to.</li> <li><code>command</code>: The command to send.</li> </ul>"},{"location":"api/capi-py/#helicsCoreSetGlobal","title":"helicsCoreSetGlobal","text":"<pre><code>def helicsCoreSetGlobal(core: HelicsCore, name: str, value: str)\n</code></pre> <p>Set a global value in a core. This overwrites any previous value for this name.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to set the global through.</li> <li><code>name</code> - The name of the global to set.</li> <li><code>value</code> - The value of the global.</li> </ul>"},{"location":"api/capi-py/#helicsCoreSetLogFile","title":"helicsCoreSetLogFile","text":"<pre><code>def helicsCoreSetLogFile(core: HelicsCore, log_file: str)\n</code></pre> <p>Set the log file on a core.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to set the log file for.</li> <li><code>log_file</code> - The name of the file to log to.</li> </ul>"},{"location":"api/capi-py/#helicsCoreSetLoggingCallback","title":"helicsCoreSetLoggingCallback","text":"<pre><code>def helicsCoreSetLoggingCallback(core: HelicsCore, logger, user_data)\n</code></pre> <p>Set the logging callback for a <code>helics.HelicsCore</code></p> <p>Add a logging callback function for the C. The logging callback will be called when a message flows from <code>helics.HelicsCore</code> or from the core.</p>"},{"location":"api/capi-py/#parameters_5","title":"Parameters","text":"<ul> <li><code>core</code>: the <code>helics.HelicsCore</code> that is created with <code>helics.helicsCreateCore</code></li> <li><code>logger</code>: a callback with signature void(int, const char *, const char *, void *); the function arguments are loglevel, an identifier string, and a message string, and a pointer to user data</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsCoreSetReadyToInit","title":"helicsCoreSetReadyToInit","text":"<pre><code>def helicsCoreSetReadyToInit(core: HelicsCore)\n</code></pre> <p>Set the core to ready for init. This function is used for cores that have filters but no federates so there needs to be a direct signal to the core to trigger the federation initialization.</p> <p>Parameters</p> <ul> <li><code>core</code> - The <code>helics.HelicsCore</code> to enable init values for.</li> </ul>"},{"location":"api/capi-py/#helicsCoreWaitForDisconnect","title":"helicsCoreWaitForDisconnect","text":"<pre><code>def helicsCoreWaitForDisconnect(core: HelicsCore, ms_to_wait: int) -&gt; bool\n</code></pre> <p>Wait for the core to disconnect.</p> <p>Parameters</p> <ul> <li><code>core</code> - The core to wait for.</li> <li><code>ms_to_wait</code> - The time out in millisecond (&lt;0 for infinite timeout).</li> </ul>"},{"location":"api/capi-py/#helicsCreateApp","title":"helicsCreateApp","text":"<pre><code>def helicsCreateApp(app_name: str, app_type:str, config_file:str, fedInfo: HelicsFederateInfo = None) -&gt; HelicsApp\n</code></pre> <p>Creation and destruction of a HELICS app Create <code>helics.HelicsApp</code> from <code>helics.HelicsFederateInfo</code> and type and config information. <code>helics.HelicsValueFederate</code> objects can be used in all functions that take a <code>helics.HelicsFederate</code> as an argument.</p> <p>Parameters</p> <ul> <li><code>app_name</code> - The name of the federate to create, can NULL or an empty string to use the default name from fi or an assigned name.</li> <li><code>app_type</code> - The type of app to create.</li> <li><code>config_file</code> - Configuration file or string to pass into the app, can be empty.</li> <li><code>fedInfo</code> - The federate info object that contains details on the federate.</li> </ul> <p>Returns: <code>helics.HelicsApp</code>.</p>"},{"location":"api/capi-py/#helicsCreateBroker","title":"helicsCreateBroker","text":"<pre><code>def helicsCreateBroker(type: str, name: str = \"\", init_string: str = \"\") -&gt; HelicsBroker\n</code></pre> <p>Create a broker object</p> <p>Parameters</p> <ul> <li><code>type</code> - The type of the broker to create.</li> <li><code>name</code> - The name of the broker. It can be a nullptr or empty string to have a name automatically assigned.</li> <li><code>init_string</code> - An initialization string to send to the core-the format is similar to command line arguments. Typical options include a broker address such as \u2013broker=\u201dXSSAF\u201d if this is a subbroker, or the number of federates, or the address.</li> </ul> <p>Returns: <code>helics.HelicsBroker</code>.</p>"},{"location":"api/capi-py/#helicsCreateBrokerFromArgs","title":"helicsCreateBrokerFromArgs","text":"<pre><code>def helicsCreateBrokerFromArgs(type: str, name: str, arguments: List[str]) -&gt; HelicsBroker\n</code></pre> <p>Create a <code>helics.HelicsCore</code> by passing command line arguments.</p> <p>Parameters</p> <ul> <li><code>type</code> - The type of the core to create.</li> <li><code>name</code> - The name of the core. It can be a nullptr or empty string to have a name automatically assigned.</li> <li><code>arguments</code> - The list of string values from a command line.</li> </ul> <p>Returns: <code>helics.HelicsBroker</code>.</p>"},{"location":"api/capi-py/#helicsCreateCallbackFederate","title":"helicsCreateCallbackFederate","text":"<pre><code>def helicsCreateCallbackFederate(fed_name: str, fedInfo: HelicsFederateInfo = None) -&gt; HelicsCallbackFederate\n</code></pre> <p>Create a callback federate from <code>helics.HelicsFederateInfo</code>. Callback federates are both value federates and message federates, objects can be used in all functions that take a <code>helics.HelicsFederate</code> object as an argument.</p> <ul> <li><code>fed_name</code> - A string with the name of the federate, can be NULL or an empty string to pull the default name from fi.</li> <li><code>fedInfo</code> - The federate info object that contains details on the federate.</li> </ul> <p>Returns: <code>helics.HelicsCallbackFederate</code>.</p>"},{"location":"api/capi-py/#helicsCreateCallbackFederateFromConfig","title":"helicsCreateCallbackFederateFromConfig","text":"<pre><code>def helicsCreateCallbackFederateFromConfig(config_file: str) -&gt; HelicsCallbackFederate\n</code></pre> <p>Create a callback federate from a JSON file or JSON string or TOML file. Callback federates are both value federates and message federates, objects can be used in all functions that take a <code>helics.HelicsFederate</code> object as an argument.</p> <p>Parameters</p> <ul> <li><code>config_file</code> - A JSON file or a JSON string or TOML file that contains setup and configuration information.</li> </ul> <p>Returns: <code>helics.HelicsCallbackFederate</code>.</p>"},{"location":"api/capi-py/#helicsCreateCombinationFederate","title":"helicsCreateCombinationFederate","text":"<pre><code>def helicsCreateCombinationFederate(fed_name: str, fedInfo: HelicsFederateInfo = None) -&gt; HelicsCombinationFederate\n</code></pre> <p>Create a combination federate from <code>helics.HelicsFederateInfo</code>. Combination federates are both value federates and message federates, objects can be used in all functions that take a <code>helics.HelicsFederate</code> object as an argument.</p> <p>Parameters</p> <ul> <li><code>fed_name</code> - A string with the name of the federate, can be NULL or an empty string to pull the default name from fi.</li> <li><code>fedInfo</code> - The federate info object that contains details on the federate.</li> </ul> <p>Returns: <code>helics.HelicsCombinationFederate</code>.</p>"},{"location":"api/capi-py/#helicsCreateCombinationFederateFromConfig","title":"helicsCreateCombinationFederateFromConfig","text":"<pre><code>def helicsCreateCombinationFederateFromConfig(config_file: str) -&gt; HelicsCombinationFederate\n</code></pre> <p>Create a combination federate from a JSON file or JSON string or TOML file. Combination federates are both value federates and message federates, objects can be used in all functions that take a <code>helics.HelicsFederate</code> object as an argument.</p> <p>Parameters</p> <ul> <li><code>config_file</code> - A JSON file or a JSON string or TOML file that contains setup and configuration information.</li> </ul> <p>Returns: <code>helics.HelicsCombinationFederate</code>.</p>"},{"location":"api/capi-py/#helicsCreateCore","title":"helicsCreateCore","text":"<pre><code>def helicsCreateCore(type: str, name: str = \"\", init_string: str = \"\") -&gt; HelicsCore\n</code></pre> <p>Create a <code>helics.HelicsCore</code>.</p> <p>Parameters</p> <ul> <li><code>type</code> - The type of the core to create.</li> <li><code>name</code> - The name of the core. It can be a nullptr or empty string to have a name automatically assigned.</li> <li><code>init_string</code> - An initialization string to send to the core. The format is similar to command line arguments. Typical options include a broker name, the broker address, the number of federates, etc.</li> </ul> <p>Returns: <code>helics.HelicsCore</code>.</p>"},{"location":"api/capi-py/#helicsCreateCoreFromArgs","title":"helicsCreateCoreFromArgs","text":"<pre><code>def helicsCreateCoreFromArgs(type: str, name: str, arguments: List[str]) -&gt; HelicsCore\n</code></pre> <p>Create a <code>helics.HelicsCore</code> by passing command line arguments.</p> <p>Parameters</p> <ul> <li><code>type</code> - The type of the core to create.</li> <li><code>name</code> - The name of the core. It can be a nullptr or empty string to have a name automatically assigned.</li> <li><code>arguments</code> - The list of string values from a command line.</li> </ul> <p>Returns: <code>helics.HelicsCore</code>.</p>"},{"location":"api/capi-py/#helicsCreateDataBuffer","title":"helicsCreateDataBuffer","text":"<pre><code>def helicsCreateDataBuffer(initial_capacity: int) -&gt; HelicsDataBuffer\n</code></pre> <p>Create a helics managed data buffer with initial capacity</p>"},{"location":"api/capi-py/#helicsCreateFederateInfo","title":"helicsCreateFederateInfo","text":"<pre><code>def helicsCreateFederateInfo() -&gt; HelicsFederateInfo\n</code></pre> <p>Create <code>helics.HelicsFederateInfo</code> for specifying federate information when constructing a federate.</p> <p>Returns: <code>helics.HelicsFederateInfo</code>.</p>"},{"location":"api/capi-py/#helicsCreateMessageFederate","title":"helicsCreateMessageFederate","text":"<pre><code>def helicsCreateMessageFederate(fed_name: str, fedInfo: HelicsFederateInfo = None) -&gt; HelicsMessageFederate\n</code></pre> <p>Create <code>helics.HelicsMessageFederate</code> from <code>helics.HelicsFederateInfo</code>. <code>helics.HelicsMessageFederate</code> objects can be used in all functions that take a <code>helics.HelicsFederate</code> as an argument.</p> <p>Parameters</p> <ul> <li><code>fed_name</code> - The name of the federate to create.</li> <li><code>fedInfo</code> - The federate info object that contains details on the federate.</li> </ul> <p>Returns: <code>helics.HelicsMessageFederate</code>.</p>"},{"location":"api/capi-py/#helicsCreateMessageFederateFromConfig","title":"helicsCreateMessageFederateFromConfig","text":"<pre><code>def helicsCreateMessageFederateFromConfig(config_file: str) -&gt; HelicsMessageFederate\n</code></pre> <p>Create <code>helics.HelicsMessageFederate</code> from a JSON file or JSON string or TOML file. <code>helics.HelicsMessageFederate</code> objects can be used in all functions that take a <code>helics.HelicsFederate</code> object as an argument.</p> <p>Parameters</p> <ul> <li><code>config_file</code> - A config (JSON,TOML) file or a JSON string that contains setup and configuration information.</li> </ul> <p>Returns: <code>helics.HelicsMessageFederate</code>.</p>"},{"location":"api/capi-py/#helicsCreateQuery","title":"helicsCreateQuery","text":"<pre><code>def helicsCreateQuery(target_name: str, query_string: str) -&gt; HelicsQuery\n</code></pre> <p>Create a query object. A query object consists of a target and query string.</p> <p>Parameters</p> <ul> <li><code>target_name</code> - The name of the target to query.</li> <li><code>query_string</code> - The query to make of the target.</li> </ul> <p>Returns: <code>helics.HelicsQuery</code>.</p>"},{"location":"api/capi-py/#helicsCreateValueFederate","title":"helicsCreateValueFederate","text":"<pre><code>def helicsCreateValueFederate(fed_name: str, fedInfo: HelicsFederateInfo = None) -&gt; HelicsValueFederate\n</code></pre> <p>Creation and destruction of Federates. Create <code>helics.HelicsValueFederate</code> from <code>helics.HelicsFederateInfo</code>. <code>helics.HelicsValueFederate</code> objects can be used in all functions that take a <code>helics.HelicsFederate</code> as an argument.</p> <p>Parameters</p> <ul> <li><code>fed_name</code> - The name of the federate to create, can NULL or an empty string to use the default name from fi or an assigned name.</li> <li><code>fedInfo</code> - The federate info object that contains details on the federate.</li> </ul> <p>Returns: <code>helics.HelicsValueFederate</code>.</p>"},{"location":"api/capi-py/#helicsCreateValueFederateFromConfig","title":"helicsCreateValueFederateFromConfig","text":"<pre><code>def helicsCreateValueFederateFromConfig(config_file: str) -&gt; HelicsValueFederate\n</code></pre> <p>Create <code>helics.HelicsValueFederate</code> from a JSON file, JSON string, or TOML file. <code>helics.HelicsValueFederate</code> objects can be used in all functions that take a <code>helics.HelicsFederate</code> as an argument.</p> <p>Parameters</p> <ul> <li><code>config_file</code> - A JSON file or a JSON string or TOML file that contains setup and configuration information.</li> </ul> <p>Returns: <code>helics.HelicsValueFederate</code>.</p>"},{"location":"api/capi-py/#helicsDataBufferCapacity","title":"helicsDataBufferCapacity","text":"<pre><code>def helicsDataBufferCapacity(data: HelicsDataBuffer) -&gt; int\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferClone","title":"helicsDataBufferClone","text":"<pre><code>def helicsDataBufferClone(data: HelicsDataBuffer) -&gt; HelicsDataBuffer\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferConvertToType","title":"helicsDataBufferConvertToType","text":"<pre><code>def helicsDataBufferConvertToType(data: HelicsDataBuffer, new_data_type: int)\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferData","title":"helicsDataBufferData","text":"<pre><code>def helicsDataBufferData(data: HelicsDataBuffer) -&gt; bytes\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferFillFromBoolean","title":"helicsDataBufferFillFromBoolean","text":"<pre><code>def helicsDataBufferFillFromBoolean(data: HelicsDataBuffer, value: bool) -&gt; int\n</code></pre> <p>Convert a bool to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromChar","title":"helicsDataBufferFillFromChar","text":"<pre><code>def helicsDataBufferFillFromChar(data: HelicsDataBuffer, value: str) -&gt; int\n</code></pre> <p>Convert a bool to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromComplex","title":"helicsDataBufferFillFromComplex","text":"<pre><code>def helicsDataBufferFillFromComplex(data: HelicsDataBuffer, value: complex) -&gt; int\n</code></pre> <p>Convert a complex to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromComplexObject","title":"helicsDataBufferFillFromComplexObject","text":"<pre><code>def helicsDataBufferFillFromComplexObject(data: HelicsDataBuffer, value: complex) -&gt; int\n</code></pre> <p>Convert a complex to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromComplexVector","title":"helicsDataBufferFillFromComplexVector","text":"<pre><code>def helicsDataBufferFillFromComplexVector(data: HelicsDataBuffer, value: List[complex]) -&gt; int\n</code></pre> <p>Convert a complex to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromDouble","title":"helicsDataBufferFillFromDouble","text":"<pre><code>def helicsDataBufferFillFromDouble(data: HelicsDataBuffer, value: float) -&gt; int\n</code></pre> <p>Convert a double to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromInteger","title":"helicsDataBufferFillFromInteger","text":"<pre><code>def helicsDataBufferFillFromInteger(data: HelicsDataBuffer, value: int) -&gt; int\n</code></pre> <p>Convert an integer to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromNamedPoint","title":"helicsDataBufferFillFromNamedPoint","text":"<pre><code>def helicsDataBufferFillFromNamedPoint(data: HelicsDataBuffer, name: str, value: float) -&gt; int\n</code></pre> <p>Convert a named point to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromRawString","title":"helicsDataBufferFillFromRawString","text":"<pre><code>def helicsDataBufferFillFromRawString(data: HelicsDataBuffer, string: bytes) -&gt; int\n</code></pre> <p>Convert a raw string to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromString","title":"helicsDataBufferFillFromString","text":"<pre><code>def helicsDataBufferFillFromString(data: HelicsDataBuffer, string: str) -&gt; int\n</code></pre> <p>Convert a string to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromTime","title":"helicsDataBufferFillFromTime","text":"<pre><code>def helicsDataBufferFillFromTime(data: HelicsDataBuffer, value: HelicsTime)\n</code></pre> <p>Convert a bool to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFillFromVector","title":"helicsDataBufferFillFromVector","text":"<pre><code>def helicsDataBufferFillFromVector(data: HelicsDataBuffer, value: List[float]) -&gt; int\n</code></pre> <p>Convert a complex to serialized bytes</p>"},{"location":"api/capi-py/#helicsDataBufferFree","title":"helicsDataBufferFree","text":"<pre><code>def helicsDataBufferFree(data: HelicsDataBuffer)\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferIsValid","title":"helicsDataBufferIsValid","text":"<pre><code>def helicsDataBufferIsValid(data: HelicsDataBuffer) -&gt; bool\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferReserve","title":"helicsDataBufferReserve","text":"<pre><code>def helicsDataBufferReserve(data: HelicsDataBuffer, new_capacity) -&gt; bool\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferSize","title":"helicsDataBufferSize","text":"<pre><code>def helicsDataBufferSize(data: HelicsDataBuffer) -&gt; int\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferStringSize","title":"helicsDataBufferStringSize","text":"<pre><code>def helicsDataBufferStringSize(data: HelicsDataBuffer) -&gt; int\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToBoolean","title":"helicsDataBufferToBoolean","text":"<pre><code>def helicsDataBufferToBoolean(data: HelicsDataBuffer) -&gt; bool\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToChar","title":"helicsDataBufferToChar","text":"<pre><code>def helicsDataBufferToChar(data: HelicsDataBuffer) -&gt; str\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToComplex","title":"helicsDataBufferToComplex","text":"<pre><code>def helicsDataBufferToComplex(data: HelicsDataBuffer) -&gt; complex\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToComplexObject","title":"helicsDataBufferToComplexObject","text":"<pre><code>def helicsDataBufferToComplexObject(data: HelicsDataBuffer) -&gt; complex\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToComplexVector","title":"helicsDataBufferToComplexVector","text":"<pre><code>def helicsDataBufferToComplexVector(data: HelicsDataBuffer) -&gt; List[complex]\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToDouble","title":"helicsDataBufferToDouble","text":"<pre><code>def helicsDataBufferToDouble(data: HelicsDataBuffer) -&gt; float\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToInteger","title":"helicsDataBufferToInteger","text":"<pre><code>def helicsDataBufferToInteger(data: HelicsDataBuffer) -&gt; int\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToNamedPoint","title":"helicsDataBufferToNamedPoint","text":"<pre><code>def helicsDataBufferToNamedPoint(data: HelicsDataBuffer) -&gt; Tuple[str, float]\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToRawString","title":"helicsDataBufferToRawString","text":"<pre><code>def helicsDataBufferToRawString(data: HelicsDataBuffer) -&gt; str\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToString","title":"helicsDataBufferToString","text":"<pre><code>def helicsDataBufferToString(data: HelicsDataBuffer) -&gt; str\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToTime","title":"helicsDataBufferToTime","text":"<pre><code>def helicsDataBufferToTime(data: HelicsDataBuffer) -&gt; HelicsTime\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferToVector","title":"helicsDataBufferToVector","text":"<pre><code>def helicsDataBufferToVector(data: HelicsDataBuffer) -&gt; List[float]\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferType","title":"helicsDataBufferType","text":"<pre><code>def helicsDataBufferType(data: HelicsDataBuffer) -&gt; int\n</code></pre>"},{"location":"api/capi-py/#helicsDataBufferVectorSize","title":"helicsDataBufferVectorSize","text":"<pre><code>def helicsDataBufferVectorSize(data: HelicsDataBuffer) -&gt; int\n</code></pre>"},{"location":"api/capi-py/#helicsEndpointAddDestinationFilter","title":"helicsEndpointAddDestinationFilter","text":"<pre><code>def helicsEndpointAddDestinationFilter(endpoint: HelicsEndpoint, filter_name: str)\n</code></pre> <p>Add destination filter to endpoint</p>"},{"location":"api/capi-py/#parameters_6","title":"Parameters","text":"<ul> <li><code>endpoint</code> - The endpoint.</li> <li><code>filter_name</code> - The name of the filter.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointAddDestinationTarget","title":"helicsEndpointAddDestinationTarget","text":"<pre><code>def helicsEndpointAddDestinationTarget(endpoint: HelicsEndpoint, destination_name: str)\n</code></pre> <p>Add a destination target to a endpoint. All messages coming from a source are copied to the delivery address(es).</p>"},{"location":"api/capi-py/#parameters_7","title":"Parameters","text":"<ul> <li><code>endpoint</code> - The given endpoint.</li> <li><code>source_name</code> - The name of the endpoint to add as a source target.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointAddSourceFilter","title":"helicsEndpointAddSourceFilter","text":"<pre><code>def helicsEndpointAddSourceFilter(endpoint: HelicsEndpoint, filter_name: str)\n</code></pre> <p>Add source filter to endpoint</p>"},{"location":"api/capi-py/#parameters_8","title":"Parameters","text":"<ul> <li><code>endpoint</code> - The endpoint.</li> <li><code>filter_name</code> - The name of the filter.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointAddSourceTarget","title":"helicsEndpointAddSourceTarget","text":"<pre><code>def helicsEndpointAddSourceTarget(endpoint: HelicsEndpoint, source_name: str)\n</code></pre> <p>Add a source target to a endpoint. All messages coming from a source are copied to the delivery address(es).</p>"},{"location":"api/capi-py/#parameters_9","title":"Parameters","text":"<ul> <li><code>endpoint</code> - The given endpoint.</li> <li><code>source_name</code> - The name of the endpoint to add as a source target.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointClearMessages","title":"helicsEndpointClearMessages","text":"<pre><code>def helicsEndpointClearMessages(endpoint: HelicsEndpoint)\n</code></pre> <p>Clear all message from an endpoint.</p> <p>_**Deprecated: Use <code>helics.helicsFederateClearMessages</code> to free all messages, or <code>helics.helicsMessageFree</code> to clear an individual message.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint object to operate on.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsEndpointCreateMessage","title":"helicsEndpointCreateMessage","text":"<pre><code>def helicsEndpointCreateMessage(endpoint: HelicsEndpoint) -&gt; HelicsMessage\n</code></pre> <p>Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint object to associate the message with.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointCreateMessageObject","title":"helicsEndpointCreateMessageObject","text":"<pre><code>def helicsEndpointCreateMessageObject(endpoint: HelicsEndpoint) -&gt; HelicsMessage\n</code></pre> <p>Create a new empty message. The message is empty and isValid will return false since there is no data associated with the message yet.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint object to associate the message with.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsEndpointGetDefaultDestination","title":"helicsEndpointGetDefaultDestination","text":"<pre><code>def helicsEndpointGetDefaultDestination(endpoint: HelicsEndpoint) -&gt; str\n</code></pre> <p>Get the default destination for an endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to set the destination for.</li> </ul> <p>Returns: A string with the default destination.</p>"},{"location":"api/capi-py/#helicsEndpointGetInfo","title":"helicsEndpointGetInfo","text":"<pre><code>def helicsEndpointGetInfo(endpoint: HelicsEndpoint) -&gt; str\n</code></pre> <p>Get the data in the info field of a filter.</p> <p>Parameters</p> <ul> <li><code>end</code> - The filter to query.</li> </ul> <p>Returns: A string with the info field string.</p>"},{"location":"api/capi-py/#helicsEndpointGetMessage","title":"helicsEndpointGetMessage","text":"<pre><code>def helicsEndpointGetMessage(endpoint: HelicsEndpoint) -&gt; HelicsMessage\n</code></pre> <p>Receive a packet from a particular endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The identifier for the endpoint.</li> </ul> <p>Returns: A message object.</p>"},{"location":"api/capi-py/#helicsEndpointGetMessageObject","title":"helicsEndpointGetMessageObject","text":"<pre><code>def helicsEndpointGetMessageObject(endpoint: HelicsEndpoint) -&gt; HelicsMessage\n</code></pre> <p>Receive a packet from a particular endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The identifier for the endpoint.</li> </ul> <p>Returns: A message.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsEndpointGetName","title":"helicsEndpointGetName","text":"<pre><code>def helicsEndpointGetName(endpoint: HelicsEndpoint) -&gt; str\n</code></pre> <p>Get the name of an endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint object in question.</li> </ul> <p>Returns: The name of the endpoint.</p>"},{"location":"api/capi-py/#helicsEndpointGetOption","title":"helicsEndpointGetOption","text":"<pre><code>def helicsEndpointGetOption(endpoint: HelicsEndpoint, option: HelicsHandleOption) -&gt; int\n</code></pre> <p>Get the value of handle option on an endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to modify.</li> <li><code>option</code> - Integer code for the option to set <code>helics.HelicsHandleOption</code>.</li> </ul> <p>Returns: the value of the option, for boolean options will be 0 or 1.</p>"},{"location":"api/capi-py/#helicsEndpointGetTag","title":"helicsEndpointGetTag","text":"<pre><code>def helicsEndpointGetTag(endpoint: HelicsEndpoint, tagname: str)\n</code></pre> <p>Get the data in a specified tag of a endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code>: The endpoint object to query.</li> <li><code>tagname</code>: The name of the tag to query.</li> </ul> <p>Returns</p> <p>A string with the tag data.</p>"},{"location":"api/capi-py/#helicsEndpointGetType","title":"helicsEndpointGetType","text":"<pre><code>def helicsEndpointGetType(endpoint: HelicsEndpoint) -&gt; str\n</code></pre> <p>Get the type specified for an endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint object in question.</li> </ul> <p>Returns: The defined type of the endpoint.</p>"},{"location":"api/capi-py/#helicsEndpointHasMessage","title":"helicsEndpointHasMessage","text":"<pre><code>def helicsEndpointHasMessage(endpoint: HelicsEndpoint) -&gt; bool\n</code></pre> <p>Check if a given endpoint has any unread messages.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to check.</li> </ul> <p>Returns: <code>True</code> if the endpoint has a message, <code>False</code> otherwise.</p>"},{"location":"api/capi-py/#helicsEndpointIsValid","title":"helicsEndpointIsValid","text":"<pre><code>def helicsEndpointIsValid(endpoint: HelicsEndpoint) -&gt; bool\n</code></pre> <p>Check if an endpoint is valid.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint object to check.</li> </ul> <p>Returns: <code>True</code> if the Endpoint object represents a valid endpoint.</p>"},{"location":"api/capi-py/#helicsEndpointPendingMessageCount","title":"helicsEndpointPendingMessageCount","text":"<pre><code>def helicsEndpointPendingMessageCount(endpoint: HelicsEndpoint) -&gt; int\n</code></pre> <p>Returns the number of pending receives for all endpoints of a particular federate.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to query.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointPendingMessages","title":"helicsEndpointPendingMessages","text":"<pre><code>def helicsEndpointPendingMessages(endpoint: HelicsEndpoint) -&gt; int\n</code></pre> <p>Returns the number of pending receives for all endpoints of a particular federate.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to query.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsEndpointRemoveTarget","title":"helicsEndpointRemoveTarget","text":"<pre><code>def helicsEndpointRemoveTarget(endpoint: HelicsEndpoint, target: str)\n</code></pre> <p>Remove target from endpoint</p>"},{"location":"api/capi-py/#parameters_10","title":"Parameters","text":"<ul> <li><code>endpoint</code> - The given endpoint.</li> <li><code>target_name</code> - The name of the endpoint to remove.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendBytes","title":"helicsEndpointSendBytes","text":"<pre><code>def helicsEndpointSendBytes(endpoint: HelicsEndpoint, data: bytes)\n</code></pre> <p>Send a message from a specific endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>data</code> - The data to send</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendBytesAt","title":"helicsEndpointSendBytesAt","text":"<pre><code>def helicsEndpointSendBytesAt(endpoint: HelicsEndpoint, data: bytes, time: HelicsTime)\n</code></pre> <p>Send a message at a specific time to the targeted destinations</p> <ul> <li><code>endpoint</code>: The endpoint to send the data from.</li> <li><code>data</code>: The data to send.</li> <li><code>time</code>: The time the message should be sent.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendBytesTo","title":"helicsEndpointSendBytesTo","text":"<pre><code>def helicsEndpointSendBytesTo(endpoint: HelicsEndpoint, data: bytes, destination: str)\n</code></pre> <p>Send a message to the specified destination.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>data</code> - The data to send.</li> <li><code>destination</code> - The target destination.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendBytesToAt","title":"helicsEndpointSendBytesToAt","text":"<pre><code>def helicsEndpointSendBytesToAt(endpoint: HelicsEndpoint, data: bytes, destination: str, time: HelicsTime)\n</code></pre> <p>Send a message at a specific time to the specified destination.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>data</code> - The data to send.</li> <li><code>destination</code> - The target destination.</li> <li><code>time</code> - The time the message should be sent.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendEventRaw","title":"helicsEndpointSendEventRaw","text":"<pre><code>def helicsEndpointSendEventRaw(\n    endpoint: HelicsEndpoint,\n    destination: str,\n    data: bytes,\n    time: HelicsTime,\n)\n</code></pre> <p>Send a message at a specific time to the specified destination.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>destination</code> - The target destination.</li> <li><code>data</code> - The data to send.</li> <li><code>time</code> - The time the message should be sent.</li> </ul> <p>DEPRECATED</p> <p>Use <code>helicsEndpointSendBytesToAt</code> instead.</p>"},{"location":"api/capi-py/#helicsEndpointSendMessage","title":"helicsEndpointSendMessage","text":"<pre><code>def helicsEndpointSendMessage(endpoint: HelicsEndpoint, message: HelicsMessage)\n</code></pre> <p>Send a message object from a specific endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>message</code> - The actual message to send which will be copied.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendMessageObject","title":"helicsEndpointSendMessageObject","text":"<pre><code>def helicsEndpointSendMessageObject(endpoint: HelicsEndpoint, message: HelicsMessage)\n</code></pre> <p>Send a message object from a specific endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>message</code> - The actual message to send which will be copied.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsEndpointSendMessageObjectZeroCopy","title":"helicsEndpointSendMessageObjectZeroCopy","text":"<pre><code>def helicsEndpointSendMessageObjectZeroCopy(endpoint: HelicsEndpoint, message: HelicsMessage)\n</code></pre> <p>Send a message object from a specific endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>message</code> - The actual message to send which will be copied.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsEndpointSendMessageRaw","title":"helicsEndpointSendMessageRaw","text":"<pre><code>def helicsEndpointSendMessageRaw(endpoint: HelicsEndpoint, destination: str, data: bytes)\n</code></pre> <p>Send a message to the specified destination.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>destination</code> - The target destination.</li> <li><code>data</code> - The data to send.</li> </ul> <p>DEPRECATED</p> <p>Use <code>helicsEndpointSendBytesTo</code> instead</p>"},{"location":"api/capi-py/#helicsEndpointSendMessageZeroCopy","title":"helicsEndpointSendMessageZeroCopy","text":"<pre><code>def helicsEndpointSendMessageZeroCopy(endpoint: HelicsEndpoint, message: HelicsMessage)\n</code></pre> <p>Send a message object from a specific endpoint, the message will not be copied and the message object will no longer be valid after the call.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>message</code> - The actual message to send which will be copied.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendString","title":"helicsEndpointSendString","text":"<pre><code>def helicsEndpointSendString(endpoint: HelicsEndpoint, data: str)\n</code></pre> <p>Send a message from a specific endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>data</code> - The string to send.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendStringAt","title":"helicsEndpointSendStringAt","text":"<pre><code>def helicsEndpointSendStringAt(endpoint: HelicsEndpoint, data: str, time: HelicsTime)\n</code></pre> <p>Send a message from a specific endpoint at a specified time.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>data</code> - The string to send.</li> <li><code>time</code>: The time the message should be sent.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendStringTo","title":"helicsEndpointSendStringTo","text":"<pre><code>def helicsEndpointSendStringTo(endpoint: HelicsEndpoint, data: str, destination: str)\n</code></pre> <p>Send a message from a specific endpoint to a specific target destination.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>data</code> - The string to send.</li> <li><code>destination</code> - The target destination.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSendStringToAt","title":"helicsEndpointSendStringToAt","text":"<pre><code>def helicsEndpointSendStringToAt(endpoint: HelicsEndpoint, data: str, destination: str, time: HelicsTime)\n</code></pre> <p>Send a message from a specific endpoint to a specific target destination at a specified time.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to send the data from.</li> <li><code>data</code> - The string to send.</li> <li><code>destination</code> - The target destination.</li> <li><code>time</code>: The time the message should be sent.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSetDefaultDestination","title":"helicsEndpointSetDefaultDestination","text":"<pre><code>def helicsEndpointSetDefaultDestination(endpoint: HelicsEndpoint, destination: str)\n</code></pre> <p>Set the default destination for an endpoint if no other endpoint is given.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to set the destination for.</li> <li><code>destination</code> - A string naming the desired default endpoint.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSetInfo","title":"helicsEndpointSetInfo","text":"<pre><code>def helicsEndpointSetInfo(endpoint: HelicsEndpoint, info: str)\n</code></pre> <p>Set the data in the info field for a filter.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to query.</li> <li><code>info</code> - The string to set.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSetOption","title":"helicsEndpointSetOption","text":"<pre><code>def helicsEndpointSetOption(endpoint: HelicsEndpoint, option: HelicsHandleOption, value: int)\n</code></pre> <p>Set a handle option on an endpoint.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to modify.</li> <li><code>option</code> - Integer code for the option to set <code>helics.HelicsHandleOption</code>.</li> <li><code>value</code> - The value to set the option to.</li> </ul>"},{"location":"api/capi-py/#helicsEndpointSetTag","title":"helicsEndpointSetTag","text":"<pre><code>def helicsEndpointSetTag(endpoint: HelicsEndpoint, tagname: str, tagvalue: str)\n</code></pre> <p>Set the data in a specific tag for a endpoint.</p> <p><code>endpoint</code>: The endpoint object to set a tag for. <code>tagname</code>: The name of the tag to set. <code>tagvalue</code>: The string value to associate with a tag.</p>"},{"location":"api/capi-py/#helicsEndpointSubscribe","title":"helicsEndpointSubscribe","text":"<pre><code>def helicsEndpointSubscribe(endpoint: HelicsEndpoint, name: str)\n</code></pre> <p>Subscribe an endpoint to a publication.</p> <p>Parameters</p> <ul> <li><code>endpoint</code> - The endpoint to use.</li> <li><code>name</code> - The name of the publication.</li> </ul>"},{"location":"api/capi-py/#helicsErrorClear","title":"helicsErrorClear","text":"<pre><code>def helicsErrorClear(err: HelicsError)\n</code></pre> <p>Clear an error object.</p>"},{"location":"api/capi-py/#helicsErrorInitialize","title":"helicsErrorInitialize","text":"<pre><code>def helicsErrorInitialize()\n</code></pre> <p>Return an initialized error object.</p>"},{"location":"api/capi-py/#helicsFederateAddAlias","title":"helicsFederateAddAlias","text":"<pre><code>def helicsFederateAddAlias(fed: HelicsFederate, interface_name: str, alias: str)\n</code></pre> <p>Create an alias for an interface.</p> <p>Parameters</p> <ul> <li><code>interface_name</code>: The current name of an interface.</li> <li><code>alias</code>: The additional name to use for the given interface.</li> </ul>"},{"location":"api/capi-py/#helicsFederateAddDependency","title":"helicsFederateAddDependency","text":"<pre><code>def helicsFederateAddDependency(fed: HelicsFederate, name: str)\n</code></pre> <p>Add a time dependency for a federate. The federate will depend on the given named federate for time synchronization.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to add the dependency for.</li> <li><code>name</code> - The name of the federate to depend on.</li> </ul>"},{"location":"api/capi-py/#helicsFederateClearMessages","title":"helicsFederateClearMessages","text":"<pre><code>def helicsFederateClearMessages(fed: HelicsFederate)\n</code></pre> <p>Clear all stored messages from a federate. This clears messages retrieved through <code>helics.helicsFederateGetMessage</code> or <code>helics.helicsFederateGetMessageObject</code>.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to clear the message for.</li> </ul>"},{"location":"api/capi-py/#helicsFederateClearUpdates","title":"helicsFederateClearUpdates","text":"<pre><code>def helicsFederateClearUpdates(fed: HelicsFederate)\n</code></pre> <p>Clear all the update flags from a federates inputs.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The value <code>helics.HelicsFederate</code> for which to clear update flags.</li> </ul>"},{"location":"api/capi-py/#helicsFederateClone","title":"helicsFederateClone","text":"<pre><code>def helicsFederateClone(fed: HelicsFederate) -&gt; HelicsFederate\n</code></pre> <p>Create a new reference to an existing federate. This will create a new <code>helics.HelicsFederate</code> object that references the existing federate. The new object must be freed as well.</p> <p>Parameters</p> <ul> <li><code>fed</code> - An existing <code>helics.HelicsFederate</code>.</li> </ul> <p>Returns: <code>helics.HelicsFederate</code>.</p>"},{"location":"api/capi-py/#helicsFederateCosimulationTerminationCallback","title":"helicsFederateCosimulationTerminationCallback","text":"<pre><code>def helicsFederateCosimulationTerminationCallback(fed: HelicsFederate, cosim_termination, user_data)\n</code></pre> <p>Set callback for cosimulation termination</p> <p>This callback will be executed once when the time advance of the federate/co-simulation has terminated. This may be called as part of the finalize operation, or when a maxTime signal is returned from requestTime or when an error is encountered</p>"},{"location":"api/capi-py/#parameters_11","title":"Parameters","text":"<ul> <li><code>fed</code>: The federate to set the callback for.</li> <li><code>cosim_termination</code>: A callback with signature void( void *user_data);</li> <li><code>user_data</code>: A pointer to user data that is passed to the function when executing.</li> </ul>"},{"location":"api/capi-py/#helicsFederateCreateMessage","title":"helicsFederateCreateMessage","text":"<pre><code>def helicsFederateCreateMessage(fed: HelicsFederate) -&gt; HelicsMessage\n</code></pre> <p>Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet.</p> <p>Parameters</p> <ul> <li><code>fed</code> - the <code>helics.HelicsFederate</code> to associate the message with.</li> </ul>"},{"location":"api/capi-py/#helicsFederateCreateMessageObject","title":"helicsFederateCreateMessageObject","text":"<pre><code>def helicsFederateCreateMessageObject(fed: HelicsFederate) -&gt; HelicsMessage\n</code></pre> <p>Create a new empty message object. The message is empty and isValid will return false since there is no data associated with the message yet.</p> <p>Parameters</p> <ul> <li><code>fed</code> - the <code>helics.HelicsFederate</code> to associate the message with.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateDestroy","title":"helicsFederateDestroy","text":"<pre><code>def helicsFederateDestroy(fed: HelicsFederate)\n</code></pre> <p>Disconnect and free a federate.</p>"},{"location":"api/capi-py/#helicsFederateDisconnect","title":"helicsFederateDisconnect","text":"<pre><code>def helicsFederateDisconnect(fed: HelicsFederate)\n</code></pre> <p>Disconnect the federate. This function halts all communication in the federate and disconnects it from the core.</p>"},{"location":"api/capi-py/#helicsFederateDisconnectAsync","title":"helicsFederateDisconnectAsync","text":"<pre><code>def helicsFederateDisconnectAsync(fed: HelicsFederate)\n</code></pre> <p>Disconnect the federate in an async call.</p>"},{"location":"api/capi-py/#helicsFederateDisconnectComplete","title":"helicsFederateDisconnectComplete","text":"<pre><code>def helicsFederateDisconnectComplete(fed: HelicsFederate)\n</code></pre> <p>Complete the asynchronous disconnect call.</p>"},{"location":"api/capi-py/#helicsFederateEnterExecutingMode","title":"helicsFederateEnterExecutingMode","text":"<pre><code>def helicsFederateEnterExecutingMode(fed: HelicsFederate)\n</code></pre> <p>Request that the federate enter the Execution mode. This call is blocking until granted entry by the <code>helics.HelicsCore</code>. On return from this call the federate will be at time 0. For an asynchronous alternative call see <code>helics.helicsFederateEnterExecutingModeAsync</code></p> <p>Parameters</p> <ul> <li><code>fed</code> - A federate to change modes.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeAsync","title":"helicsFederateEnterExecutingModeAsync","text":"<pre><code>def helicsFederateEnterExecutingModeAsync(fed: HelicsFederate)\n</code></pre> <p>Request that the federate enter the Execution mode. This call is non-blocking and will return immediately. Call <code>helics.helicsFederateEnterExecutingModeComplete</code> to finish the call sequence</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> to complete the call.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeComplete","title":"helicsFederateEnterExecutingModeComplete","text":"<pre><code>def helicsFederateEnterExecutingModeComplete(fed: HelicsFederate)\n</code></pre> <p>Complete the call to <code>helics.helicsFederateEnterExecutingModeAsync</code>.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> to complete the call.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeIterative","title":"helicsFederateEnterExecutingModeIterative","text":"<pre><code>def helicsFederateEnterExecutingModeIterative(fed: HelicsFederate, iterate: HelicsIterationRequest) -&gt; HelicsIterationResult\n</code></pre> <p>Request an iterative time. This call allows for finer grain control of the iterative process than <code>helics.helicsFederateRequestTime</code>. It takes a time and iteration request, and returns a time and iteration status.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> <li><code>iterate</code> - <code>helics.HelicsIterationRequest</code>, i.e. the requested iteration mode.</li> </ul> <p>Returns: <code>helics.HelicsIterationResult</code>.</p>"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeIterativeAsync","title":"helicsFederateEnterExecutingModeIterativeAsync","text":"<pre><code>def helicsFederateEnterExecutingModeIterativeAsync(fed: HelicsFederate, iterate: HelicsIterationRequest)\n</code></pre> <p>Request an iterative entry to the execution mode. This call allows for finer grain control of the iterative process than <code>helics.helicsFederateRequestTime</code>. It takes a time and iteration request, and returns a time and iteration status.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> <li><code>iterate</code> - <code>helics.HelicsIterationRequest</code>, i.e. the requested iteration mode.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterExecutingModeIterativeComplete","title":"helicsFederateEnterExecutingModeIterativeComplete","text":"<pre><code>def helicsFederateEnterExecutingModeIterativeComplete(\n    fed: HelicsFederate,\n) -&gt; HelicsIterationResult\n</code></pre> <p>Complete the asynchronous iterative call into ExecutionMode.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> </ul> <p>Returns: <code>helics.HelicsIterationResult</code>.</p>"},{"location":"api/capi-py/#helicsFederateEnterInitializingMode","title":"helicsFederateEnterInitializingMode","text":"<pre><code>def helicsFederateEnterInitializingMode(fed: HelicsFederate)\n</code></pre> <p>Initialization, execution, and time requests. Enter the initialization state of a federate. The initialization state allows initial values to be set and received if the iteration is requested on entry to the execution state. This is a blocking call and will block until the core allows it to proceed.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to operate on.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterInitializingModeAsync","title":"helicsFederateEnterInitializingModeAsync","text":"<pre><code>def helicsFederateEnterInitializingModeAsync(fed: HelicsFederate)\n</code></pre> <p>Non blocking alternative to <code>helics.helicsFederateEnterInitializingMode</code>. The function helicsFederateEnterInitializationModeFinalize must be called to finish the operation.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to operate on.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterInitializingModeComplete","title":"helicsFederateEnterInitializingModeComplete","text":"<pre><code>def helicsFederateEnterInitializingModeComplete(fed: HelicsFederate)\n</code></pre> <p>Finalize the entry to initialize mode that was initiated with <code>helics.helicsFederateEnterInitializingModeAsync</code>.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate desiring to complete the initialization step.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterInitializingModeIterative","title":"helicsFederateEnterInitializingModeIterative","text":"<pre><code>def helicsFederateEnterInitializingModeIterative(fed: HelicsFederate)\n</code></pre> <p>Trigger a blocking call and return to created state after all federates have either triggered an iteration or are waiting to enter initializing mode.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to operate on.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterInitializingModeIterativeAsync","title":"helicsFederateEnterInitializingModeIterativeAsync","text":"<pre><code>def helicsFederateEnterInitializingModeIterativeAsync(fed: HelicsFederate)\n</code></pre> <p>Non-blocking alternative to <code>helics.helicsFederateEnterInitializingModeIterative</code>.</p> <p>A call to <code>helics.helicsFederateEnterInitializingModeIterativeComplete</code> should be made to complete the call sequence.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to operate on.</li> </ul>"},{"location":"api/capi-py/#helicsFederateEnterInitializingModeIterativeComplete","title":"helicsFederateEnterInitializingModeIterativeComplete","text":"<pre><code>def helicsFederateEnterInitializingModeIterativeComplete(fed: HelicsFederate)\n</code></pre> <p>Complete the call to enter initializing mode iterative that was initiated with <code>helics.helicsFederateEnterInitializingModeIterativeAsync</code>.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to operate on.</li> </ul>"},{"location":"api/capi-py/#helicsFederateErrorHandlerCallback","title":"helicsFederateErrorHandlerCallback","text":"<pre><code>def helicsFederateErrorHandlerCallback(fed: HelicsFederate, error_handler, user_data)\n</code></pre> <p>Set callback for error handling</p> <p>This callback will be when a federate error is encountered</p>"},{"location":"api/capi-py/#parameters_12","title":"Parameters","text":"<ul> <li><code>fed</code>: The federate to set the callback for.</li> <li><code>error_handler</code>: A callback with signature void(int errorCode, const char *errorString, void *user_data);</li> <li><code>user_data</code> A pointer to user data that is passed to the function when executing.</li> </ul>"},{"location":"api/capi-py/#helicsFederateExecutingEntryCallback","title":"helicsFederateExecutingEntryCallback","text":"<pre><code>def helicsFederateExecutingEntryCallback(fed: HelicsFederate, executing_entry, user_data)\n</code></pre> <p>Set callback for the entry to ExecutingMode.</p> <p>This callback will be executed once on first entry to executing Mode</p>"},{"location":"api/capi-py/#parameters_13","title":"Parameters","text":"<ul> <li><code>fed</code>: The federate to set the callback for.</li> <li><code>executing_entry</code>: A callback with signature void( void *user_data);</li> <li><code>user_data</code>: A pointer to user data that is passed to the function when executing.</li> </ul>"},{"location":"api/capi-py/#helicsFederateFinalize","title":"helicsFederateFinalize","text":"<pre><code>def helicsFederateFinalize(fed: HelicsFederate)\n</code></pre> <p>Finalize the federate. This function halts all communication in the federate and disconnects it from the core.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateFinalizeAsync","title":"helicsFederateFinalizeAsync","text":"<pre><code>def helicsFederateFinalizeAsync(fed: HelicsFederate)\n</code></pre> <p>Finalize the federate in an async call.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateFinalizeComplete","title":"helicsFederateFinalizeComplete","text":"<pre><code>def helicsFederateFinalizeComplete(fed: HelicsFederate)\n</code></pre> <p>Complete the asynchronous disconnect call.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateFree","title":"helicsFederateFree","text":"<pre><code>def helicsFederateFree(fed: HelicsFederate)\n</code></pre> <p>Release the memory associated with a federate.</p>"},{"location":"api/capi-py/#helicsFederateGetCommand","title":"helicsFederateGetCommand","text":"<pre><code>def helicsFederateGetCommand(fed: HelicsFederate) -&gt; str\n</code></pre>"},{"location":"api/capi-py/#helicsFederateGetCommandSource","title":"helicsFederateGetCommandSource","text":"<pre><code>def helicsFederateGetCommandSource(fed: HelicsFederate) -&gt; str\n</code></pre>"},{"location":"api/capi-py/#helicsFederateGetCore","title":"helicsFederateGetCore","text":"<pre><code>def helicsFederateGetCore(fed: HelicsFederate) -&gt; HelicsCore\n</code></pre> <p>Get the <code>helics.HelicsCore</code> associated with a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - <code>helics.HelicsFederate</code>.</li> </ul> <p>Returns: <code>helics.HelicsCore</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetCoreObject","title":"helicsFederateGetCoreObject","text":"<pre><code>def helicsFederateGetCoreObject(fed: HelicsFederate) -&gt; HelicsCore\n</code></pre> <p>Get the <code>helics.HelicsCore</code> associated with a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - <code>helics.HelicsFederate</code>.</li> </ul> <p>Returns: <code>helics.HelicsCore</code>.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateGetCurrentTime","title":"helicsFederateGetCurrentTime","text":"<pre><code>def helicsFederateGetCurrentTime(fed: HelicsFederate) -&gt; HelicsTime\n</code></pre> <p>Get the current time of the federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> to query.</li> </ul> <p>Returns: <code>helics.HelicsTime</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetEndpoint","title":"helicsFederateGetEndpoint","text":"<pre><code>def helicsFederateGetEndpoint(fed: HelicsFederate, name: str) -&gt; HelicsEndpoint\n</code></pre> <p>Get an endpoint object from a name.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The message <code>helics.HelicsFederate</code> to use to get the endpoint.</li> <li><code>name</code> - The name of the endpoint.</li> </ul> <p>Returns: <code>helics.HelicsEndpoint</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetEndpointByIndex","title":"helicsFederateGetEndpointByIndex","text":"<pre><code>def helicsFederateGetEndpointByIndex(fed: HelicsFederate, index: int) -&gt; HelicsEndpoint\n</code></pre> <p>Get an endpoint by its index, typically already created via registerInterfaces file or something of that nature.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>index</code> - The index of the publication to get.</li> </ul> <p>Returns: <code>helics.HelicsEndpoint</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetEndpointCount","title":"helicsFederateGetEndpointCount","text":"<pre><code>def helicsFederateGetEndpointCount(fed: HelicsFederate) -&gt; int\n</code></pre> <p>Get the number of endpoints in a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The message federate to query.</li> </ul> <p>Returns: (-1) if fed was not a valid federate, otherwise returns the number of endpoints.</p>"},{"location":"api/capi-py/#helicsFederateGetFilter","title":"helicsFederateGetFilter","text":"<pre><code>def helicsFederateGetFilter(fed: HelicsFederate, name: str) -&gt; HelicsFilter\n</code></pre> <p>Get a filter by its name, typically already created via registerInterfaces file or something of that nature.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> to use to get the filter.</li> <li><code>name</code> - The name of the filter.</li> </ul> <p>Returns: <code>helics.HelicsFilter</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetFilterByIndex","title":"helicsFederateGetFilterByIndex","text":"<pre><code>def helicsFederateGetFilterByIndex(fed: HelicsFederate, index: int) -&gt; HelicsFilter\n</code></pre> <p>Get a filter by its index, typically already created via registerInterfaces file or something of that nature.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>index</code> - The index of the publication to get.</li> </ul> <p>Returns: <code>helics.HelicsFilter</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetFilterCount","title":"helicsFederateGetFilterCount","text":"<pre><code>def helicsFederateGetFilterCount(fed: HelicsFederate) -&gt; int\n</code></pre> <p>Get the number of filters registered through a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> to use to get the filter.</li> </ul> <p>Returns: A count of the number of filters registered through a federate.</p>"},{"location":"api/capi-py/#helicsFederateGetFlagOption","title":"helicsFederateGetFlagOption","text":"<pre><code>def helicsFederateGetFlagOption(fed: HelicsFederate, flag: Union[int, HelicsFederateFlag, HelicsFlag]) -&gt; bool\n</code></pre> <p>Get a flag value for a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to get the flag for.</li> <li><code>flag</code> - The <code>helics.HelicsFederateFlag</code> to query.</li> </ul>"},{"location":"api/capi-py/#helicsFederateGetInput","title":"helicsFederateGetInput","text":"<pre><code>def helicsFederateGetInput(fed: HelicsFederate, name: str) -&gt; HelicsInput\n</code></pre> <p>Get an input object from a name.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The value <code>helics.HelicsFederate</code> to use to get the publication.</li> <li><code>name</code> - The name of the input.</li> </ul> <p>Returns: <code>helics.HelicsInput</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetInputByIndex","title":"helicsFederateGetInputByIndex","text":"<pre><code>def helicsFederateGetInputByIndex(fed: HelicsFederate, index: int) -&gt; HelicsInput\n</code></pre> <p>Get an input by its index, typically already created via registerInterfaces file or something of that nature.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>index</code> - The index of the publication to get.</li> </ul> <p>Returns: <code>helics.HelicsInput</code></p>"},{"location":"api/capi-py/#helicsFederateGetInputByTarget","title":"helicsFederateGetInputByTarget","text":"<pre><code>def helicsFederateGetInputByTarget(fed: HelicsFederate, target: str) -&gt; HelicsInput\n</code></pre> <p>Get an input object from a target.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The value <code>helics.HelicsFederate</code> to use to get the input.</li> <li><code>target</code> - The name of the publication that an input is targeting.</li> </ul> <p>Returns: <code>helics.HelicsInput</code></p>"},{"location":"api/capi-py/#helicsFederateGetInputCount","title":"helicsFederateGetInputCount","text":"<pre><code>def helicsFederateGetInputCount(fed: HelicsFederate) -&gt; int\n</code></pre> <p>Get the number of subscriptions in a federate.</p> <p>Returns: (-1) if fed was not a valid federate otherwise returns the number of subscriptions.</p>"},{"location":"api/capi-py/#helicsFederateGetIntegerProperty","title":"helicsFederateGetIntegerProperty","text":"<pre><code>def helicsFederateGetIntegerProperty(fed: HelicsFederate, property: HelicsProperty) -&gt; int\n</code></pre> <p>Get the current value of an integer property (such as a logging level).</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to get the flag for.</li> <li><code>property</code> - A code for the property to set <code>helics.HelicsProperty</code>.</li> </ul>"},{"location":"api/capi-py/#helicsFederateGetMessage","title":"helicsFederateGetMessage","text":"<pre><code>def helicsFederateGetMessage(fed: HelicsFederate) -&gt; HelicsMessage\n</code></pre> <p>Receive a communication message for any endpoint in the federate. The return order will be in order of endpoint creation. So all messages that are available for the first endpoint.handle, then all for the second, and so on. Within a single endpoint.handle, the messages are ordered by time, then source_id, then order of arrival.</p> <p>Returns: A <code>helics.HelicsMessage</code> which references the data in the message.</p>"},{"location":"api/capi-py/#helicsFederateGetMessageObject","title":"helicsFederateGetMessageObject","text":"<pre><code>def helicsFederateGetMessageObject(fed: HelicsFederate) -&gt; HelicsMessage\n</code></pre> <p>Receive a communication message for any endpoint in the federate. The return order will be in order of endpoint creation. So all messages that are available for the first endpoint.handle, then all for the second, and so on. Within a single endpoint.handle, the messages are ordered by time, then source_id, then order of arrival.</p> <p>Returns: A <code>helics.HelicsMessage</code> which references the data in the message.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateGetName","title":"helicsFederateGetName","text":"<pre><code>def helicsFederateGetName(fed: HelicsFederate) -&gt; str\n</code></pre> <p>Get the name of the federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> to query.</li> </ul> <p>Returns: A string with the name.</p>"},{"location":"api/capi-py/#helicsFederateGetPublication","title":"helicsFederateGetPublication","text":"<pre><code>def helicsFederateGetPublication(fed: HelicsFederate, name: str) -&gt; HelicsPublication\n</code></pre> <p>Get a <code>helics.HelicsPublication</code> from a name.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The value <code>helics.HelicsFederate</code> to use to get the publication.</li> <li><code>name</code> - The name of the publication.</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetPublicationByIndex","title":"helicsFederateGetPublicationByIndex","text":"<pre><code>def helicsFederateGetPublicationByIndex(fed: HelicsFederate, index: int) -&gt; HelicsPublication\n</code></pre> <p>Get a publication by its index, typically already created via registerInterfaces file or something of that nature.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>index</code> - The index of the publication to get.</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetPublicationCount","title":"helicsFederateGetPublicationCount","text":"<pre><code>def helicsFederateGetPublicationCount(fed: HelicsFederate) -&gt; int\n</code></pre> <p>Get the number of publications in a federate.</p> <p>Returns: (-1) if fed was not a valid federate otherwise returns the number of publications.</p>"},{"location":"api/capi-py/#helicsFederateGetState","title":"helicsFederateGetState","text":"<pre><code>def helicsFederateGetState(fed: HelicsFederate) -&gt; HelicsFederateState\n</code></pre> <p>Get the current state of a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to query.</li> </ul> <p>Returns: <code>helics.HelicsFederateState</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetSubscription","title":"helicsFederateGetSubscription","text":"<pre><code>def helicsFederateGetSubscription(fed: HelicsFederate, name: str) -&gt; HelicsInput\n</code></pre> <p>Get an input object from a subscription target.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The value <code>helics.HelicsFederate</code> to use to get the publication.</li> <li><code>name</code> - The name of the publication that a subscription is targeting.</li> </ul> <p>Returns: <code>helics.HelicsInput</code></p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateGetTag","title":"helicsFederateGetTag","text":"<pre><code>def helicsFederateGetTag(fed: HelicsFederate, tagname: str)\n</code></pre> <p>Get the data in a specified tag of a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code>: The federate object to query.</li> <li><code>tagname</code>: The name of the tag to query.</li> </ul> <p>Returns</p> <p>A string with the tag data.</p>"},{"location":"api/capi-py/#helicsFederateGetTimeProperty","title":"helicsFederateGetTimeProperty","text":"<pre><code>def helicsFederateGetTimeProperty(fed: HelicsFederate, time_property: int) -&gt; HelicsTime\n</code></pre> <p>Get the current value of a time based property in a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate query.</li> <li><code>time_property</code> - The property to query.</li> </ul> <p>Returns: <code>helics.HelicsTime</code>.</p>"},{"location":"api/capi-py/#helicsFederateGetTranslator","title":"helicsFederateGetTranslator","text":"<pre><code>def helicsFederateGetTranslator(fed: HelicsFederate, name: str) -&gt; HelicsTranslator\n</code></pre> <p>Get a translator by its name, typically already created via registerInterfaces file or something of that nature.</p> <ul> <li><code>fed</code> The federate object to use to get the translator.</li> <li><code>name</code> The name of the translator.</li> </ul> <p>Returns: A <code>helics.HelicsTranslator</code> object</p>"},{"location":"api/capi-py/#helicsFederateGetTranslatorByIndex","title":"helicsFederateGetTranslatorByIndex","text":"<pre><code>def helicsFederateGetTranslatorByIndex(fed: HelicsFederate, index: int) -&gt; HelicsTranslator\n</code></pre> <p>Get a translator by its name, typically already created via registerInterfaces file or something of that nature.</p> <ul> <li><code>fed</code> The federate object to use to get the translator.</li> <li><code>index</code> The index of the translator.</li> </ul> <p>Returns: A <code>helics.HelicsTranslator</code> object</p>"},{"location":"api/capi-py/#helicsFederateGetTranslatorCount","title":"helicsFederateGetTranslatorCount","text":"<pre><code>def helicsFederateGetTranslatorCount(fed: HelicsFederate) -&gt; int\n</code></pre> <p>Get the number of translators registered through a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate object to use to get the translator.</li> </ul> <p>Returns: A count of the number of translators registered through a federate.</p>"},{"location":"api/capi-py/#helicsFederateGlobalError","title":"helicsFederateGlobalError","text":"<pre><code>def helicsFederateGlobalError(fed: HelicsFederate, error_code: int, error_string: str)\n</code></pre> <p>Generate a global error from a federate. A global error halts the co-simulation completely.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to create an error in.</li> <li><code>error_code</code> - The integer code for the error.</li> <li><code>error_string</code> - A string describing the error.</li> </ul>"},{"location":"api/capi-py/#helicsFederateHasMessage","title":"helicsFederateHasMessage","text":"<pre><code>def helicsFederateHasMessage(fed: HelicsFederate) -&gt; bool\n</code></pre> <p>Check if the federate has any outstanding messages.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to check.</li> </ul> <p>Returns: <code>True</code> if the federate has a message waiting, <code>False</code> otherwise.</p>"},{"location":"api/capi-py/#helicsFederateInfoClone","title":"helicsFederateInfoClone","text":"<pre><code>def helicsFederateInfoClone(fedInfo: HelicsFederateInfo) -&gt; HelicsFederateInfo\n</code></pre> <p>Create <code>helics.HelicsFederateInfo</code> from an existing one and clone the information.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - A federateInfo object to duplicate.</li> </ul> <p>Returns: <code>helics.HelicsFederateInfo</code>.</p>"},{"location":"api/capi-py/#helicsFederateInfoFree","title":"helicsFederateInfoFree","text":"<pre><code>def helicsFederateInfoFree(fedInfo: HelicsFederateInfo)\n</code></pre> <p>Delete the memory associated with <code>helics.HelicsFederateInfo</code>.</p>"},{"location":"api/capi-py/#helicsFederateInfoLoadFromArgs","title":"helicsFederateInfoLoadFromArgs","text":"<pre><code>def helicsFederateInfoLoadFromArgs(fedInfo: HelicsFederateInfo, arguments: List[str])\n</code></pre> <p>Load federate info from command line arguments.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - A federateInfo object.</li> <li><code>argc</code> - The number of command line arguments.</li> <li><code>argv</code> - An array of strings from the command line.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoLoadFromString","title":"helicsFederateInfoLoadFromString","text":"<pre><code>def helicsFederateInfoLoadFromString(fedInfo: HelicsFederateInfo, arguments: str)\n</code></pre> <p>Load federate info from command line arguments contained in a string.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - A federateInfo object.</li> <li><code>arguments</code> - Command line argument specified in a string</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetBroker","title":"helicsFederateInfoSetBroker","text":"<pre><code>def helicsFederateInfoSetBroker(fedInfo: HelicsFederateInfo, broker_string: str)\n</code></pre> <p>Set the name or connection information for a broker. This is only used if the core is automatically created, the broker information will be transferred to the core for connection.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>broker_string</code> - A string which defines the connection information for a broker either a name or an address.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetBrokerInitString","title":"helicsFederateInfoSetBrokerInitString","text":"<pre><code>def helicsFederateInfoSetBrokerInitString(fedInfo: HelicsFederateInfo, broker_init_string: str)\n</code></pre> <p>Set the initialization string that a core will pass to a generated broker usually in the form of command line arguments.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>broker_init_string</code> - A string with command line arguments for a generated broker.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetBrokerKey","title":"helicsFederateInfoSetBrokerKey","text":"<pre><code>def helicsFederateInfoSetBrokerKey(fedInfo: HelicsFederateInfo, broker_key: str)\n</code></pre> <p>Set the key for a broker connection. This is only used if the core is automatically created, the broker information will be transferred to the core for connection.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>broker_key</code> - A string containing a key for the broker to connect.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetBrokerPort","title":"helicsFederateInfoSetBrokerPort","text":"<pre><code>def helicsFederateInfoSetBrokerPort(fedInfo: HelicsFederateInfo, broker_port: Union[int, str])\n</code></pre> <p>Set the port to use for the broker. This is only used if the core is automatically created, the broker information will be transferred to the core for connection. This will only be useful for network broker connections.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>broker_port</code> - The integer port number to use for connection with a broker.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetCoreInitString","title":"helicsFederateInfoSetCoreInitString","text":"<pre><code>def helicsFederateInfoSetCoreInitString(fedInfo: HelicsFederateInfo, core_init_string: str)\n</code></pre> <p>Set the initialization string for the core usually in the form of command line arguments.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>core_init_string</code> - A string containing command line arguments to be passed to the core.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetCoreName","title":"helicsFederateInfoSetCoreName","text":"<pre><code>def helicsFederateInfoSetCoreName(fedInfo: HelicsFederateInfo, core_name: str)\n</code></pre> <p>Set the name of the core to link to for a federate.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>core_name</code> - The identifier for a core to link to.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetCoreType","title":"helicsFederateInfoSetCoreType","text":"<pre><code>def helicsFederateInfoSetCoreType(fedInfo: HelicsFederateInfo, core_type: HelicsCoreType)\n</code></pre> <p>Set the core type by integer code. Valid values available by definitions in <code>api-data.h</code>.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>core_type</code> - An numerical code for a core type see <code>helics.HelicsCoreType</code>.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetCoreTypeFromString","title":"helicsFederateInfoSetCoreTypeFromString","text":"<pre><code>def helicsFederateInfoSetCoreTypeFromString(fedInfo: HelicsFederateInfo, core_type: str)\n</code></pre> <p>Set the core type from a string.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>core_type</code> - A string naming a core type.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetFlagOption","title":"helicsFederateInfoSetFlagOption","text":"<pre><code>def helicsFederateInfoSetFlagOption(fedInfo: HelicsFederateInfo, flag: Union[int, HelicsFederateFlag, HelicsFlag], value: bool)\n</code></pre> <p>Set a flag in the info structure Valid flags are available <code>helics.HelicsFederateFlag</code>.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>flag</code> - A numerical index for a flag.</li> <li><code>value</code> - The desired value of the flag <code>True</code> or <code>False</code>.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetIntegerProperty","title":"helicsFederateInfoSetIntegerProperty","text":"<pre><code>def helicsFederateInfoSetIntegerProperty(fedInfo: HelicsFederateInfo, property: HelicsProperty, value: int)\n</code></pre> <p>Set an integer property for a federate. Set known properties.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federateInfo object to alter.</li> <li><code>property</code> - <code>helics.HelicsProperty</code>.</li> <li><code>value</code> - The value to set the property to.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetLocalPort","title":"helicsFederateInfoSetLocalPort","text":"<pre><code>def helicsFederateInfoSetLocalPort(fedInfo: HelicsFederateInfo, local_port: Union[int, str])\n</code></pre> <p>Set the local port to use. This is only used if the core is automatically created, the port information will be transferred to the core for connection.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>local_port</code> - A string with the port information to use as the local server port can be a number or \u201cauto\u201d or \u201cos_local\u201d.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetSeparator","title":"helicsFederateInfoSetSeparator","text":"<pre><code>def helicsFederateInfoSetSeparator(fedInfo: HelicsFederateInfo, separator: str)\n</code></pre> <p>Set the separator character in the info structure. The separator character is the separation character for local publications/endpoints in creating their global name. For example if the separator character is \u2018/\u2019 then a local endpoint would have a globally reachable name of fedName/localName.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>separator</code> - The character to use as a separator.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInfoSetTimeProperty","title":"helicsFederateInfoSetTimeProperty","text":"<pre><code>def helicsFederateInfoSetTimeProperty(fedInfo: HelicsFederateInfo, time_property: HelicsProperty, value: HelicsTime)\n</code></pre> <p>Set the output delay for a federate.</p> <p>Parameters</p> <ul> <li><code>fedInfo</code> - The federate info object to alter.</li> <li><code>time_property</code> - An integer representation of the time based property to set see <code>helics.HelicsProperty</code>.</li> <li><code>propertyValue</code> - The value of the property to set the timeProperty to.</li> </ul>"},{"location":"api/capi-py/#helicsFederateInitializingEntryCallback","title":"helicsFederateInitializingEntryCallback","text":"<pre><code>def helicsFederateInitializingEntryCallback(fed: HelicsFederate, initializing_entry, user_data)\n</code></pre> <p>Set callback for the entry to initializingMode.</p> <p>This callback will be executed when the initializingMode is entered</p>"},{"location":"api/capi-py/#parameters_14","title":"Parameters","text":"<ul> <li><code>fed</code>: The federate to set the callback for.</li> <li><code>initializing_entry</code>: A callback with signature void(HelicsBool iterating, void *user_data); the bool parameter is set to true if the entry is iterative, therefore the first time this is called the bool is false. all subsequent times it is false.</li> <li><code>user_data</code>: A pointer to user data that is passed to the function when executing.</li> </ul>"},{"location":"api/capi-py/#helicsFederateIsAsyncOperationCompleted","title":"helicsFederateIsAsyncOperationCompleted","text":"<pre><code>def helicsFederateIsAsyncOperationCompleted(fed: HelicsFederate) -&gt; bool\n</code></pre> <p>Check if the current Asynchronous operation has completed.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to operate on.</li> </ul> <p>Returns: <code>True</code> if current operation has completed, else <code>False</code>.</p>"},{"location":"api/capi-py/#helicsFederateIsProtected","title":"helicsFederateIsProtected","text":"<pre><code>def helicsFederateIsProtected(fed_name: str) -&gt; bool\n</code></pre> <p>Checks if an existing federate is protected</p> <p>Parameters</p> <ul> <li><code>fedName</code>: The name of an existing HelicsFederate.</li> </ul> <p>Returns: boolean if existing federate is protected</p>"},{"location":"api/capi-py/#helicsFederateIsValid","title":"helicsFederateIsValid","text":"<pre><code>def helicsFederateIsValid(fed: HelicsFederate) -&gt; bool\n</code></pre> <p>Check if a <code>helics.HelicsFederate</code> is valid.</p> <p>Returns: <code>True</code> if the federate is a valid active federate, <code>False</code> otherwise.</p>"},{"location":"api/capi-py/#helicsFederateLocalError","title":"helicsFederateLocalError","text":"<pre><code>def helicsFederateLocalError(fed: HelicsFederate, error_code: int, error_string: str)\n</code></pre> <p>Generate a local error in a federate. This will propagate through the co-simulation but not necessarily halt the co-simulation, it has a similar effect to finalize but does allow some interaction with a core for a brief time.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to create an error in.</li> <li><code>error_code</code> - The integer code for the error.</li> <li><code>error_string</code> - A string describing the error.</li> </ul>"},{"location":"api/capi-py/#helicsFederateLogDebugMessage","title":"helicsFederateLogDebugMessage","text":"<pre><code>def helicsFederateLogDebugMessage(fed: HelicsFederate, log_message: str)\n</code></pre> <p>Log a debug message through a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to log the debug message through.</li> <li><code>log_message</code> - The message to put in the log.</li> </ul>"},{"location":"api/capi-py/#helicsFederateLogErrorMessage","title":"helicsFederateLogErrorMessage","text":"<pre><code>def helicsFederateLogErrorMessage(fed: HelicsFederate, log_message: str)\n</code></pre> <p>Log an error message through a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to log the error message through.</li> <li><code>log_message</code> - The message to put in the log.</li> </ul>"},{"location":"api/capi-py/#helicsFederateLogInfoMessage","title":"helicsFederateLogInfoMessage","text":"<pre><code>def helicsFederateLogInfoMessage(fed: HelicsFederate, log_message: str)\n</code></pre> <p>Log an info message through a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to log the info message through.</li> <li><code>log_message</code> - The message to put in the log.</li> </ul>"},{"location":"api/capi-py/#helicsFederateLogLevelMessage","title":"helicsFederateLogLevelMessage","text":"<pre><code>def helicsFederateLogLevelMessage(fed: HelicsFederate, log_level: HelicsLogLevel, log_message: str)\n</code></pre> <p>Log a message through a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to log the message through.</li> <li><code>log_level</code> - The level of the message to log see <code>helics.HelicsLogLevel</code>.</li> <li><code>log_message</code> - The message to put in the log.</li> </ul>"},{"location":"api/capi-py/#helicsFederateLogWarningMessage","title":"helicsFederateLogWarningMessage","text":"<pre><code>def helicsFederateLogWarningMessage(fed: HelicsFederate, log_message: str)\n</code></pre> <p>Log a warning message through a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to log the warning message through.</li> <li><code>log_message</code> - The message to put in the log.</li> </ul>"},{"location":"api/capi-py/#helicsFederatePendingMessageCount","title":"helicsFederatePendingMessageCount","text":"<pre><code>def helicsFederatePendingMessageCount(fed: HelicsFederate) -&gt; int\n</code></pre> <p>Returns the number of pending receives for the specified destination endpoint.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to get the number of waiting messages from.</li> </ul>"},{"location":"api/capi-py/#helicsFederatePendingMessages","title":"helicsFederatePendingMessages","text":"<pre><code>def helicsFederatePendingMessages(fed: HelicsFederate) -&gt; int\n</code></pre> <p>Returns the number of pending receives for the specified destination endpoint.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to get the number of waiting messages from.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsFederateProcessCommunications","title":"helicsFederateProcessCommunications","text":"<pre><code>def helicsFederateProcessCommunications(fed: HelicsFederate, period: HelicsTime)\n</code></pre> <p>Tell helics to process internal communications for a period of time.</p> <p>Parameters</p> <ul> <li><code>fed</code>: The federate to tell to process.</li> <li><code>period</code>: The length of time to process communications and then return control.</li> </ul>"},{"location":"api/capi-py/#helicsFederateProtect","title":"helicsFederateProtect","text":"<pre><code>def helicsFederateProtect(fed_name: str)\n</code></pre> <p>Protect a federate from finalizing and closing if all references go out of scope</p> <p>This function allows a federate to be retrieved on demand, it must be explicitly close later otherwise it will be destroyed when the library is closed</p> <p>Parameters</p> <ul> <li><code>fedName</code>: The name of an existing HelicsFederate.</li> </ul>"},{"location":"api/capi-py/#helicsFederatePublishJSON","title":"helicsFederatePublishJSON","text":"<pre><code>def helicsFederatePublishJSON(fed: HelicsFederate, json: str)\n</code></pre> <p>Publish data contained in a JSON file or string.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The value <code>helics.HelicsFederate</code> through which to publish the data.</li> <li><code>json</code> - The publication file name or literal JSON data string.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRegisterCloningFilter","title":"helicsFederateRegisterCloningFilter","text":"<pre><code>def helicsFederateRegisterCloningFilter(fed: HelicsFederate, name: str) -&gt; HelicsCloningFilter\n</code></pre> <p>Create a cloning Filter on the specified federate. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to register through.</li> <li><code>name</code> - The name of the filter (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsCloningFilter</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterEndpoint","title":"helicsFederateRegisterEndpoint","text":"<pre><code>def helicsFederateRegisterEndpoint(fed: HelicsFederate, name: str, type: str = \"\") -&gt; HelicsEndpoint\n</code></pre> <p>MessageFederate Calls. Create an endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate.</li> <li><code>name</code> - The identifier for the endpoint. This will be prepended with the federate name for the global identifier.</li> <li><code>type</code> - A string describing the expected type of the publication (optional).</li> </ul> <p>Returns: <code>helics.HelicsEndpoint</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterFilter","title":"helicsFederateRegisterFilter","text":"<pre><code>def helicsFederateRegisterFilter(fed: HelicsFederate, type: HelicsFilterType, name: str) -&gt; HelicsFilter\n</code></pre> <p>Create a source Filter on the specified federate. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to register through.</li> <li><code>type</code> - The type of filter to create <code>helics.HelicsFilterType</code>.</li> <li><code>name</code> - The name of the filter (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsFilter</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterFromPublicationJSON","title":"helicsFederateRegisterFromPublicationJSON","text":"<pre><code>def helicsFederateRegisterFromPublicationJSON(fed: HelicsFederate, json: str)\n</code></pre> <p>Register the publications via JSON publication string.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The value <code>helics.HelicsFederate</code> to use to register the publications.</li> <li><code>json</code> - The JSON publication string.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalCloningFilter","title":"helicsFederateRegisterGlobalCloningFilter","text":"<pre><code>def helicsFederateRegisterGlobalCloningFilter(fed: HelicsFederate, name: str) -&gt; HelicsCloningFilter\n</code></pre> <p>Create a global cloning Filter on the specified federate. Cloning filters copy a message and send it to multiple locations, source and destination can be added through other functions.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to register through.</li> <li><code>name</code> - The name of the filter (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsFilter</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalEndpoint","title":"helicsFederateRegisterGlobalEndpoint","text":"<pre><code>def helicsFederateRegisterGlobalEndpoint(fed: HelicsFederate, name: str, type: str = \"\") -&gt; HelicsEndpoint\n</code></pre> <p>Create an endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate.</li> <li><code>name</code> - The identifier for the endpoint.handle, the given name is the global identifier.</li> <li><code>type</code> - A string describing the expected type of the publication (optional).</li> </ul> <p>Returns: <code>helics.HelicsEndpoint</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalFilter","title":"helicsFederateRegisterGlobalFilter","text":"<pre><code>def helicsFederateRegisterGlobalFilter(fed: HelicsFederate, type: HelicsFilterType, name: str) -&gt; HelicsFilter\n</code></pre> <p>Create a global source filter through a federate. Filters can be created through a federate or a core.handle, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to register through.</li> <li><code>type</code> - The type of filter to create <code>helics.HelicsFilterType</code>.</li> <li><code>name</code> - The name of the filter (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsFilter</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalInput","title":"helicsFederateRegisterGlobalInput","text":"<pre><code>def helicsFederateRegisterGlobalInput(fed: HelicsFederate, name: str, type: HelicsDataType, units: str = \"\") -&gt; HelicsInput\n</code></pre> <p>Register a global named input. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>name</code> - The identifier for the publication.</li> <li><code>type</code> - A code identifying the type of the input see <code>helics.HelicsDataType</code> for available options.</li> <li><code>units</code> - A string listing the units of the subscription (optional).</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalPublication","title":"helicsFederateRegisterGlobalPublication","text":"<pre><code>def helicsFederateRegisterGlobalPublication(fed: HelicsFederate, name: str, type: HelicsDataType, units: str = \"\") -&gt; HelicsPublication\n</code></pre> <p>Register a global named publication with an arbitrary type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>name</code> - The identifier for the publication.</li> <li><code>type</code> - A code identifying the type of the input see <code>helics.HelicsDataType</code> for available options.</li> <li><code>units</code> - A string listing the units of the subscription (optional).</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalTargetedEndpoint","title":"helicsFederateRegisterGlobalTargetedEndpoint","text":"<pre><code>def helicsFederateRegisterGlobalTargetedEndpoint(fed: HelicsFederate, name: str, type: str = \"\")\n</code></pre> <p>Create a globally targeted endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints.</p>"},{"location":"api/capi-py/#parameters_15","title":"Parameters","text":"<ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate.</li> <li><code>name</code> - The identifier for the endpoint. This will be prepended with the federate name for the global identifier.</li> <li><code>type</code> - A string describing the expected type of the publication (optional). Returns: <code>helics.HelicsEndpoint</code>.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalTranslator","title":"helicsFederateRegisterGlobalTranslator","text":"<pre><code>def helicsFederateRegisterGlobalTranslator(fed: HelicsFederate, type: HelicsTranslatorTypes, name: str) -&gt; HelicsTranslator\n</code></pre> <p>Create a source Translator on the specified federate.</p> <p>Translators can be created through a federate or a core, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to register through.</li> <li><code>type</code> - The type of translator to create /ref HelicsTranslatorTypes.</li> <li><code>name</code> - The name of the translator (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsTranslator</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalTypeInput","title":"helicsFederateRegisterGlobalTypeInput","text":"<pre><code>def helicsFederateRegisterGlobalTypeInput(fed: HelicsFederate, name: str, type: str, units: str = \"\") -&gt; HelicsInput\n</code></pre> <p>Register a global publication with an arbitrary type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>name</code> - The identifier for the publication.</li> <li><code>type</code> - A string defining the type of the input.</li> <li><code>units</code> - A string listing the units of the subscription (optional).</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterGlobalTypePublication","title":"helicsFederateRegisterGlobalTypePublication","text":"<pre><code>def helicsFederateRegisterGlobalTypePublication(fed: HelicsFederate, name: str, type: str, units: str = \"\") -&gt; HelicsPublication\n</code></pre> <p>Register a global publication with a defined type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>name</code> - The identifier for the publication.</li> <li><code>type</code> - A string describing the expected type of the publication.</li> <li><code>units</code> - A string listing the units of the subscription (optional).</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterInput","title":"helicsFederateRegisterInput","text":"<pre><code>def helicsFederateRegisterInput(fed: HelicsFederate, name: str, type: HelicsDataType, units: str = \"\") -&gt; HelicsInput\n</code></pre> <p>Register a named input. The input becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions, inputs, and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create an input.</li> <li><code>name</code> - The identifier for the publication the global input name will be prepended with the federate name.</li> <li><code>type</code> - A code identifying the type of the input see <code>helics.HelicsDataType</code> for available options.</li> <li><code>units</code> - A string listing the units of the input (optional).</li> </ul> <p>Returns: <code>helics.HelicsInput</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterInterfaces","title":"helicsFederateRegisterInterfaces","text":"<pre><code>def helicsFederateRegisterInterfaces(fed: HelicsFederate, file: str)\n</code></pre> <p>Load interfaces from a file.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to which to load interfaces.</li> <li><code>file</code> - The name of a file to load the interfaces from either JSON, or TOML.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRegisterPublication","title":"helicsFederateRegisterPublication","text":"<pre><code>def helicsFederateRegisterPublication(fed: HelicsFederate, name: str, type: HelicsDataType, units: str = \"\") -&gt; HelicsPublication\n</code></pre> <p>Register a publication with a known type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>name</code> - The identifier for the publication the global publication name will be prepended with the federate name.</li> <li><code>type</code> - A code identifying the type of the input see <code>helics.HelicsDataType</code> for available options.</li> <li><code>units</code> - A string listing the units of the subscription (optional).</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterSubscription","title":"helicsFederateRegisterSubscription","text":"<pre><code>def helicsFederateRegisterSubscription(fed: HelicsFederate, name: str, units: str = \"\") -&gt; HelicsInput\n</code></pre> <p>Functions related to value federates for the C api. Create a subscription. The subscription becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a subscription, must have been created with <code>helics.helicsCreateValueFederate</code> or <code>helics.helicsCreateCombinationFederate</code>.</li> <li><code>name</code> - The identifier matching a publication to get a subscription for.</li> <li><code>units</code> - A string listing the units of the subscription (optional).</li> </ul> <p>Returns: <code>helics.HelicsSubscription</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterTargetedEndpoint","title":"helicsFederateRegisterTargetedEndpoint","text":"<pre><code>def helicsFederateRegisterTargetedEndpoint(fed: HelicsFederate, name: str, type: str = \"\")\n</code></pre> <p>Create an targeted endpoint. The endpoint becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for endpoints.</p>"},{"location":"api/capi-py/#parameters_16","title":"Parameters","text":"<ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create an endpoint must have been created with helicsCreateMessageFederate or helicsCreateCombinationFederate.</li> <li><code>name</code> - The identifier for the endpoint. This will be prepended with the federate name for the global identifier.</li> <li><code>type</code> - A string describing the expected type of the publication (optional). Returns: <code>helics.HelicsEndpoint</code>.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRegisterTranslator","title":"helicsFederateRegisterTranslator","text":"<pre><code>def helicsFederateRegisterTranslator(fed: HelicsFederate, type: HelicsTranslatorTypes, name: str) -&gt; HelicsTranslator\n</code></pre> <p>Create a source Translator on the specified federate.</p> <p>Translators can be created through a federate or a core, linking through a federate allows a few extra features of name matching to function on the federate interface but otherwise equivalent behavior</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to register through.</li> <li><code>type</code> - The type of translator to create /ref HelicsTranslatorTypes.</li> <li><code>name</code> - The name of the translator (can be NULL).</li> </ul> <p>Returns: <code>helics.HelicsTranslator</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterTypeInput","title":"helicsFederateRegisterTypeInput","text":"<pre><code>def helicsFederateRegisterTypeInput(fed: HelicsFederate, name: str, type: str, units: str = \"\") -&gt; HelicsInput\n</code></pre> <p>Register an input with a defined type. The input becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions, inputs, and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create an input.</li> <li><code>name</code> - The identifier for the input.</li> <li><code>type</code> - A string describing the expected type of the input.</li> <li><code>units</code> - A string listing the units of the input (optional).</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateRegisterTypePublication","title":"helicsFederateRegisterTypePublication","text":"<pre><code>def helicsFederateRegisterTypePublication(fed: HelicsFederate, name: str, type: str, units: str = \"\") -&gt; HelicsPublication\n</code></pre> <p>Register a publication with a defined type. The publication becomes part of the federate and is destroyed when the federate is freed so there are no separate free functions for subscriptions and publications.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> in which to create a publication.</li> <li><code>name</code> - The identifier for the publication.</li> <li><code>type</code> - A string labeling the type of the publication.</li> <li><code>units</code> - A string listing the units of the subscription (optional).</li> </ul> <p>Returns: <code>helics.HelicsPublication</code>.</p>"},{"location":"api/capi-py/#helicsFederateRequestNextStep","title":"helicsFederateRequestNextStep","text":"<pre><code>def helicsFederateRequestNextStep(fed: HelicsFederate) -&gt; HelicsTime\n</code></pre> <p>Request the next time step for federate execution. Feds should have setup the period or <code>minDelta</code> for this to work well but it will request the next time step which is the current time plus the minimum time step.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> </ul> <p>Returns: <code>helics.HelicsTime</code>.</p>"},{"location":"api/capi-py/#helicsFederateRequestTime","title":"helicsFederateRequestTime","text":"<pre><code>def helicsFederateRequestTime(fed: HelicsFederate, request_time: HelicsTime) -&gt; HelicsTime\n</code></pre> <p>Request the next time for federate execution.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> <li><code>request_time</code> - The next requested time.</li> </ul> <p>Returns: <code>helics.HelicsTime</code>.</p>"},{"location":"api/capi-py/#helicsFederateRequestTimeAdvance","title":"helicsFederateRequestTimeAdvance","text":"<pre><code>def helicsFederateRequestTimeAdvance(fed: HelicsFederate, time_delta: HelicsTime) -&gt; HelicsTime\n</code></pre> <p>Request the next time for federate execution.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> <li><code>time_delta</code> - The requested amount of time to advance.</li> </ul> <p>Returns: <code>helics.HelicsTime</code>.</p>"},{"location":"api/capi-py/#helicsFederateRequestTimeAsync","title":"helicsFederateRequestTimeAsync","text":"<pre><code>def helicsFederateRequestTimeAsync(fed: HelicsFederate, request_time: HelicsTime)\n</code></pre> <p>Request the next time for federate execution in an asynchronous call. Call <code>helics.helicsFederateRequestTimeComplete</code> to finish the call.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> <li><code>request_time</code> - The next requested time.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRequestTimeComplete","title":"helicsFederateRequestTimeComplete","text":"<pre><code>def helicsFederateRequestTimeComplete(fed: HelicsFederate) -&gt; HelicsTime\n</code></pre> <p>Complete an asynchronous requestTime call.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRequestTimeIterative","title":"helicsFederateRequestTimeIterative","text":"<pre><code>def helicsFederateRequestTimeIterative(\n    fed: HelicsFederate, request_time: HelicsTime, iterate: HelicsIterationRequest\n) -&gt; Tuple[HelicsTime, HelicsIterationResult]\n</code></pre> <p>Request an iterative time. This call allows for finer grain control of the iterative process than <code>helics.helicsFederateRequestTime</code>. It takes a time and iteration request, and returns a time and iteration status.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> <li><code>request_time</code> - The next desired time.</li> <li><code>iterate</code> - <code>helics.HelicsIterationRequest</code>, i.e. the requested iteration mode.</li> </ul> <p>Returns: <code>(helics.HelicsTime, helics.HelicsIterationResult)</code>.</p>"},{"location":"api/capi-py/#helicsFederateRequestTimeIterativeAsync","title":"helicsFederateRequestTimeIterativeAsync","text":"<pre><code>def helicsFederateRequestTimeIterativeAsync(fed: HelicsFederate, request_time: HelicsTime, iterate: HelicsIterationRequest)\n</code></pre> <p>Request an iterative time through an asynchronous call. This call allows for finer grain control of the iterative process than <code>helics.helicsFederateRequestTime</code>. It takes a time and iteration request, and returns a time and iteration status. Call <code>helics.helicsFederateRequestTimeIterativeComplete</code> to finish the process.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> <li><code>request_time</code> - The next desired time.</li> <li><code>iterate</code> - <code>helics.HelicsIterationRequest</code>, i.e. the requested iteration mode.</li> </ul>"},{"location":"api/capi-py/#helicsFederateRequestTimeIterativeComplete","title":"helicsFederateRequestTimeIterativeComplete","text":"<pre><code>def helicsFederateRequestTimeIterativeComplete(fed: HelicsFederate) -&gt; Tuple[HelicsTime, HelicsIterationResult]\n</code></pre> <p>Complete an iterative time request asynchronous call.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to make the request of.</li> </ul> <p>Returns: The iteration specification of the result.</p>"},{"location":"api/capi-py/#helicsFederateSendCommand","title":"helicsFederateSendCommand","text":"<pre><code>def helicsFederateSendCommand(fed: HelicsFederate, target: str, command: str)\n</code></pre>"},{"location":"api/capi-py/#helicsFederateSetFlagOption","title":"helicsFederateSetFlagOption","text":"<pre><code>def helicsFederateSetFlagOption(fed: HelicsFederate, flag: Union[int, HelicsFederateFlag, HelicsFlag], value: bool)\n</code></pre> <p>Set a flag for the federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to alter a flag for.</li> <li><code>flag</code> - The flag to change.</li> <li><code>value</code> - The new value of the flag. 0 for false, !=0 for true.</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetGlobal","title":"helicsFederateSetGlobal","text":"<pre><code>def helicsFederateSetGlobal(fed: HelicsFederate, name: str, value: str)\n</code></pre> <p>Set a federation global value through a federate. This overwrites any previous value for this name.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to set the global through.</li> <li><code>name</code> - The name of the global to set.</li> <li><code>value</code> - The value of the global.</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetIntegerProperty","title":"helicsFederateSetIntegerProperty","text":"<pre><code>def helicsFederateSetIntegerProperty(fed: HelicsFederate, property: HelicsProperty, value: int)\n</code></pre> <p>Set an integer based property of a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to change the property for.</li> <li><code>property</code> - <code>helics.HelicsProperty</code>.</li> <li><code>value</code> - The value of the property.</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetLogFile","title":"helicsFederateSetLogFile","text":"<pre><code>def helicsFederateSetLogFile(fed: HelicsFederate, log_file: str)\n</code></pre> <p>Set the logging file for a federate (actually on the core associated with a federate).</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate to set the log file for.</li> <li><code>log_file</code> - The name of the log file.</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetLoggingCallback","title":"helicsFederateSetLoggingCallback","text":"<pre><code>def helicsFederateSetLoggingCallback(fed: HelicsFederate, logger, user_data)\n</code></pre> <p>Set the logging callback for a <code>helics.HelicsFederate</code></p> <p>Add a logging callback function for the C. The logging callback will be called when a message flows into a <code>helics.HelicsFederate</code> from the core or from a federate.</p>"},{"location":"api/capi-py/#parameters_17","title":"Parameters","text":"<ul> <li><code>fed</code>: the <code>helics.HelicsFederate</code> that is created with <code>helics.helicsCreateValueFederate</code>, <code>helics.helicsCreateMessageFederate</code> or <code>helics.helicsCreateCombinationFederate</code></li> <li><code>logger</code>: a callback with signature void(int, const char *, const char *, void *); the function arguments are loglevel, an identifier string, and a message string, and a pointer to user data</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetQueryCallback","title":"helicsFederateSetQueryCallback","text":"<pre><code>def helicsFederateSetQueryCallback(fed: HelicsFederate, query, user_data)\n</code></pre> <p>Set the callback for queries executed against a <code>helics.HelicsFederate</code></p> <p>Add a logging callback function for the C. The logging callback will be called when a message flows from <code>helics.HelicsBroker</code> or from the core.</p>"},{"location":"api/capi-py/#parameters_18","title":"Parameters","text":"<ul> <li><code>fed</code>: the <code>helics.HelicsFederate</code> that is created with <code>helics.helicsCreateValueFederate</code></li> <li><code>query</code>: a callback with signature const char *(const char *query, int querySize, HelicsQueryBuffer buffer, void *user_data); The function arguments include the query string requesting an answer along with its size; the string is not guaranteed to be null terminated. HelicsQueryBuffer is the buffer intended to filled out by the userCallback. The buffer can be empty if the query is not recognized and HELICS will generate the appropriate response. The buffer is used to ensure memory ownership separation between user code and HELICS code. The HelicsQueryBufferFill method can be used to load a string into the buffer.</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetSeparator","title":"helicsFederateSetSeparator","text":"<pre><code>def helicsFederateSetSeparator(fed: HelicsFederate, separator: str)\n</code></pre> <p>Set the separator character in a federate. The separator character is the separation character for local publications/endpoints in creating their global name. For example if the separator character is \u2018/\u2019 then a local endpoint would have a globally reachable name of fedName/localName.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The federate info object to alter.</li> <li><code>separator</code> - The character to use as a separator.</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetStateChangeCallback","title":"helicsFederateSetStateChangeCallback","text":"<pre><code>def helicsFederateSetStateChangeCallback(fed: HelicsFederate, state_changer, user_data)\n</code></pre> <p>Set the callback for a <code>helics.HelicsFederate</code> state change</p> <p>Add a logging callback function for the C. The logging callback will be called when a message flows into a <code>helics.HelicsFederate</code> from the core or from a federate.</p>"},{"location":"api/capi-py/#parameters_19","title":"Parameters","text":"<ul> <li><code>fed</code>: the <code>helics.HelicsFederate</code> that is created with <code>helics.helicsCreateValueFederate</code>, <code>helics.helicsCreateMessageFederate</code> or <code>helics.helicsCreateCombinationFederate</code></li> <li><code>state_changer</code>: a callback with signature void(HelicsFederateState newState, HelicsFederateState oldState, void *user_data);</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetTag","title":"helicsFederateSetTag","text":"<pre><code>def helicsFederateSetTag(fed: HelicsFederate, tagname: str, tagvalue: str)\n</code></pre> <p>Set the data in a specific tag for a federate.</p> <p><code>fed</code>: The federate object to set a tag for. <code>tagname</code>: The name of the tag to set. <code>tagvalue</code>: The string value to associate with a tag.</p>"},{"location":"api/capi-py/#helicsFederateSetTimeProperty","title":"helicsFederateSetTimeProperty","text":"<pre><code>def helicsFederateSetTimeProperty(fed: HelicsFederate, time_property: int, time: HelicsTime)\n</code></pre> <p>Set a time based property for a federate.</p> <p>Parameters</p> <ul> <li><code>fed</code> - The <code>helics.HelicsFederate</code> to set the property for.</li> <li><code>time_property</code> - A integer code for a time property.</li> <li><code>time</code> - The requested value of the property.</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetTimeRequestEntryCallback","title":"helicsFederateSetTimeRequestEntryCallback","text":"<pre><code>def helicsFederateSetTimeRequestEntryCallback(fed: HelicsFederate, request_time, user_data)\n</code></pre> <p>Set the callback for the time request</p> <p>This callback will be executed when a valid time request is made. It is intended for the possibility of embedded data grabbers in a callback to simplify user code.</p>"},{"location":"api/capi-py/#parameters_20","title":"Parameters","text":"<ul> <li><code>fed</code>: the <code>helics.HelicsFederate</code> that is created with <code>helics.helicsCreateValueFederate</code></li> <li><code>request_time</code>: a callback with signature void(HelicsTime currentTime, HelicsTime requestTime, bool iterating, void *user_data); The function arguments are the current time value, the requested time value, a bool indicating that the time is iterating, and pointer to the user_data</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetTimeRequestReturnCallback","title":"helicsFederateSetTimeRequestReturnCallback","text":"<pre><code>def helicsFederateSetTimeRequestReturnCallback(fed: HelicsFederate, request_time_return, user_data)\n</code></pre> <p>Set the callback for the time request</p> <p>This callback will be executed when a valid time request is made. It is intended for the possibility of embedded data grabbers in a callback to simplify user code.</p>"},{"location":"api/capi-py/#parameters_21","title":"Parameters","text":"<ul> <li><code>fed</code>: the <code>helics.HelicsFederate</code> that is created with <code>helics.helicsCreateValueFederate</code></li> <li><code>request_time_return</code>: a callback with signature void(HelicsTime newTime, bool iterating, void *user_data); The function arguments are the current time value, the requested time value, a bool indicating that the time is iterating, and pointer to the user_data</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsFederateSetTimeUpdateCallback","title":"helicsFederateSetTimeUpdateCallback","text":"<pre><code>def helicsFederateSetTimeUpdateCallback(fed: HelicsFederate, time_update, user_data)\n</code></pre> <p>Set the callback for the time request</p> <p>This callback will be executed when a valid time request is made. It is intended for the possibility of embedded data grabbers in a callback to simplify user code.</p>"},{"location":"api/capi-py/#parameters_22","title":"Parameters","text":"<ul> <li><code>fed</code>: the <code>helics.HelicsFederate</code> that is created with <code>helics.helicsCreateValueFederate</code></li> <li><code>update_time</code>: a callback with signature void(HelicsTime newTime, bool iterating, void *user_data); The function arguments are the current time value, the requested time value, a bool indicating that the time is iterating, and pointer to the user_data</li> <li><code>user_data</code>: a pointer to user data that is passed to the function when executing</li> </ul>"},{"location":"api/capi-py/#helicsFederateUnProtect","title":"helicsFederateUnProtect","text":"<pre><code>def helicsFederateUnProtect(fed_name: str)\n</code></pre> <p>Remove the protection of an existing federate</p> <p>This function allows a federate to be retrieved on demand, it must be explicitly close later otherwise it will be destroyed when the library is closed</p> <p>Parameters</p> <ul> <li><code>fedName</code>: The name of an existing HelicsFederate.</li> </ul>"},{"location":"api/capi-py/#helicsFederateWaitCommand","title":"helicsFederateWaitCommand","text":"<pre><code>def helicsFederateWaitCommand(fed: HelicsFederate) -&gt; str\n</code></pre>"},{"location":"api/capi-py/#helicsFilterAddDeliveryEndpoint","title":"helicsFilterAddDeliveryEndpoint","text":"<pre><code>def helicsFilterAddDeliveryEndpoint(filter: HelicsFilter, delivery_endpoint: str)\n</code></pre> <p>Clone filter functions. Functions that manipulate cloning filters in some way. Add a delivery endpoint to a cloning filter. All cloned messages are sent to the delivery address(es).</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter.</li> <li><code>delivery_endpoint</code> - The name of the endpoint to deliver messages to.</li> </ul>"},{"location":"api/capi-py/#helicsFilterAddDestinationTarget","title":"helicsFilterAddDestinationTarget","text":"<pre><code>def helicsFilterAddDestinationTarget(filter: HelicsFilter, destination: str)\n</code></pre> <p>Add a destination target to a filter. All messages going to a destination are copied to the delivery address(es).</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter to add a destination target to.</li> <li><code>destination</code> - The name of the endpoint to add as a destination target.</li> </ul>"},{"location":"api/capi-py/#helicsFilterAddSourceTarget","title":"helicsFilterAddSourceTarget","text":"<pre><code>def helicsFilterAddSourceTarget(filter: HelicsFilter, source_name: str)\n</code></pre> <p>Add a source target to a filter. All messages coming from a source are copied to the delivery address(es).</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter.</li> <li><code>source_name</code> - The name of the endpoint to add as a source target.</li> </ul>"},{"location":"api/capi-py/#helicsFilterGetInfo","title":"helicsFilterGetInfo","text":"<pre><code>def helicsFilterGetInfo(filter: HelicsFilter) -&gt; str\n</code></pre> <p>Get the data in the info field of a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter.</li> </ul> <p>Returns: A string with the info field string.</p>"},{"location":"api/capi-py/#helicsFilterGetName","title":"helicsFilterGetName","text":"<pre><code>def helicsFilterGetName(filter: HelicsFilter) -&gt; str\n</code></pre> <p>Get the name of the filter and store in the given string.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter.</li> </ul> <p>Returns: A string with the name of the filter.</p>"},{"location":"api/capi-py/#helicsFilterGetOption","title":"helicsFilterGetOption","text":"<pre><code>def helicsFilterGetOption(filter: HelicsFilter, option: HelicsHandleOption) -&gt; int\n</code></pre> <p>Get a handle option for the filter.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter to query.</li> <li><code>option</code> - The option to query <code>helics.HelicsHandleOption</code>.</li> </ul> <p>Returns: <code>int</code>.</p>"},{"location":"api/capi-py/#helicsFilterGetPropertyDouble","title":"helicsFilterGetPropertyDouble","text":"<pre><code>def helicsFilterGetPropertyDouble(filter: HelicsFilter, propertyname: str) -&gt;float\n</code></pre> <p>Get the value of a floating point property in a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code>: The filter object to query.</li> <li><code>property</code>: The name of the property to query.</li> </ul> <p>Returns</p> <p>A float with the value of the property.</p>"},{"location":"api/capi-py/#helicsFilterGetPropertyString","title":"helicsFilterGetPropertyString","text":"<pre><code>def helicsFilterGetPropertyString(filter: HelicsFilter, propertyname: str)\n</code></pre> <p>Get the value of a string property in a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code>: The filter object to query.</li> <li><code>property</code>: The name of the property to query.</li> </ul> <p>Returns</p> <p>A string with the value of the property.</p>"},{"location":"api/capi-py/#helicsFilterGetTag","title":"helicsFilterGetTag","text":"<pre><code>def helicsFilterGetTag(filter: HelicsFilter, tagname: str)\n</code></pre> <p>Get the data in a specified tag of a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code>: The filter object to query.</li> <li><code>tagname</code>: The name of the tag to query.</li> </ul> <p>Returns</p> <p>A string with the tag data.</p>"},{"location":"api/capi-py/#helicsFilterIsValid","title":"helicsFilterIsValid","text":"<pre><code>def helicsFilterIsValid(filter: HelicsFilter) -&gt; bool\n</code></pre> <p>Check if a filter is valid.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The filter object to check.</li> </ul> <p>Returns: <code>True</code> if the Filter object represents a valid filter.</p>"},{"location":"api/capi-py/#helicsFilterRemoveDeliveryEndpoint","title":"helicsFilterRemoveDeliveryEndpoint","text":"<pre><code>def helicsFilterRemoveDeliveryEndpoint(filter: HelicsFilter, delivery_endpoint: str)\n</code></pre> <p>Remove a delivery destination from a cloning filter.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter (must be a cloning filter).</li> <li><code>delivery_endpoint</code> - A string with the delivery endpoint to remove.</li> </ul>"},{"location":"api/capi-py/#helicsFilterRemoveTarget","title":"helicsFilterRemoveTarget","text":"<pre><code>def helicsFilterRemoveTarget(filter: HelicsFilter, target_name: str)\n</code></pre> <p>Remove a destination target from a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter.</li> <li><code>target_name</code> - The named endpoint to remove as a target.</li> </ul>"},{"location":"api/capi-py/#helicsFilterSet","title":"helicsFilterSet","text":"<pre><code>def helicsFilterSet(filter: HelicsFilter, property: str, value: float)\n</code></pre> <p>Set a property on a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The filter to modify.</li> <li><code>property</code> - A string containing the property to set.</li> <li><code>value</code> - A numerical value for the property.</li> </ul>"},{"location":"api/capi-py/#helicsFilterSetCustomCallback","title":"helicsFilterSetCustomCallback","text":"<pre><code>def helicsFilterSetCustomCallback(filter: HelicsFilter, callback, user_data)\n</code></pre>"},{"location":"api/capi-py/#helicsFilterSetInfo","title":"helicsFilterSetInfo","text":"<pre><code>def helicsFilterSetInfo(filter: HelicsFilter, info: str)\n</code></pre> <p>Set the data in the info field for a filter</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter.</li> <li><code>info</code> - The string to set.</li> </ul>"},{"location":"api/capi-py/#helicsFilterSetOption","title":"helicsFilterSetOption","text":"<pre><code>def helicsFilterSetOption(filter: HelicsFilter, option: HelicsHandleOption, value: int)\n</code></pre> <p>Set the data in the info field for a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The given filter.</li> <li><code>option</code> - The option to set <code>helics.HelicsHandleOption</code>.</li> <li><code>value</code> - The value of the option commonly 0 for false 1 for true.</li> </ul>"},{"location":"api/capi-py/#helicsFilterSetString","title":"helicsFilterSetString","text":"<pre><code>def helicsFilterSetString(filter: HelicsFilter, property: str, value: str)\n</code></pre> <p>Set a string property on a filter.</p> <p>Parameters</p> <ul> <li><code>filter</code> - The filter to modify.</li> <li><code>property</code> - A string containing the property to set.</li> <li><code>value</code> - A string containing the new value.</li> </ul>"},{"location":"api/capi-py/#helicsFilterSetTag","title":"helicsFilterSetTag","text":"<pre><code>def helicsFilterSetTag(filter: HelicsFilter, tagname: str, tagvalue: str)\n</code></pre> <p>Set the data in a specific tag for a filter.</p> <p><code>filter</code>: The filter object to set a tag for. <code>tagname</code>: The name of the tag to set. <code>tagvalue</code>: The string value to associate with a tag.</p>"},{"location":"api/capi-py/#helicsGetBuildFlags","title":"helicsGetBuildFlags","text":"<pre><code>def helicsGetBuildFlags() -&gt; str\n</code></pre> <p>Get the build flags used to compile HELICS.</p>"},{"location":"api/capi-py/#helicsGetCompilerVersion","title":"helicsGetCompilerVersion","text":"<pre><code>def helicsGetCompilerVersion() -&gt; str\n</code></pre> <p>Get the compiler version used to compile HELICS.</p>"},{"location":"api/capi-py/#helicsGetDataType","title":"helicsGetDataType","text":"<pre><code>def helicsGetDataType(value: str) -&gt; int\n</code></pre> <p>Get the data type for use in <code>helics.helicsFederateRegisterPublication</code>, <code>helics.helicsFederateRegisterInput</code>, <code>helics.helicsFilterSetOption</code>.</p> <p>Parameters</p> <ul> <li><code>value</code>: A string representing a data type.</li> </ul> <p>Returns: An int with the data type or HELICS_DATA_TYPE_UNKNOWN(-1) if not a valid value.</p>"},{"location":"api/capi-py/#helicsGetFederateByName","title":"helicsGetFederateByName","text":"<pre><code>def helicsGetFederateByName(fed_name: str) -&gt; HelicsFederate\n</code></pre> <p>Get an existing <code>helics.HelicsFederate</code> from a core by name. The federate must have been created by one of the other functions and at least one of the objects referencing the created federate must still be active in the process.</p> <p>Parameters</p> <ul> <li><code>fed_name</code> - The name of the federate to retrieve.</li> </ul> <p>Returns: <code>helics.HelicsFederate</code>.</p>"},{"location":"api/capi-py/#helicsGetFlagIndex","title":"helicsGetFlagIndex","text":"<pre><code>def helicsGetFlagIndex(value: str) -&gt; Union[HelicsFlag, HelicsFederateFlag]\n</code></pre> <p>Get a property index for use in <code>helics.helicsFederateInfoSetFlagOption</code>, <code>helics.helicsFederateSetFlagOption</code>.</p> <p>Parameters</p> <ul> <li><code>value</code> - A string with the option name.</li> </ul> <p>Returns: An int with the property code or (-1) if not a valid property.</p>"},{"location":"api/capi-py/#helicsGetOptionIndex","title":"helicsGetOptionIndex","text":"<pre><code>def helicsGetOptionIndex(value: str) -&gt; HelicsHandleOption\n</code></pre> <p>Get an option index for use in <code>helics.helicsPublicationSetOption</code>, <code>helics.helicsInputSetOption</code>, <code>helics.helicsEndpointSetOption</code>, <code>helics.helicsFilterSetOption</code>, and the corresponding get functions</p> <p>Parameters</p> <ul> <li><code>value</code> - A string with the option name</li> </ul> <p>Returns: An int with the option index or (-1) if not a valid property.</p>"},{"location":"api/capi-py/#helicsGetOptionValue","title":"helicsGetOptionValue","text":"<pre><code>def helicsGetOptionValue(value: str) -&gt; int\n</code></pre> <p>Get an option value for use in <code>helics.helicsPublicationSetOption</code>, <code>helics.helicsInputSetOption</code>, <code>helics.helicsEndpointSetOption</code>, <code>helics.helicsFilterSetOption</code>.</p> <p>Parameters</p> <ul> <li><code>value</code> - A string representing the value</li> </ul> <p>Returns: An int with the option value or (-1) if not a valid value.</p>"},{"location":"api/capi-py/#helicsGetPropertyIndex","title":"helicsGetPropertyIndex","text":"<pre><code>def helicsGetPropertyIndex(value: str) -&gt; HelicsProperty\n</code></pre> <p>Get a property index for use in <code>helics.helicsFederateInfoSetFlagOption</code>, <code>helics.helicsFederateInfoSetTimeProperty</code>, or <code>helics.helicsFederateInfoSetIntegerProperty</code>.</p> <p>Parameters</p> <ul> <li><code>value</code> - A string with the property name.</li> </ul> <p>Returns: An int with the property code or (-1) if not a valid property.</p>"},{"location":"api/capi-py/#helicsGetSystemInfo","title":"helicsGetSystemInfo","text":"<pre><code>def helicsGetSystemInfo() -&gt; JSONType\n</code></pre> <p>Get a Python dictionary from JSON string containing version info. The object contains fields with system information like cpu, core count, operating system, and memory, as well as information about the HELICS build.  Used for debugging reports and gathering other information.</p>"},{"location":"api/capi-py/#helicsGetVersion","title":"helicsGetVersion","text":"<pre><code>def helicsGetVersion() -&gt; str\n</code></pre> <p>Get a version string for HELICS.</p>"},{"location":"api/capi-py/#helicsInputAddTarget","title":"helicsInputAddTarget","text":"<pre><code>def helicsInputAddTarget(ipt: HelicsInput, target_name: str)\n</code></pre> <p>Add a publication to the list of data that an input subscribes to.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The named input to modify.</li> <li><code>target_name</code> - The name of a publication that an input should subscribe to.</li> </ul>"},{"location":"api/capi-py/#helicsInputClearUpdate","title":"helicsInputClearUpdate","text":"<pre><code>def helicsInputClearUpdate(ipt: HelicsInput)\n</code></pre> <p>Clear the updated flag from an input.</p>"},{"location":"api/capi-py/#helicsInputGetBoolean","title":"helicsInputGetBoolean","text":"<pre><code>def helicsInputGetBoolean(ipt: HelicsInput) -&gt; bool\n</code></pre> <p>Get a boolean value from a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: A boolean value of current input value.</p>"},{"location":"api/capi-py/#helicsInputGetByteCount","title":"helicsInputGetByteCount","text":"<pre><code>def helicsInputGetByteCount(ipt: HelicsInput) -&gt; int\n</code></pre> <p>Data can be returned in a number of formats,  for instance if data is published as a double it can be returned as a string and vice versa,  not all translations make that much sense but they do work. Get the size of the raw value for subscription.</p> <p>Returns: The size of the raw data/string in bytes.</p>"},{"location":"api/capi-py/#helicsInputGetBytes","title":"helicsInputGetBytes","text":"<pre><code>def helicsInputGetBytes(ipt: HelicsInput) -&gt; bytes\n</code></pre> <p>Get the raw data for the latest value of a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: Raw string data.</p>"},{"location":"api/capi-py/#helicsInputGetChar","title":"helicsInputGetChar","text":"<pre><code>def helicsInputGetChar(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get a single character value from an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: The resulting character value.</p>"},{"location":"api/capi-py/#helicsInputGetComplex","title":"helicsInputGetComplex","text":"<pre><code>def helicsInputGetComplex(ipt: HelicsInput) -&gt; complex\n</code></pre> <p>Get a pair of double forming a complex number from a subscriptions.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: a pair of floating point values that represent the real and imag values</p>"},{"location":"api/capi-py/#helicsInputGetComplexObject","title":"helicsInputGetComplexObject","text":"<pre><code>def helicsInputGetComplexObject(ipt: HelicsInput) -&gt; complex\n</code></pre> <p>Get a complex object from an input object.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: <code>complex</code>.</p>"},{"location":"api/capi-py/#helicsInputGetComplexVector","title":"helicsInputGetComplexVector","text":"<pre><code>def helicsInputGetComplexVector(ipt: HelicsInput) -&gt; List[complex]\n</code></pre> <p>Get a vector of complex from a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the result for.</li> </ul> <p>Returns: a list of floating point values</p>"},{"location":"api/capi-py/#helicsInputGetDataBuffer","title":"helicsInputGetDataBuffer","text":"<pre><code>def helicsInputGetDataBuffer(ipt: HelicsInput) -&gt; HelicsDataBuffer\n</code></pre> <p>Get the size of a value for subscription assuming return as a string.</p> <p>Returns: The size of the string.</p>"},{"location":"api/capi-py/#helicsInputGetDouble","title":"helicsInputGetDouble","text":"<pre><code>def helicsInputGetDouble(ipt: HelicsInput) -&gt; float\n</code></pre> <p>Get a double value from a subscription..</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: The double value of the input.</p>"},{"location":"api/capi-py/#helicsInputGetExtractionUnits","title":"helicsInputGetExtractionUnits","text":"<pre><code>def helicsInputGetExtractionUnits(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the units of an input. The same as <code>helics.helicsInputGetUnits</code>.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query.</li> </ul> <p>Returns: A string with the units information.</p>"},{"location":"api/capi-py/#helicsInputGetInfo","title":"helicsInputGetInfo","text":"<pre><code>def helicsInputGetInfo(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the data in the info field of an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query.</li> </ul> <p>Returns: A string with the info field string.</p>"},{"location":"api/capi-py/#helicsInputGetInjectionUnits","title":"helicsInputGetInjectionUnits","text":"<pre><code>def helicsInputGetInjectionUnits(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the units of the publication that an input is linked to.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query.</li> </ul> <p>Returns: A string with the units information.</p>"},{"location":"api/capi-py/#helicsInputGetInteger","title":"helicsInputGetInteger","text":"<pre><code>def helicsInputGetInteger(ipt: HelicsInput) -&gt; int\n</code></pre> <p>Get an integer value from a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: An int64_t value with the current value of the input.</p>"},{"location":"api/capi-py/#helicsInputGetKey","title":"helicsInputGetKey","text":"<pre><code>def helicsInputGetKey(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the name of an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: A string with the name information.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsInputGetName","title":"helicsInputGetName","text":"<pre><code>def helicsInputGetName(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the name of an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: A string with the name information.</p>"},{"location":"api/capi-py/#helicsInputGetNamedPoint","title":"helicsInputGetNamedPoint","text":"<pre><code>def helicsInputGetNamedPoint(ipt: HelicsInput) -&gt; Tuple[str, float]\n</code></pre> <p>Get a named point from a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the result for.</li> </ul> <p>Returns: a string and a double value for the named point</p>"},{"location":"api/capi-py/#helicsInputGetOption","title":"helicsInputGetOption","text":"<pre><code>def helicsInputGetOption(ipt: HelicsInput, option: HelicsHandleOption) -&gt; int\n</code></pre> <p>Get the current value of an input handle option.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query.</li> <li><code>option</code> - Integer representation of the option in question see <code>helics.HelicsHandleOption</code>.</li> </ul> <p>Returns: An integer value with the current value of the given option.</p>"},{"location":"api/capi-py/#helicsInputGetPublicationDataType","title":"helicsInputGetPublicationDataType","text":"<pre><code>def helicsInputGetPublicationDataType(ipt: HelicsInput) -&gt; int\n</code></pre> <p>Get the data type the publisher to an input is sending.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: An int containing the enumeration value of the publication type.</p>"},{"location":"api/capi-py/#helicsInputGetPublicationType","title":"helicsInputGetPublicationType","text":"<pre><code>def helicsInputGetPublicationType(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the type the publisher to an input is sending.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: A string with the type information.</p>"},{"location":"api/capi-py/#helicsInputGetRawValue","title":"helicsInputGetRawValue","text":"<pre><code>def helicsInputGetRawValue(ipt: HelicsInput) -&gt; bytes\n</code></pre> <p>Get the raw data for the latest value of a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: Raw string data.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsInputGetRawValueSize","title":"helicsInputGetRawValueSize","text":"<pre><code>def helicsInputGetRawValueSize(ipt: HelicsInput) -&gt; int\n</code></pre> <p>Data can be returned in a number of formats,  for instance if data is published as a double it can be returned as a string and vice versa,  not all translations make that much sense but they do work. Get the size of the raw value for subscription.</p> <p>Returns: The size of the raw data/string in bytes.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsInputGetString","title":"helicsInputGetString","text":"<pre><code>def helicsInputGetString(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get a string value from a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: A string data</p>"},{"location":"api/capi-py/#helicsInputGetStringSize","title":"helicsInputGetStringSize","text":"<pre><code>def helicsInputGetStringSize(ipt: HelicsInput) -&gt; int\n</code></pre> <p>Get the size of a value for subscription assuming return as a string.</p> <p>Returns: The size of the string.</p>"},{"location":"api/capi-py/#helicsInputGetTag","title":"helicsInputGetTag","text":"<pre><code>def helicsInputGetTag(input: HelicsInput, tagname: str)\n</code></pre> <p>Get the data in a specified tag of a input.</p> <p>Parameters</p> <ul> <li><code>input</code>: The input object to query.</li> <li><code>tagname</code>: The name of the tag to query.</li> </ul> <p>Returns</p> <p>A string with the tag data.</p>"},{"location":"api/capi-py/#helicsInputGetTarget","title":"helicsInputGetTarget","text":"<pre><code>def helicsInputGetTarget(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the target of an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: A string with the input target.</p>"},{"location":"api/capi-py/#helicsInputGetTime","title":"helicsInputGetTime","text":"<pre><code>def helicsInputGetTime(ipt: HelicsInput) -&gt; HelicsTime\n</code></pre> <p>Get a time value from a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the data for.</li> </ul> <p>Returns: The resulting time value.</p>"},{"location":"api/capi-py/#helicsInputGetType","title":"helicsInputGetType","text":"<pre><code>def helicsInputGetType(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the type of an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: A string with the type information.</p>"},{"location":"api/capi-py/#helicsInputGetUnits","title":"helicsInputGetUnits","text":"<pre><code>def helicsInputGetUnits(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the units of an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query.</li> </ul> <p>Returns: A string with the units information.</p>"},{"location":"api/capi-py/#helicsInputGetVector","title":"helicsInputGetVector","text":"<pre><code>def helicsInputGetVector(ipt: HelicsInput) -&gt; List[float]\n</code></pre> <p>Get a vector of doubles from a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to get the result for.</li> </ul> <p>Returns: a list of floating point values</p>"},{"location":"api/capi-py/#helicsInputGetVectorSize","title":"helicsInputGetVectorSize","text":"<pre><code>def helicsInputGetVectorSize(ipt: HelicsInput) -&gt; int\n</code></pre> <p>Get the size of a value for subscription assuming return as an array of doubles.</p> <p>Returns: The number of doubles in a returned vector.</p>"},{"location":"api/capi-py/#helicsInputIsUpdated","title":"helicsInputIsUpdated","text":"<pre><code>def helicsInputIsUpdated(ipt: HelicsInput) -&gt; bool\n</code></pre> <p>Check if a particular subscription was updated.</p> <p>Returns: <code>True</code> if it has been updated since the last value retrieval.</p>"},{"location":"api/capi-py/#helicsInputIsValid","title":"helicsInputIsValid","text":"<pre><code>def helicsInputIsValid(ipt: HelicsInput) -&gt; bool\n</code></pre> <p>Check if an input is valid.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to check</li> </ul> <p>Returns: <code>True</code> if the Input object represents a valid input.</p>"},{"location":"api/capi-py/#helicsInputLastUpdateTime","title":"helicsInputLastUpdateTime","text":"<pre><code>def helicsInputLastUpdateTime(ipt: HelicsInput) -&gt; HelicsTime\n</code></pre> <p>Get the last time a subscription was updated.</p>"},{"location":"api/capi-py/#helicsInputSetDefaultBoolean","title":"helicsInputSetDefaultBoolean","text":"<pre><code>def helicsInputSetDefaultBoolean(ipt: HelicsInput, value: bool)\n</code></pre> <p>Set the default as a boolean.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>value</code> - The default boolean value.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultBytes","title":"helicsInputSetDefaultBytes","text":"<pre><code>def helicsInputSetDefaultBytes(ipt: HelicsInput, data: bytes)\n</code></pre> <p>Default Value functions. These functions set the default value for a subscription. That is the value returned if nothing was published from elsewhere. Set the default as a raw data array.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>data</code> - A pointer to the raw data to use for the default.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultChar","title":"helicsInputSetDefaultChar","text":"<pre><code>def helicsInputSetDefaultChar(ipt: HelicsInput, value: str)\n</code></pre> <p>Set the default as a char.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>value</code> - The default char value.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultComplex","title":"helicsInputSetDefaultComplex","text":"<pre><code>def helicsInputSetDefaultComplex(ipt: HelicsInput, real: float, imag: float = 0)\n</code></pre> <p>Set the default as a complex number.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>real</code> - The default real value.</li> <li><code>imag</code> - The default imaginary value.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultComplexVector","title":"helicsInputSetDefaultComplexVector","text":"<pre><code>def helicsInputSetDefaultComplexVector(ipt: HelicsInput, vectorInput: List[complex])\n</code></pre> <p>Set the default as a vector of doubles.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>vectorInput</code> - A pointer to an array of double data.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultDouble","title":"helicsInputSetDefaultDouble","text":"<pre><code>def helicsInputSetDefaultDouble(ipt: HelicsInput, value: float)\n</code></pre> <p>Set the default as a double.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>value</code> - The default double value.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultInteger","title":"helicsInputSetDefaultInteger","text":"<pre><code>def helicsInputSetDefaultInteger(ipt: HelicsInput, value: int)\n</code></pre> <p>Set the default as an integer.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>value</code> - The default integer.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultNamedPoint","title":"helicsInputSetDefaultNamedPoint","text":"<pre><code>def helicsInputSetDefaultNamedPoint(ipt: HelicsInput, string: str, value: float)\n</code></pre> <p>Set the default as a <code>NamedPoint</code>.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>string</code> - A pointer to a string representing the name.</li> <li><code>value</code> - A double value for the value of the named point.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultRaw","title":"helicsInputSetDefaultRaw","text":"<pre><code>def helicsInputSetDefaultRaw(ipt: HelicsInput, data: bytes)\n</code></pre> <p>Default Value functions. These functions set the default value for a subscription. That is the value returned if nothing was published from elsewhere. Set the default as a raw data array.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>data</code> - A pointer to the raw data to use for the default.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsInputSetDefaultString","title":"helicsInputSetDefaultString","text":"<pre><code>def helicsInputSetDefaultString(ipt: HelicsInput, string: str)\n</code></pre> <p>Set the default as a string.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>string</code> - A pointer to the default string.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultTime","title":"helicsInputSetDefaultTime","text":"<pre><code>def helicsInputSetDefaultTime(ipt: HelicsInput, value: HelicsTime)\n</code></pre> <p>Set the default as a time.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>value</code> - The default time value.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetDefaultVector","title":"helicsInputSetDefaultVector","text":"<pre><code>def helicsInputSetDefaultVector(ipt: HelicsInput, vectorInput: List[float])\n</code></pre> <p>Set the default as a vector of doubles.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to set the default for.</li> <li><code>vectorInput</code> - A pointer to an array of double data.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetInfo","title":"helicsInputSetInfo","text":"<pre><code>def helicsInputSetInfo(ipt: HelicsInput, info: str)\n</code></pre> <p>Set the data in the info field for an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query.</li> <li><code>info</code> - The string to set.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetMinimumChange","title":"helicsInputSetMinimumChange","text":"<pre><code>def helicsInputSetMinimumChange(ipt: HelicsInput, tolerance: float)\n</code></pre> <p>Set the minimum change detection tolerance.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to modify.</li> <li><code>tolerance</code> - The tolerance level for registering an update, values changing less than this value will not show asbeing updated.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetOption","title":"helicsInputSetOption","text":"<pre><code>def helicsInputSetOption(ipt: HelicsInput, option: HelicsHandleOption, value: int)\n</code></pre> <p>Set an option on an input.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query.</li> <li><code>option</code> - The option to set for the input <code>helics.HelicsHandleOption</code>.</li> <li><code>value</code> - The value to set the option to.</li> </ul>"},{"location":"api/capi-py/#helicsInputSetTag","title":"helicsInputSetTag","text":"<pre><code>def helicsInputSetTag(input: HelicsInput, tagname: str, tagvalue: str)\n</code></pre> <p>Set the data in a specific tag for a input.</p> <p><code>input</code>: The input object to set a tag for. <code>tagname</code>: The name of the tag to set. <code>tagvalue</code>: The string value to associate with a tag.</p>"},{"location":"api/capi-py/#helicsIsCoreTypeAvailable","title":"helicsIsCoreTypeAvailable","text":"<pre><code>def helicsIsCoreTypeAvailable(type: str) -&gt; bool\n</code></pre> <p>Returns <code>True</code> if core/broker type specified is available in current compilation.</p> <p>Parameters</p> <ul> <li><code>type</code> - A string representing a core type. Options include \u201czmq\u201d, \u201cudp\u201d, \u201cipc\u201d, \u201cinterprocess\u201d, \u201ctcp\u201d, \u201cdefault\u201d, \u201cmpi\u201d.</li> </ul> <p>Returns: <code>True</code> if <code>type</code> is available, <code>False</code> if <code>type</code> is not available.</p>"},{"location":"api/capi-py/#helicsLoadSignalHandler","title":"helicsLoadSignalHandler","text":"<pre><code>def helicsLoadSignalHandler()\n</code></pre> <p>Load a signal handler that handles Ctrl-C and shuts down the library</p>"},{"location":"api/capi-py/#helicsLoadSignalHandlerCallback","title":"helicsLoadSignalHandlerCallback","text":"<pre><code>def helicsLoadSignalHandlerCallback()\n</code></pre>"},{"location":"api/capi-py/#helicsLoadSignalHandlerCallbackNoExit","title":"helicsLoadSignalHandlerCallbackNoExit","text":"<pre><code>def helicsLoadSignalHandlerCallbackNoExit()\n</code></pre>"},{"location":"api/capi-py/#helicsLoadThreadedSignalHandler","title":"helicsLoadThreadedSignalHandler","text":"<pre><code>def helicsLoadThreadedSignalHandler()\n</code></pre> <p>Load a threaded signal handler that handles Ctrl-C and shuts down the library</p>"},{"location":"api/capi-py/#helicsMessageAppendData","title":"helicsMessageAppendData","text":"<pre><code>def helicsMessageAppendData(message: HelicsMessage, data: bytes)\n</code></pre> <p>Append data to the payload.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>data</code> - A string containing the message data to append.</li> </ul>"},{"location":"api/capi-py/#helicsMessageCheckFlag","title":"helicsMessageCheckFlag","text":"<pre><code>def helicsMessageCheckFlag(message: HelicsMessage, flag: int) -&gt; bool\n</code></pre> <p>Check if a flag is set on a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>flag</code> - The flag to check should be between [0,15].</li> </ul> <p>Returns: The flags associated with a message.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsMessageClear","title":"helicsMessageClear","text":"<pre><code>def helicsMessageClear(message: HelicsMessage)\n</code></pre> <p>Reset message to empty state</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul>"},{"location":"api/capi-py/#helicsMessageClearFlags","title":"helicsMessageClearFlags","text":"<pre><code>def helicsMessageClearFlags(message: HelicsMessage)\n</code></pre> <p>Clear the flags of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul>"},{"location":"api/capi-py/#helicsMessageClone","title":"helicsMessageClone","text":"<pre><code>def helicsMessageClone(message: HelicsMessage) -&gt; HelicsMessage\n</code></pre> <p>Clone a message object.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object to copy from.</li> </ul> <p>Returns: <code>helics.HelicsMessage</code>.</p>"},{"location":"api/capi-py/#helicsMessageCopy","title":"helicsMessageCopy","text":"<pre><code>def helicsMessageCopy(source_message: HelicsMessage, destination_message: HelicsMessage)\n</code></pre> <p>Copy a message object.</p> <p>Parameters</p> <ul> <li><code>source_message</code> - The message object to copy from.</li> <li><code>destination_message</code> - The message object to copy to.</li> </ul>"},{"location":"api/capi-py/#helicsMessageDataBuffer","title":"helicsMessageDataBuffer","text":"<pre><code>def helicsMessageDataBuffer(message: HelicsMessage) -&gt; HelicsDataBuffer\n</code></pre> <p>Get a data buffer to the message object.</p> <p>Parameters</p> <ul> <li><code>message</code> - A message object to get the dataBuffer for.</li> </ul> <p>Returns: A HelicsDataBuffer object to the data in a message.  Modifying the buffer will directly modify the message contents.</p>"},{"location":"api/capi-py/#helicsMessageFree","title":"helicsMessageFree","text":"<pre><code>def helicsMessageFree(message: HelicsMessage)\n</code></pre> <p>Free a message object from memory. Memory for message is managed so not using this function does not create memory leaks, this is an indication to the system that the memory for this message is done being used and can be reused for a new message. <code>helics.helicsFederateClearMessages</code> can also be used to clear up all stored messages at once.</p>"},{"location":"api/capi-py/#helicsMessageGetByteCount","title":"helicsMessageGetByteCount","text":"<pre><code>def helicsMessageGetByteCount(message: HelicsMessage) -&gt; int\n</code></pre> <p>Get the size of the data payload in bytes.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: The size of the data payload.</p>"},{"location":"api/capi-py/#helicsMessageGetBytes","title":"helicsMessageGetBytes","text":"<pre><code>def helicsMessageGetBytes(message: HelicsMessage) -&gt; bytes\n</code></pre> <p>Get the raw data for a message object.</p> <p>Parameters</p> <ul> <li><code>message</code> - A message object to get the data for.</li> </ul> <p>Returns: Raw string data.</p>"},{"location":"api/capi-py/#helicsMessageGetBytesPointer","title":"helicsMessageGetBytesPointer","text":"<pre><code>def helicsMessageGetBytesPointer(message: HelicsMessage) -&gt; pointer\n</code></pre> <p>Get a pointer to the raw data of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - A message object to get the data for.</li> </ul> <p>Returns: A pointer to the raw data in memory, the pointer may be NULL if the message is not a valid message.</p>"},{"location":"api/capi-py/#helicsMessageGetDestination","title":"helicsMessageGetDestination","text":"<pre><code>def helicsMessageGetDestination(message: HelicsMessage) -&gt; str\n</code></pre> <p>Get the destination endpoint of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: A string with the destination endpoint.</p>"},{"location":"api/capi-py/#helicsMessageGetFlagOption","title":"helicsMessageGetFlagOption","text":"<pre><code>def helicsMessageGetFlagOption(message: HelicsMessage, flag: int) -&gt; bool\n</code></pre> <p>Get flag on a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>flag</code> - The flag to check should be between [0,15].</li> </ul> <p>Returns: The flags associated with a message.</p>"},{"location":"api/capi-py/#helicsMessageGetMessageID","title":"helicsMessageGetMessageID","text":"<pre><code>def helicsMessageGetMessageID(message: HelicsMessage) -&gt; int\n</code></pre> <p>Get the messageID of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: The messageID.</p>"},{"location":"api/capi-py/#helicsMessageGetOriginalDestination","title":"helicsMessageGetOriginalDestination","text":"<pre><code>def helicsMessageGetOriginalDestination(message: HelicsMessage) -&gt; str\n</code></pre> <p>Get the original destination endpoint of a message, the destination may have been modified by filters or other actions.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: A string with the original destination of a message.</p>"},{"location":"api/capi-py/#helicsMessageGetOriginalSource","title":"helicsMessageGetOriginalSource","text":"<pre><code>def helicsMessageGetOriginalSource(message: HelicsMessage) -&gt; str\n</code></pre> <p>Get the original source endpoint of a message, the source may have been modified by filters or other actions.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: A string with the source of a message.</p>"},{"location":"api/capi-py/#helicsMessageGetRawData","title":"helicsMessageGetRawData","text":"<pre><code>def helicsMessageGetRawData(message: HelicsMessage) -&gt; bytes\n</code></pre> <p>Get the raw data for a message object.</p> <p>Parameters</p> <ul> <li><code>message</code> - A message object to get the data for.</li> </ul> <p>Returns: Raw string data.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsMessageGetRawDataPointer","title":"helicsMessageGetRawDataPointer","text":"<pre><code>def helicsMessageGetRawDataPointer(message: HelicsMessage) -&gt; pointer\n</code></pre> <p>Get a pointer to the raw data of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - A message object to get the data for.</li> </ul> <p>Returns: A pointer to the raw data in memory, the pointer may be NULL if the message is not a valid message.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsMessageGetRawDataSize","title":"helicsMessageGetRawDataSize","text":"<pre><code>def helicsMessageGetRawDataSize(message: HelicsMessage) -&gt; int\n</code></pre> <p>Get the size of the data payload in bytes.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: The size of the data payload.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsMessageGetSource","title":"helicsMessageGetSource","text":"<pre><code>def helicsMessageGetSource(message: HelicsMessage) -&gt; str\n</code></pre> <p>Message operation functions. Functions for working with helics message envelopes. Get the source endpoint of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: A string with the source endpoint.</p>"},{"location":"api/capi-py/#helicsMessageGetString","title":"helicsMessageGetString","text":"<pre><code>def helicsMessageGetString(message: HelicsMessage) -&gt; str\n</code></pre> <p>Get the payload of a message as a string.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: A string representing the payload of a message.</p>"},{"location":"api/capi-py/#helicsMessageGetTime","title":"helicsMessageGetTime","text":"<pre><code>def helicsMessageGetTime(message: HelicsMessage) -&gt; HelicsTime\n</code></pre> <p>Get the helics time associated with a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: The time associated with a message.</p>"},{"location":"api/capi-py/#helicsMessageIsValid","title":"helicsMessageIsValid","text":"<pre><code>def helicsMessageIsValid(message: HelicsMessage) -&gt; bool\n</code></pre> <p>A check if the message contains a valid payload.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> </ul> <p>Returns: <code>True</code> if the message contains a payload.</p>"},{"location":"api/capi-py/#helicsMessageReserve","title":"helicsMessageReserve","text":"<pre><code>def helicsMessageReserve(message: HelicsMessage, reserve_size: int)\n</code></pre> <p>Reserve space in a buffer but don\u2019t actually resize. The message data buffer will be reserved but not resized.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>reserve_size</code> - The number of bytes to reserve in the message object.</li> </ul>"},{"location":"api/capi-py/#helicsMessageResize","title":"helicsMessageResize","text":"<pre><code>def helicsMessageResize(message: HelicsMessage, new_size: int)\n</code></pre> <p>Resize the data buffer for a message. The message data buffer will be resized. There are no guarantees on what is in the buffer in newly allocated space. If the allocated space is not sufficient new allocations will occur</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>new_size</code> - The new size in bytes of the buffer.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetData","title":"helicsMessageSetData","text":"<pre><code>def helicsMessageSetData(message: HelicsMessage, data: bytes)\n</code></pre> <p>Set the data payload of a message as raw data.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>data</code> - A string containing the message data.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetDataBuffer","title":"helicsMessageSetDataBuffer","text":"<pre><code>def helicsMessageSetDataBuffer(message: HelicsMessage, data: HelicsDataBuffer)\n</code></pre> <p>Set the data payload of a message from a HelicsDataBuffer Object.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>data</code> - The dataBuffer containing the appropriate data, if null will clear the message payload.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetDestination","title":"helicsMessageSetDestination","text":"<pre><code>def helicsMessageSetDestination(message: HelicsMessage, destination: str)\n</code></pre> <p>Set the destination of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>destination</code> - A string containing the new destination.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetFlagOption","title":"helicsMessageSetFlagOption","text":"<pre><code>def helicsMessageSetFlagOption(message: HelicsMessage, flag: int, value: bool)\n</code></pre> <p>Set a flag on a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>flag</code> - An index of a flag to set on the message.</li> <li><code>value</code> - The desired value of the flag.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetMessageID","title":"helicsMessageSetMessageID","text":"<pre><code>def helicsMessageSetMessageID(message: HelicsMessage, message_id: int)\n</code></pre> <p>Set the message ID for the message. Normally this is not needed and the core of HELICS will adjust as needed.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>message_id</code> - A new message ID.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetOriginalDestination","title":"helicsMessageSetOriginalDestination","text":"<pre><code>def helicsMessageSetOriginalDestination(message: HelicsMessage, destination: str)\n</code></pre> <p>Set the original destination of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>destination</code> - A string containing the new original source.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetOriginalSource","title":"helicsMessageSetOriginalSource","text":"<pre><code>def helicsMessageSetOriginalSource(message: HelicsMessage, source: str)\n</code></pre> <p>Set the original source of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>source</code> - A string containing the new original source.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetSource","title":"helicsMessageSetSource","text":"<pre><code>def helicsMessageSetSource(message: HelicsMessage, source: str)\n</code></pre> <p>Set the source of a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>source</code> - A string containing the source.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetString","title":"helicsMessageSetString","text":"<pre><code>def helicsMessageSetString(message: HelicsMessage, string: str)\n</code></pre> <p>Set the data payload of a message as a string.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>string</code> - A string containing the message data.</li> </ul>"},{"location":"api/capi-py/#helicsMessageSetTime","title":"helicsMessageSetTime","text":"<pre><code>def helicsMessageSetTime(message: HelicsMessage, time: HelicsTime)\n</code></pre> <p>Set the delivery time for a message.</p> <p>Parameters</p> <ul> <li><code>message</code> - The message object in question.</li> <li><code>time</code> - The time the message should be delivered.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationAddTarget","title":"helicsPublicationAddTarget","text":"<pre><code>def helicsPublicationAddTarget(pub: HelicsPublication, target_name: str)\n</code></pre> <p>Add a named input to the list of targets a publication publishes to.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to add the target for.</li> <li><code>target_name</code> - The name of an input that the data should be sent to.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationGetInfo","title":"helicsPublicationGetInfo","text":"<pre><code>def helicsPublicationGetInfo(pub: HelicsPublication) -&gt; str\n</code></pre> <p>Get the data in the info field of an publication.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to query.</li> </ul> <p>Returns: A string with the info field string.</p>"},{"location":"api/capi-py/#helicsPublicationGetKey","title":"helicsPublicationGetKey","text":"<pre><code>def helicsPublicationGetKey(pub: HelicsPublication) -&gt; str\n</code></pre> <p>Get the name of a publication. This will be the global name used to identify the publication to the federation.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to query.</li> </ul> <p>Returns: A string with the units information.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsPublicationGetName","title":"helicsPublicationGetName","text":"<pre><code>def helicsPublicationGetName(pub: HelicsPublication) -&gt; str\n</code></pre> <p>Get the name of a publication. This will be the global name used to identify the publication to the federation.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to query.</li> </ul> <p>Returns: A string with the units information.</p>"},{"location":"api/capi-py/#helicsPublicationGetOption","title":"helicsPublicationGetOption","text":"<pre><code>def helicsPublicationGetOption(pub: HelicsPublication, option: HelicsHandleOption) -&gt; int\n</code></pre> <p>Get the value of an option for a publication.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to query.</li> <li><code>option</code> - The value to query see <code>helics.HelicsHandleOption</code>.</li> </ul> <p>Returns: A string with the info field string.</p>"},{"location":"api/capi-py/#helicsPublicationGetTag","title":"helicsPublicationGetTag","text":"<pre><code>def helicsPublicationGetTag(pub: HelicsPublication, tagname: str)\n</code></pre> <p>Get the data in a specified tag of a publication.</p> <p>Parameters</p> <ul> <li><code>pub</code>: The publication object to query.</li> <li><code>tagname</code>: The name of the tag to query.</li> </ul> <p>Returns</p> <p>A string with the tag data.</p>"},{"location":"api/capi-py/#helicsPublicationGetType","title":"helicsPublicationGetType","text":"<pre><code>def helicsPublicationGetType(pub: HelicsPublication) -&gt; str\n</code></pre> <p>Get the type of a publication.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to query</li> </ul> <p>Returns: A string with the publication type information.</p>"},{"location":"api/capi-py/#helicsPublicationGetUnits","title":"helicsPublicationGetUnits","text":"<pre><code>def helicsPublicationGetUnits(pub: HelicsPublication) -&gt; str\n</code></pre> <p>Get the units of a publication.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to query.</li> </ul> <p>Returns: A string with the units information.</p>"},{"location":"api/capi-py/#helicsPublicationIsValid","title":"helicsPublicationIsValid","text":"<pre><code>def helicsPublicationIsValid(pub: HelicsPublication) -&gt; bool\n</code></pre> <p>Publication functions. Functions for publishing data of various kinds. The data will get translated to the type specified when the publication was constructed automatically regardless of the function used to publish the data. Check if a publication is valid.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to check</li> </ul> <p>Returns: <code>True</code> if the publication is a valid publication.</p>"},{"location":"api/capi-py/#helicsPublicationPublishBoolean","title":"helicsPublicationPublishBoolean","text":"<pre><code>def helicsPublicationPublishBoolean(pub: HelicsPublication, value: bool)\n</code></pre> <p>Publish a Boolean Value.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>value</code> - The boolean value to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishBytes","title":"helicsPublicationPublishBytes","text":"<pre><code>def helicsPublicationPublishBytes(pub: HelicsPublication, data: bytes)\n</code></pre> <p>Publish raw data from a char * and length.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>data</code> - A pointer to the raw data.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishChar","title":"helicsPublicationPublishChar","text":"<pre><code>def helicsPublicationPublishChar(pub: HelicsPublication, value: str)\n</code></pre> <p>Publish a single character.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>value</code> - The numerical value to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishComplex","title":"helicsPublicationPublishComplex","text":"<pre><code>def helicsPublicationPublishComplex(pub: HelicsPublication, real: float, imag: float = 0)\n</code></pre> <p>Publish a complex value (or pair of values).</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>real</code> - <code>float</code> number or <code>complex</code> number</li> <li><code>imag</code> - <code>float</code> number</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishComplexVector","title":"helicsPublicationPublishComplexVector","text":"<pre><code>def helicsPublicationPublishComplexVector(pub: HelicsPublication, vectorInput: List[complex])\n</code></pre> <p>Publish a vector of complexes.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>vectorInput</code> - A list of complex data.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishDataBuffer","title":"helicsPublicationPublishDataBuffer","text":"<pre><code>def helicsPublicationPublishDataBuffer(pub: HelicsPublication, buffer: HelicsDataBuffer)\n</code></pre> <p>Publish a data buffer.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>buffer</code> - A HelicsDataBuffer to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishDouble","title":"helicsPublicationPublishDouble","text":"<pre><code>def helicsPublicationPublishDouble(pub: HelicsPublication, value: float)\n</code></pre> <p>Publish a double floating point value.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>value</code> - The numerical value to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishInteger","title":"helicsPublicationPublishInteger","text":"<pre><code>def helicsPublicationPublishInteger(pub: HelicsPublication, value: int)\n</code></pre> <p>Publish an integer value.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>value</code> - The numerical value to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishNamedPoint","title":"helicsPublicationPublishNamedPoint","text":"<pre><code>def helicsPublicationPublishNamedPoint(pub: HelicsPublication, string: str, value: float)\n</code></pre> <p>Publish a named point.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>string</code> - A string for the name to publish.</li> <li><code>value</code> - A double for the value to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishRaw","title":"helicsPublicationPublishRaw","text":"<pre><code>def helicsPublicationPublishRaw(pub: HelicsPublication, data: bytes)\n</code></pre> <p>Publish raw data from a char * and length.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>data</code> - A pointer to the raw data.</li> </ul> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsPublicationPublishString","title":"helicsPublicationPublishString","text":"<pre><code>def helicsPublicationPublishString(pub: HelicsPublication, string: str)\n</code></pre> <p>Publish a string.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>string</code> - The string to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishTime","title":"helicsPublicationPublishTime","text":"<pre><code>def helicsPublicationPublishTime(pub: HelicsPublication, value: HelicsTime)\n</code></pre> <p>Publish a time value.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>value</code> - The numerical value to publish.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationPublishVector","title":"helicsPublicationPublishVector","text":"<pre><code>def helicsPublicationPublishVector(pub: HelicsPublication, vectorInput: List[float])\n</code></pre> <p>Publish a vector of doubles.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to publish for.</li> <li><code>vectorInput</code> - A list of double data.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationSetInfo","title":"helicsPublicationSetInfo","text":"<pre><code>def helicsPublicationSetInfo(pub: HelicsPublication, info: str)\n</code></pre> <p>Set the data in the info field for a publication.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to set the info field for.</li> <li><code>info</code> - The string to set.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationSetMinimumChange","title":"helicsPublicationSetMinimumChange","text":"<pre><code>def helicsPublicationSetMinimumChange(pub: HelicsPublication, tolerance: float)\n</code></pre> <p>Set the minimum change detection tolerance.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to modify.</li> <li><code>tolerance</code> - The tolerance level for publication, values changing less than this value will not be published.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationSetOption","title":"helicsPublicationSetOption","text":"<pre><code>def helicsPublicationSetOption(pub: HelicsPublication, option: HelicsHandleOption, value: int)\n</code></pre> <p>Set the value of an option for a publication.</p> <p>Parameters</p> <ul> <li><code>pub</code> - The publication to query.</li> <li><code>option</code> - Integer code for the option to set <code>helics.HelicsHandleOption</code>.</li> <li><code>value</code> - The value to set the option to.</li> </ul>"},{"location":"api/capi-py/#helicsPublicationSetTag","title":"helicsPublicationSetTag","text":"<pre><code>def helicsPublicationSetTag(pub: HelicsPublication, tagname: str, tagvalue: str)\n</code></pre> <p>Set the data in a specific tag for a publication.</p> <p><code>pub</code>: The publication object to set a tag for. <code>tagname</code>: The name of the tag to set. <code>tagvalue</code>: The string value to associate with a tag.</p>"},{"location":"api/capi-py/#helicsQueryBrokerExecute","title":"helicsQueryBrokerExecute","text":"<pre><code>def helicsQueryBrokerExecute(query: HelicsQuery, broker: HelicsBroker) -&gt; JSONType\n</code></pre> <p>Execute a query directly on a broker. The call will block until the query finishes which may require communication or other delays.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to use in the query.</li> <li><code>broker</code> - The broker to send the query to.</li> </ul> <p>Returns: String that contains the result of the query that was executed.</p>"},{"location":"api/capi-py/#helicsQueryBufferFill","title":"helicsQueryBufferFill","text":"<pre><code>def helicsQueryBufferFill(buffer: HelicsQueryBuffer, string: str)\n</code></pre> <p>Set the data for a query callback.</p> <p>There are many queries that HELICS understands directly, but it is occasionally useful to have a federate be able to respond to specific queries with answers specific to a federate.</p> <ul> <li><code>buffer</code>: The buffer received in a helicsQueryCallback.</li> <li><code>string</code>: Pointer to the data to fill the buffer with.</li> </ul>"},{"location":"api/capi-py/#helicsQueryCoreExecute","title":"helicsQueryCoreExecute","text":"<pre><code>def helicsQueryCoreExecute(query: HelicsQuery, core: HelicsCore) -&gt; JSONType\n</code></pre> <p>Execute a query directly on a core. The call will block until the query finishes which may require communication or other delays.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to use in the query.</li> <li><code>core</code> - The core to send the query to.</li> </ul> <p>Returns: String that contains the result of the query that was executed.</p>"},{"location":"api/capi-py/#helicsQueryExecute","title":"helicsQueryExecute","text":"<pre><code>def helicsQueryExecute(query: HelicsQuery, fed: HelicsFederate) -&gt; JSONType\n</code></pre> <p>Execute a query. The call will block until the query finishes which may require communication or other delays.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to use in the query.</li> <li><code>fed</code> - A federate to send the query through.</li> </ul> <p>Returns: String that contains the result of the query that was executed.</p>"},{"location":"api/capi-py/#helicsQueryExecuteAsync","title":"helicsQueryExecuteAsync","text":"<pre><code>def helicsQueryExecuteAsync(query: HelicsQuery, fed: HelicsFederate)\n</code></pre> <p>Execute a query in a non-blocking call.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to use in the query.</li> <li><code>fed</code> - A federate to send the query through.</li> </ul>"},{"location":"api/capi-py/#helicsQueryExecuteComplete","title":"helicsQueryExecuteComplete","text":"<pre><code>def helicsQueryExecuteComplete(query: HelicsQuery) -&gt; JSONType\n</code></pre> <p>Complete the return from a query called with <code>helics.helicsExecuteQueryAsync</code>. The function will block until the query completes <code>isQueryComplete</code> can be called to determine if a query has completed or not.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to complete execution of.</li> </ul> <p>Returns: String that contains the result of the query that was executed.</p>"},{"location":"api/capi-py/#helicsQueryFree","title":"helicsQueryFree","text":"<pre><code>def helicsQueryFree(query: HelicsQuery)\n</code></pre> <p>Free the memory associated with a query object.</p>"},{"location":"api/capi-py/#helicsQueryIsCompleted","title":"helicsQueryIsCompleted","text":"<pre><code>def helicsQueryIsCompleted(query: HelicsQuery) -&gt; bool\n</code></pre> <p>Check if an asynchronously executed query has completed. This function should usually be called after a QueryExecuteAsync function has been called.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to check if completed</li> </ul> <p>Returns: Will return <code>True</code> if an asynchronous query has completed or a regular query call was made with a result, and false if an asynchronous query has not completed or is invalid.</p>"},{"location":"api/capi-py/#helicsQuerySetOrdering","title":"helicsQuerySetOrdering","text":"<pre><code>def helicsQuerySetOrdering(query: HelicsQuery, mode: int)\n</code></pre> <p>Update the ordering mode of the query, fast runs on priority channels, ordered goes on normal channels but goes in sequence</p>"},{"location":"api/capi-py/#parameters_23","title":"Parameters","text":"<ul> <li><code>query</code>: The query object to change the order for.</li> <li><code>mode</code>: 0 for fast, 1 for ordered.</li> </ul>"},{"location":"api/capi-py/#helicsQuerySetQueryString","title":"helicsQuerySetQueryString","text":"<pre><code>def helicsQuerySetQueryString(query: HelicsQuery, query_string: str)\n</code></pre> <p>Update the queryString of a query.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to change the target of.</li> <li><code>query_string</code> - the new queryString.</li> </ul>"},{"location":"api/capi-py/#helicsQuerySetTarget","title":"helicsQuerySetTarget","text":"<pre><code>def helicsQuerySetTarget(query: HelicsQuery, target_name: str)\n</code></pre> <p>Update the target of a query.</p> <p>Parameters</p> <ul> <li><code>query</code> - The query object to change the target of.</li> <li><code>target_name</code> - the name of the target to query.</li> </ul>"},{"location":"api/capi-py/#helicsSubscriptionGetKey","title":"helicsSubscriptionGetKey","text":"<pre><code>def helicsSubscriptionGetKey(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the name of a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: A string with the subscription name.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsSubscriptionGetTarget","title":"helicsSubscriptionGetTarget","text":"<pre><code>def helicsSubscriptionGetTarget(ipt: HelicsInput) -&gt; str\n</code></pre> <p>Get the target of a subscription.</p> <p>Parameters</p> <ul> <li><code>ipt</code> - The input to query</li> </ul> <p>Returns: A string with the subscription target.</p> <p>DEPRECATED</p>"},{"location":"api/capi-py/#helicsTranslatorAddDestinationEndpoint","title":"helicsTranslatorAddDestinationEndpoint","text":"<pre><code>def helicsTranslatorAddDestinationEndpoint(translator: HelicsTranslator, destination: str)\n</code></pre> <p>Add a destination target to a translator. All messages coming from a source are copied to the delivery address(es).</p>"},{"location":"api/capi-py/#parameters_24","title":"Parameters","text":"<ul> <li><code>translator</code> - The given translator.</li> <li><code>destination</code> - The name of the translator to add as a source target.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorAddInputTarget","title":"helicsTranslatorAddInputTarget","text":"<pre><code>def helicsTranslatorAddInputTarget(translator: HelicsTranslator, input: str)\n</code></pre> <p>Add an input to send a translator output.</p> <p>All messages going to a destination are copied to the delivery address(es).</p>"},{"location":"api/capi-py/#parameters_25","title":"Parameters","text":"<ul> <li><code>translator</code> - The given translator to add a input target to.</li> <li><code>input</code> - The name of the endpoint to add as a input target.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorAddPublicationTarget","title":"helicsTranslatorAddPublicationTarget","text":"<pre><code>def helicsTranslatorAddPublicationTarget(translator: HelicsTranslator, publication: str)\n</code></pre> <p>Add a source publication target to a translator.</p> <p>All messages coming from a source are copied to the delivery address(es).</p> <ul> <li><code>translator</code> - The given translator.</li> <li><code>publication</code> - The name of the endpoint to add as a publication target.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorAddSourceEndpoint","title":"helicsTranslatorAddSourceEndpoint","text":"<pre><code>def helicsTranslatorAddSourceEndpoint(translator: HelicsTranslator, source: str)\n</code></pre> <p>Add a source endpoint target to a translator.</p> <p>All messages coming from a source are copied to the delivery address(es).</p> <ul> <li><code>trans</code> - The given translator.</li> <li>`source`` - The name of the endpoint to add as a source target.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorGetInfo","title":"helicsTranslatorGetInfo","text":"<pre><code>def helicsTranslatorGetInfo(translator: HelicsTranslator) -&gt; str\n</code></pre> <p>Get the data in the info field of an translator.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to query.</li> </ul> <p>Returns: A string with the info field string.</p>"},{"location":"api/capi-py/#helicsTranslatorGetName","title":"helicsTranslatorGetName","text":"<pre><code>def helicsTranslatorGetName(translator: HelicsTranslator) -&gt; str\n</code></pre> <p>Get the name of a translator.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to query.</li> </ul> <p>Returns: A string with the name of the translator.</p>"},{"location":"api/capi-py/#helicsTranslatorGetOption","title":"helicsTranslatorGetOption","text":"<pre><code>def helicsTranslatorGetOption(translator: HelicsTranslator, option: HelicsHandleOption) -&gt; int\n</code></pre> <p>Get the current value of an translator handle option.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to query.</li> <li><code>option</code> - Integer representation of the option in question see <code>helics.HelicsHandleOption</code>.</li> </ul> <p>Returns: An integer value with the current value of the given option.</p>"},{"location":"api/capi-py/#helicsTranslatorGetTag","title":"helicsTranslatorGetTag","text":"<pre><code>def helicsTranslatorGetTag(translator: HelicsTranslator) -&gt; str\n</code></pre> <p>Get the data in the tag for an translator.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to query.</li> </ul> <p>Returns: A string with the info field string.</p>"},{"location":"api/capi-py/#helicsTranslatorIsValid","title":"helicsTranslatorIsValid","text":"<pre><code>def helicsTranslatorIsValid(translator: HelicsTranslator) -&gt; bool\n</code></pre> <p>Check if a translator is valid.</p> <ul> <li><code>translator</code> The translator object to check.</li> </ul> <p>Returns: True if the Translator object represents a valid translator.</p>"},{"location":"api/capi-py/#helicsTranslatorRemoveTarget","title":"helicsTranslatorRemoveTarget","text":"<pre><code>def helicsTranslatorRemoveTarget(translator: HelicsTranslator, target: str)\n</code></pre> <p>Remove target from translator</p>"},{"location":"api/capi-py/#parameters_26","title":"Parameters","text":"<ul> <li><code>translator</code> - The given translator.</li> <li><code>target_name</code> - The name of the translator to remove.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorSet","title":"helicsTranslatorSet","text":"<pre><code>def helicsTranslatorSet(translator: HelicsTranslator, property: str, value: float)\n</code></pre> <p>Set a property on a translator.</p> <ul> <li><code>translator</code>: The translator to modify.</li> <li><code>prop</code>: A string containing the property to set.</li> <li><code>val</code>: A numerical value for the property.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorSetCustomCallback","title":"helicsTranslatorSetCustomCallback","text":"<pre><code>def helicsTranslatorSetCustomCallback(translator, to_message_call, to_value_call, user_data)\n</code></pre> <p>Set a general callback for a custom translator.</p> <p>Add a pair of custom callbacks for running a translator operation in the C shared library.</p> <p>Parameters</p> <ul> <li><code>translator</code>: The translator object to set the callbacks for.</li> <li><code>to_message_call</code>: A callback with signature void(HelicsDataBuffer, HelicsMessage, void *); The function arguments are raw Value data, the messageObject to fill out and a pointer to user data.</li> <li><code>to_value_call</code>: A callback with signature void(HelicsMessage, HelicsDataBuffer, void *); The function arguments are a message object, the data buffer to fill out and a pointer to user data.</li> <li><code>user_data</code>: A pointer to user data that is passed to the functions when executing.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorSetInfo","title":"helicsTranslatorSetInfo","text":"<pre><code>def helicsTranslatorSetInfo(translator: HelicsTranslator, info: str)\n</code></pre> <p>Set the data in the info field for an translator.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to query.</li> <li><code>info</code> - The string to set.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorSetOption","title":"helicsTranslatorSetOption","text":"<pre><code>def helicsTranslatorSetOption(translator: HelicsTranslator, option: HelicsHandleOption, value: int)\n</code></pre> <p>Set an option on an translator.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to query.</li> <li><code>option</code> - The option to set for the translator <code>helics.HelicsHandleOption</code>.</li> <li><code>value</code> - The value to set the option to.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorSetString","title":"helicsTranslatorSetString","text":"<pre><code>def helicsTranslatorSetString(translator: HelicsTranslator, property: str, value: str)\n</code></pre> <p>Set string property on a translator.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to modify</li> <li><code>property</code>: A string containing the property to set.</li> <li><code>value</code>: A string value for the property.</li> </ul>"},{"location":"api/capi-py/#helicsTranslatorSetTag","title":"helicsTranslatorSetTag","text":"<pre><code>def helicsTranslatorSetTag(translator: HelicsTranslator, tag: str)\n</code></pre> <p>Set the data in the tag for an translator.</p> <p>Parameters</p> <ul> <li><code>translator</code> - The translator to query.</li> <li><code>tag</code> - The string to set.</li> </ul>"},{"location":"api/capi-py/#helicsWrapDataInBuffer","title":"helicsWrapDataInBuffer","text":"<pre><code>def helicsWrapDataInBuffer(data: bytes, data_capacity: int) -&gt; HelicsDataBuffer\n</code></pre> <p>Wrap user data in a buffer object</p>"},{"location":"api/capi-py/#loadSym","title":"loadSym","text":"<pre><code>def loadSym(s)\n</code></pre>"},{"location":"api/cli-py/","title":"Module helics.cli","text":"<p>HELICS command line interface</p>"},{"location":"api/cli-py/#classes","title":"Classes","text":""},{"location":"api/cli-py/#Job","title":"Job","text":"<pre><code>class Job(name: str, process: subprocess.Popen, file: str)\n</code></pre> <p>Job(name: str, process: subprocess.Popen, file: str)</p> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/cli-py/#Output","title":"Output","text":"<pre><code>class Output(name: str, file: Optional[_io.TextIOWrapper])\n</code></pre> <p>Output(name: str, file: Optional[_io.TextIOWrapper])</p> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/cli-py/#functions","title":"Functions","text":""},{"location":"api/cli-py/#fetch","title":"fetch","text":"<pre><code>def fetch(url, data={}, method=\"POST\")\n</code></pre>"},{"location":"api/profile-py/","title":"Module helics.profile","text":""},{"location":"api/profile-py/#functions","title":"Functions","text":""},{"location":"api/profile-py/#plot","title":"plot","text":"<pre><code>def plot(profile, save=None, kind=\"simulation\", **kwargs)\n</code></pre>"},{"location":"api/profile-py/#profile","title":"profile","text":"<pre><code>def profile(filename, invert=True)\n</code></pre>"},{"location":"api/status_checker-py/","title":"Module helics.status_checker","text":""},{"location":"api/status_checker-py/#classes","title":"Classes","text":""},{"location":"api/status_checker-py/#CheckStatusThread","title":"CheckStatusThread","text":"<pre><code>class CheckStatusThread(self, process_list, should_kill, helics_server_available)\n</code></pre> <p>A class that represents a thread of control.</p> <p>This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass.</p> <p>This constructor should always be called with keyword arguments. Arguments are:</p> <p>group should be None; reserved for future extension when a ThreadGroup class is implemented.</p> <p>target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.</p> <p>name is the thread name. By default, a unique name is constructed of the form \u201cThread-N\u201d where N is a small decimal number.</p> <p>args is a list or tuple of arguments for the target invocation. Defaults to ().</p> <p>kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}.</p> <p>If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.init()) before doing anything else to the thread.</p>"},{"location":"api/status_checker-py/#CheckStatusThread-bases","title":"Base classes","text":"<ul> <li><code>threading.Thread</code></li> </ul>"},{"location":"api/status_checker-py/#CheckStatusThread-attrs","title":"Instance attributes","text":"<ul> <li>daemon A boolean value indicating whether this thread is a daemon thread.</li> </ul> <p>This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False.</p> <p>The entire Python program exits when only daemon threads are left.</p> <ul> <li>ident Thread identifier of this thread or None if it has not been started.</li> </ul> <p>This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited.</p> <ul> <li>name A string used for identification purposes only.</li> </ul> <p>It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.</p> <ul> <li>native_id Native integral thread ID of this thread, or None if it has not been started.</li> </ul> <p>This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel.</p>"},{"location":"api/status_checker-py/#CheckStatusThread-methods","title":"Methods","text":"<p>run</p> <pre><code>def run(self)\n</code></pre> <p>Method representing the thread\u2019s activity.</p> <p>You may override this method in a subclass. The standard run() method invokes the callable object passed to the object\u2019s constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.</p> <p>status</p> <pre><code>def status(self, p)\n</code></pre>"},{"location":"api/status_checker-py/#HELICSRuntimeError","title":"HELICSRuntimeError","text":"<pre><code>class HELICSRuntimeError(self, *args, **kwargs)\n</code></pre> <p>Unspecified run-time error.</p>"},{"location":"api/status_checker-py/#HELICSRuntimeError-bases","title":"Base classes","text":"<ul> <li><code>builtins.RuntimeError</code></li> </ul>"},{"location":"api/utils-py/","title":"Module helics.utils","text":""},{"location":"api/utils-py/#functions","title":"Functions","text":""},{"location":"api/utils-py/#echo","title":"echo","text":"<pre><code>def echo(msg, fg=\"yellow\", level=\"warn\", blink=True)\n</code></pre>"},{"location":"api/utils-py/#error","title":"error","text":"<pre><code>def error(msg, blink=False)\n</code></pre>"},{"location":"api/utils-py/#info","title":"info","text":"<pre><code>def info(msg, blink=False)\n</code></pre>"},{"location":"api/utils-py/#warn","title":"warn","text":"<pre><code>def warn(msg, blink=True)\n</code></pre>"},{"location":"api/vcredist-py/","title":"Module helics.vcredist","text":""},{"location":"api/vcredist-py/#classes","title":"Classes","text":""},{"location":"api/vcredist-py/#VcRedist","title":"VcRedist","text":"<pre><code>class VcRedist(self, version=\"2015\", arch=\"amd64\")\n</code></pre> <p>Initialize self.  See help(type(self)) for accurate signature.</p>"},{"location":"api/vcredist-py/#VcRedist-methods","title":"Methods","text":"<p>download_and_run</p> <pre><code>def download_and_run(self)\n</code></pre>"},{"location":"api/vcredist-py/#functions","title":"Functions","text":""},{"location":"api/vcredist-py/#download_file","title":"download_file","text":"<pre><code>def download_file(url, filepath)\n</code></pre> <p>Download the file from url and store it in the given filepath.</p>"},{"location":"api/vcredist-py/#filename_from_url","title":"filename_from_url","text":"<pre><code>def filename_from_url(url)\n</code></pre> <p>Return the filename from a given url.</p>"},{"location":"examples/2-federates-1-topic/","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502             globaltopic1              \u2502                           \u2502\n\u2502         PiSender1         \u2502                                       \u2502         PiReceiver1       \u2502\n\u2502                           \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                   \u2510   \u2502                           \u2502\n\u2502                           \u2502    \u2572                             \u2571    \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502      \u2572                         \u2571      \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502        \u2572                     \u2571        \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502          \u2572                 \u2571          \u2502                           \u2502\n\u2502                           \u2502           \u2518                           \u2502                           \u2502\n\u2502                           \u2502            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502                           \u2502\n\u2502                           \u2502            \u2502             \u2502            \u2502                           \u2502\n\u2502                           \u2502            \u2502   Broker    \u2502            \u2502                           \u2502\n\u2502                           \u2502            \u2502             \u2502            \u2502                           \u2502\n\u2502                           \u2502            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"examples/2-federates-3-topics/","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502             globaltopic1              \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502             globaltopic2              \u2502                           \u2502\n\u2502         PiSender1         \u2502                                       \u2502         PiReceiver1       \u2502\n\u2502                           \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502             globaltopic3              \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2502                           \u2502                                       \u2502                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"examples/20-federates-10-topics/","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           \u2502              globaltopic1             \u2502                           \u2502\n\u2502         PiSender1         \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502        PiReceiver1        \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510                                     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\n\u2514\u2500\u2524                           \u2502              globaltopic2           \u2514\u2500\u2524                           \u2502\n  \u2502         PiSender2         \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502        PiReceiver2        \u2502\n  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510                                     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510\n  \u2514\u2500\u2524                           \u2502             globaltopic3            \u2514\u2500\u2524                           \u2502\n    \u2502         PiSender3         \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502        PiReceiver3        \u2502\n    \u2502                           \u2502                                       \u2502                           \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n                                                        ...\n\n\n\n             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502                           \u2502            globaltopic10              \u2502                           \u2502\n             \u2502         PiSender10        \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502        PiReceiver10       \u2502\n             \u2502                           \u2502                                       \u2502                           \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"}]}